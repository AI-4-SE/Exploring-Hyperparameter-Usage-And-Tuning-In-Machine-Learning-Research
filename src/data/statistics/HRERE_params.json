{
    "bilstm.py": {
        "sklearn": {
            "average_precision_score_192": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((all_labels, labels_batch))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ],
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_25": {
                "variable": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_words",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_textlen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_positions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embedded_words] + tf.unstack(self.wpe_chars, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_114": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(sen_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_116": {
                "variable": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.relu(h_norm), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(sen_s), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_149": {
                "variable": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.pretrained_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_57": {
                "variable": {
                    "value": "self.embedded_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_73": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_74": {
                "variable": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, W, b)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(h_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.state_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_83": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_84": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_85": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_88": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_92": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(outputs[0], outputs[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "self.sen_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(alpha, outputs_added)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "query_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_108": {
                "variable": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.output_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "tensor": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_125": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h_drop, training=self.phase)",
                            "Call"
                        ],
                        [
                            "self.add_hidden_layer(h_output, i)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_127": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_131": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_140": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.predictions, self.input_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "self.valid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.to_float(tf.equal(self.input_labels, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "self.correct_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask * correct_predictions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_step_209": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_256": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_55": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_59": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "position_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "'hidden_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "sentence_repr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "sentence_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_114": {
                "features": {
                    "value": "sen_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(sen_alpha, tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])), [-1, self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_138": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_150": {
                "control_inputs": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_64": {
                "value": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "features": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h, training=self.phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_95": {
                "x": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_109": {
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "a": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.input_labels, logits=self.scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_139": {
                "x": {
                    "value": "tf.equal(self.input_labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_140": {
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "tf.reshape(outputs_added, [-1, self.state_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_w', [self.state_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "tf.matmul(tf.multiply(sen_repre, attention_A), query_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_139": {
                "x": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "a": {
                    "value": "tf.multiply(sen_repre, attention_A)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('query_r', shape=[self.output_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_109": {
                "x": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_A', shape=[self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "complex_hrere.py": {
        "sklearn": {
            "average_precision_score_282": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((all_labels, labels_batch))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ],
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_words",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_textlen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_positions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.input_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.input_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tails",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embedded_words] + tf.unstack(self.wpe_chars, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(sen_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_153": {
                "variable": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.relu(h_norm), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(sen_s), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_208": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.to_float(tf.equal(self.sen_preds, 0))",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ],
                        [
                            "1 - tf.to_float(tf.equal(self.input_labels, 0))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_217": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_226": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_227": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_228": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.var_list1 + self.var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_233": {
                "variable": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.pretrained_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_77": {
                "variable": {
                    "value": "self.embedded_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_81": {
                "variable": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.entity_embedding1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "E2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.entity_embedding2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "variable": {
                    "value": "self.e1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(E1, self.input_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "self.e1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(E2, self.input_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_91": {
                "variable": {
                    "value": "self.e2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(E1, self.input_tails)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_92": {
                "variable": {
                    "value": "self.e2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(E2, self.input_tails)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_105": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_106": {
                "variable": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, W, b)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(h_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.state_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_115": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_116": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_117": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_120": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_124": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_127": {
                "variable": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(outputs[0], outputs[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "self.sen_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(alpha, outputs_added)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "query_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_142": {
                "variable": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.output_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "variable": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "tensor": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_164": {
                "variable": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h_drop, training=self.phase)",
                            "Call"
                        ],
                        [
                            "self.add_hidden_layer(h_output, i)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sen_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sen_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "self.sen_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "sen_preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_169": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.relation_embedding1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_embedding1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_171": {
                "variable": {
                    "value": "self.r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.relation_embedding2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_embedding2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "self.entity_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "variable": {
                    "value": "self.entity_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_184": {
                "variable": {
                    "value": "sen_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_186": {
                "variable": {
                    "value": "entity_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_190": {
                "variable": {
                    "value": "kl_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.entity_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_221": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.preds, self.input_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_222": {
                "variable": {
                    "value": "self.valid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.to_float(tf.equal(self.sen_preds, 0))",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ],
                        [
                            "1 - tf.to_float(tf.equal(self.input_labels, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "self.correct_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask * correct_predictions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_239": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer1.apply_gradients(zip(grads1, self.var_list1), global_step=self.global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer2.apply_gradients(zip(grads2, self.var_list2))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_step_300": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_349": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_75": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_79": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "position_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_86": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "entity_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "'hidden_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "sentence_repr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_138": {
                "name": {
                    "value": "sentence_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_151": {
                "features": {
                    "value": "sen_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(sen_alpha, tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])), [-1, self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "sentence_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "entity_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_183": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_207": {
                "x": {
                    "value": "tf.equal(self.sen_preds, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_219": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_234": {
                "control_inputs": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_84": {
                "value": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_89": {
                "params": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding1, dtype=tf.float32, name='E1')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_90": {
                "params": {
                    "value": "E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding2, dtype=tf.float32, name='E2')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "params": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding1, dtype=tf.float32, name='E1')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_tails",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_92": {
                "params": {
                    "value": "E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding2, dtype=tf.float32, name='E2')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_tails",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_107": {
                "features": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h, training=self.phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_127": {
                "x": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_133": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "self.e1_2 * self.e2_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "input_tensor": {
                    "value": "tf.square(self.r2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_207": {
                "x": {
                    "value": "self.sen_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_220": {
                "x": {
                    "value": "tf.equal(self.input_labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_221": {
                "x": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "tf.reshape(outputs_added, [-1, self.state_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_w', [self.state_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_143": {
                "tensor": {
                    "value": "tf.matmul(tf.multiply(sen_repre, attention_A), query_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "a": {
                    "value": "self.e1_1 * self.e2_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_196": {
                "input_tensor": {
                    "value": "tf.square(self.r1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_197": {
                "x": {
                    "value": "self.r2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_220": {
                "x": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "a": {
                    "value": "tf.multiply(sen_repre, attention_A)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('query_r', shape=[self.output_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "a": {
                    "value": "self.e1_1 * self.e2_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "self.e1_2 * self.e2_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "input_tensor": {
                    "value": "tf.square(self.e2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_196": {
                "x": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_202": {
                "input_tensor": {
                    "value": "sen_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.input_labels, logits=self.sen_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "kl_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.entity_preds, logits=self.sen_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_143": {
                "x": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_A', shape=[self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_194": {
                "input_tensor": {
                    "value": "tf.square(self.e2_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_195": {
                "x": {
                    "value": "self.e2_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "input_tensor": {
                    "value": "entity_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.input_labels, logits=self.entity_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "tf.square(self.e1_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "tf.square(self.e1_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "self.e2_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_192": {
                "x": {
                    "value": "self.e1_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "self.e1_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "create_kg.py": {
        "sklearn": {
            "train_test_split_72": {
                "variable": {
                    "value": "(_, _, train_idx, valid_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "final_plot.py": {
        "sklearn": {
            "precision_recall_curve_43": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, filename + '_labels.npy'))",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, 'Weston_labels.npy'))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, filename + '_probs.npy'))",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, 'Weston_probs.npy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_37": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, filename + '_labels.npy'))",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, 'Weston_labels.npy'))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, filename + '_probs.npy'))",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(config.PLOT_OUT_DIR, 'Weston_probs.npy'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "real_hrere.py": {
        "sklearn": {
            "average_precision_score_264": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.reshape(np.array(all_labels), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((all_labels, labels_batch))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ],
                        [
                            "np.zeros((0, self.num_classes - 1))",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_probs, probs[:, 1:]))",
                            "Call"
                        ],
                        [
                            "np.reshape(all_probs, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_words",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_textlen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.BAG_SIZE, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_positions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.input_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.input_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tails",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_textlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embedded_words] + tf.unstack(self.wpe_chars, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(sen_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_147": {
                "variable": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.relu(h_norm), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.relu(sen_s), self.dense_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_199": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_209": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_210": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.var_list1 + self.var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_215": {
                "variable": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.pretrained_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_75": {
                "variable": {
                    "value": "self.embedded_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_words_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_79": {
                "variable": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_positions_flatten",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_86": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding, dtype=tf.float32, name='E')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.entity_embedding, dtype=tf.float32, name='E')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_tails",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_99": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_100": {
                "variable": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, W, b)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(h_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.state_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_109": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_110": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_111": {
                "variable": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_114": {
                "variable": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.dense_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_118": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_forward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.state_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_backward, input_keep_prob=self.dense_dropout, output_keep_prob=self.rnn_dropout, seed=config.RANDOM_SEED)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.input_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_textlen_flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "variable": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(outputs[0], outputs[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "self.sen_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(alpha, outputs_added)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "query_r",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.output_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "variable": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.output_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_137": {
                "variable": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_158": {
                "variable": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "h_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h_drop, training=self.phase)",
                            "Call"
                        ],
                        [
                            "self.add_hidden_layer(h_output, i)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.pretrained_embedding, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.wpe, trainable=False, dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[dim, self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_size, self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=[self.hidden_size], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=[self.num_classes], initializer=tf.contrib.layers.xavier_initializer(seed=config.RANDOM_SEED))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sen_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sen_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_160": {
                "variable": {
                    "value": "self.sen_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "sen_preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "negative_166": {
                "variable": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(tf.expand_dims(self.e1, 1) + tf.expand_dims(self.r, 0) - tf.expand_dims(self.e2, 1)), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "self.entity_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_170": {
                "variable": {
                    "value": "self.entity_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_174": {
                "variable": {
                    "value": "sen_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_176": {
                "variable": {
                    "value": "entity_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.entity_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_178": {
                "variable": {
                    "value": "kl_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.entity_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.sen_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_203": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.preds, self.input_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_204": {
                "variable": {
                    "value": "self.valid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.to_float(tf.equal(self.input_labels, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_205": {
                "variable": {
                    "value": "self.correct_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask * correct_predictions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_221": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer1.apply_gradients(zip(grads1, self.var_list1), global_step=self.global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer2.apply_gradients(zip(grads2, self.var_list2))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_step_282": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_331": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_73": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_77": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "position_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "entity_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "'hidden_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "sentence_repr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "sentence_att",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_145": {
                "features": {
                    "value": "sen_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(sen_alpha, tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])), [-1, self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "sentence_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "entity_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_173": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_201": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_82": {
                "value": {
                    "value": "self.wpe_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_101": {
                "features": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(h, training=self.phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_121": {
                "x": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(tf.reshape(outputs_added, [-1, self.state_size]), attention_w), [-1, self.sequence_length]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alpha, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "outputs_added",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.add(outputs[0], outputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_127": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vs.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "logits": {
                    "value": "tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "sen_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(tf.reshape(tf.matmul(tf.multiply(sen_repre, attention_A), query_r), [-1, config.BAG_SIZE])), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(sen_repre, [-1, config.BAG_SIZE, self.output_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "input_tensor": {
                    "value": "tf.abs(tf.expand_dims(self.e1, 1) + tf.expand_dims(self.r, 0) - tf.expand_dims(self.e2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "tf.square(self.r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_202": {
                "x": {
                    "value": "tf.equal(self.input_labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_203": {
                "x": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "a": {
                    "value": "tf.reshape(outputs_added, [-1, self.state_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "attention_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_w', [self.state_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "tf.matmul(tf.multiply(sen_repre, attention_A), query_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, config.BAG_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_166": {
                "x": {
                    "value": "tf.expand_dims(self.e1, 1) + tf.expand_dims(self.r, 0) - tf.expand_dims(self.e2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "input_tensor": {
                    "value": "tf.square(self.e1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "input_tensor": {
                    "value": "tf.square(self.e2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_182": {
                "x": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_202": {
                "x": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "a": {
                    "value": "tf.multiply(sen_repre, attention_A)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "query_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('query_r', shape=[self.output_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_180": {
                "x": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_181": {
                "x": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "input_tensor": {
                    "value": "sen_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.input_labels, logits=self.sen_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_189": {
                "input_tensor": {
                    "value": "kl_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.entity_preds, logits=self.sen_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_137": {
                "x": {
                    "value": "sen_repre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(self.output_features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('attention_A', shape=[self.output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_168": {
                "input": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "input_tensor": {
                    "value": "entity_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.input_labels, logits=self.entity_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "task.py": {
        "sklearn": {
            "ShuffleSplit_42": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "average_precision_score_158": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(np.vstack(probs_list), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Saver_76": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_121": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_125": {
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=8, allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Variable_22": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}