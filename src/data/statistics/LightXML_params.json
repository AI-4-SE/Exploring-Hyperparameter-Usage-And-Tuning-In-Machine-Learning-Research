{
    "src/cluster.py": {
        "sklearn": {
            "load_svmlight_file_13": {
                "variable": {
                    "value": "(sparse_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "feature_file",
                    "type": "variable",
                    "possible_values": []
                },
                "multilabel": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiLabelBinarizer_20": {
                "variable": {
                    "value": "mlb",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "variable": {
                    "value": "labels_f",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix(sparse_y.T) @ csc_matrix(sparse_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray([np.squeeze(np.asarray(labels_f[l_labels_i].sum(axis=0))), np.squeeze(np.asarray(labels_f[r_labels_i].sum(axis=0)))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_15": {
                "X": {
                    "value": "sparse_x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "sklearn": {
            "train_test_split_147": {
                "variable": {
                    "value": "(train_df, valid_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df[df['dataType'] == 'train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1240",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'train', tokenizer, label_map, args.max_len, group_y=group_y, candidates_num=args.group_y_candidate_num)",
                            "Call"
                        ],
                        [
                            "MDataset(df, 'train', tokenizer, label_map, args.max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'test', tokenizer, label_map, args.max_len, candidates_num=args.group_y_candidate_num)",
                            "Call"
                        ],
                        [
                            "MDataset(df, 'test', tokenizer, label_map, args.max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'train', tokenizer, label_map, args.max_len, group_y=group_y, candidates_num=args.group_y_candidate_num)",
                            "Call"
                        ],
                        [
                            "MDataset(df, 'train', tokenizer, label_map, args.max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'test', tokenizer, label_map, args.max_len, candidates_num=args.group_y_candidate_num)",
                            "Call"
                        ],
                        [
                            "MDataset(df, 'test', tokenizer, label_map, args.max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MDataset(df, 'test', model.get_fast_tokenizer(), label_map, args.max_len, candidates_num=args.group_y_candidate_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MDataset(df, 'valid', model.get_fast_tokenizer(), label_map, args.max_len, group_y=group_y, candidates_num=args.group_y_candidate_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'valid', tokenizer, label_map, args.max_len, group_y=group_y, candidates_num=args.group_y_candidate_num)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_188": {
                "f": {
                    "value": "f'models/model-{get_exp_name()}.bin'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset.py": {
        "torch": {
            "tensor_130": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.token_type_ids[idx]",
                            "Subscript"
                        ],
                        [
                            "input_ids[input_ids != 0]",
                            "Subscript"
                        ],
                        [
                            "input_ids.tolist()",
                            "Call"
                        ],
                        [
                            "self.tokenizer.encode('filling empty' if len(text) == 0 else text, add_special_tokens=True, max_length=max_len)",
                            "Call"
                        ],
                        [
                            "self.tokenizer.encode('filling empty' if len(text) == 0 else text, add_special_tokens=True).ids",
                            "Attribute"
                        ],
                        [
                            "input_ids[:self.max_length]",
                            "Subscript"
                        ],
                        [
                            "input_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "attention_mask + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "token_type_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "group_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_group_y_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "group_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.map_children[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.label_map[i] for i in self.df.label.values[idx].split() if i in self.label_map]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_174": {
                "data": {
                    "value": "[1.0 for i in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.label_map[i] for i in self.df.label.values[idx].split() if i in self.label_map]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "data": {
                    "value": "[1.0 for i in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "group_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.map_group_y[labels]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(group_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[1.0 for i in group_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "group_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.map_group_y[labels]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(group_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "data": {
                    "value": "[1.0 for i in group_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ensemble.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MDataset(df, 'test', tokenizer, label_map, 128 if args.dataset == 'amazoncat13k' and berts[index] == 'xlnent' else 512)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "f'models/model-{model_name}.bin'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "input": {
                    "value": "predicts[i][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/ensemble_direct.py": {
        "torch": {
            "sigmoid_61": {
                "input": {
                    "value": "torch.tensor(model_scores[i][index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "model_scores[i][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "sigmoid_71": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "group_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_74": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(group_logits.detach())",
                            "Call"
                        ],
                        [
                            "logits + group_gd",
                            "BinOp"
                        ],
                        [
                            "group_logits",
                            "variable"
                        ],
                        [
                            "torch.bmm(embed_weights, emb).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ]
                    ]
                },
                "k": {
                    "value": "self.candidates_topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outs[-i][:, 0] for i in range(1, self.feature_layers + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_140": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(candidates)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(out)",
                            "Call"
                        ],
                        [
                            "emb.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_203": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_layers * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.group_y_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_layers * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_layers * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "masked_select_111": {
                "variable": {
                    "value": "target_candidates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([np.pad(i, (0, max_candidates - i.shape[0]), mode='edge') for i in candidates])",
                            "Call"
                        ],
                        [
                            "candidates.detach().cpu()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "set(np.nonzero(l)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_143": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_147": {
                "variable": {
                    "value": "candidates_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(group_logits.detach())",
                            "Call"
                        ],
                        [
                            "logits + group_gd",
                            "BinOp"
                        ],
                        [
                            "group_logits",
                            "variable"
                        ],
                        [
                            "torch.bmm(embed_weights, emb).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ]
                    ]
                }
            },
            "save_153": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_103": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_245": {
                "mode": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[1.0 if i in c else 0.0 for i in c2]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_324": {
                "variable": {
                    "value": "(_scores, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[candidates[i][_indices[i]] for i in range(_indices.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}