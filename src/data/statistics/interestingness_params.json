{
    "autoencoder.py": {
        "torch": {
            "DataLoader_147": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubTF(root='/data/datasets', train=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "(net, best_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "saves/resnet.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_115": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_123": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[inputs, outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "DataLoader_267": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VideoData(root='/data/datasets/PersonalVideo/', file='snowresort_divx.avi', transform=transform)",
                            "Call"
                        ],
                        [
                            "['test0', 'test1', 'test2', 'test3', 'test4', 'test5']",
                            "List"
                        ],
                        [
                            "['0817-ugv0-tunnel0', '0817-ugv1-tunnel0', '0818-ugv0-tunnel1', '0818-ugv1-tunnel1', '0820-ugv0-tunnel1', '0821-ugv0-tunnel0', '0821-ugv1-tunnel0']",
                            "List"
                        ],
                        [
                            "['00006_divx', '00007_divx', '00016_sea_divx', '00018_sea_divx', '00018_sea_divx24000', '00019_divx', '00043_t_divx', 'selfwalk_divx', 'snowresort_divx']",
                            "List"
                        ],
                        [
                            "'car'",
                            "MethodArgument"
                        ],
                        [
                            "'tunnel-0'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "indexfile",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(root, 'split.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "indexfile",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(root, 'split.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "interestingness.py": {
        "torch": {
            "rand_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_48": {
                "x1": {
                    "value": "coding.view(coding.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.reads.view(self.reads.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "longterm.py": {
        "torch": {
            "DataLoader_94": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(root=train_root, annFile=train_annFile, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(root=val_root, annFile=val_annFile, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_110": {
                "variable": {
                    "value": "creterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.w_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "(net, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CocoDetection(root=test_root, annFile=test_annFile, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "(net, best_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_134": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "(net.module, val_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "memory.py": {
        "torch": {
            "SummaryWriter_83": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/memory-' + str(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.rw * self.pi_2).tan() * self.rr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_62": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rolls2d(self.memory, -trans)",
                            "Call"
                        ],
                        [
                            "(1 - w) * self.memory.data",
                            "BinOp"
                        ],
                        [
                            "self.memory.view(self.N, -1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._normalize(key)",
                            "Call"
                        ],
                        [
                            "self._normalize(keys[i]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "key.view(key.size(0), 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c * self.pi_2).tan() * self.wr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_91": {
                "x1": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_107": {
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "online.py": {
        "torch": {
            "min_105": {
                "variable": {
                    "value": "min_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(batch - min_v) / range_v",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(root=args.data_root, train=False, test_data=args.test_data, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_143": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_106": {
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(batch - min_v) / range_v",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[outputs, (inputs - outputs).abs()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "shortterm.py": {
        "torch": {
            "DataLoader_69": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(root=args.data_root, train=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "(net, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.w_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Interestingness(net, args.memory_size, 512, 10, 10, 10, 10).to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.model_save + '.' + args.dataset + '.' + args.save_flag + '.' + args.loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[inputs, outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchutil.py": {
        "torch": {
            "min_409": {
                "variable": {
                    "value": "min_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(batch - min_v) / range_v",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_66": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "window_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.width, self.hight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_128": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_137": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_149": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Fold_176": {
                "variable": {
                    "value": "self.fold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "self.w3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_216": {
                "variable": {
                    "value": "self.w3[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_217": {
                "variable": {
                    "value": "self.w3[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rot90_217": {
                "variable": {
                    "value": "self.w3[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "self.w5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_222": {
                "variable": {
                    "value": "self.w5[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_223": {
                "variable": {
                    "value": "self.w5[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rot90_223": {
                "variable": {
                    "value": "self.w5[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_311": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pair(input_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "rfftn_314": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x.mean()",
                            "BinOp"
                        ],
                        [
                            "(inputs.size(-2) - w) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_314": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rfftn_315": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y - y.mean()",
                            "BinOp"
                        ],
                        [
                            "(inputs.size(-1) - h) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_320": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.fft.irfftn((X.conj() * Y).sum(2), **self.fft_args) * self.N",
                            "BinOp"
                        ],
                        [
                            "g.view(x.size(0), y.size(0), -1) / xx / yy",
                            "BinOp"
                        ],
                        [
                            "torch.fft.irfftn((X.conj() * Y).sum(2), **self.fft_args) * self.N",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_321": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices // self.input_size[1], indices % self.input_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_346": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pair(input_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "rfftn_349": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x.mean()",
                            "BinOp"
                        ],
                        [
                            "(inputs.size(-2) - w) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rfftn_350": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y - y.mean()",
                            "BinOp"
                        ],
                        [
                            "(inputs.size(-1) - h) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_414": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv1d_77": {
                "input": {
                    "value": "torch.tensor(self.nums, dtype=torch.float).view(1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "(split, center)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_243": {
                "input": {
                    "value": "img.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "index // self.width * self.conv.stride[0]",
                            "BinOp"
                        ],
                        [
                            "self.w3[torch.randint(0, 4, (1,))].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.w5[torch.randint(0, 4, (1,))].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_397": {
                "tensors": {
                    "value": "[inputs[i].roll(shifts[i].tolist(), dims) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_400": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[i].roll(shifts[j, i].tolist(), dims) for j in range(B) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_410": {
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(batch - min_v) / range_v",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(batch.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "window_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_85": {
                "*size": {
                    "value": "self.conv.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "irfftn_316": {
                "input": {
                    "value": "(X.conj() * Y).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "irfftn_351": {
                "input": {
                    "value": "(X.conj() * Y).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "self.nums",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_237": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_240": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}