{
    "main.py": {
        "torch": {}
    },
    "models/few_shot_seq_labeler.py": {
        "torch": {
            "relu_73": {
                "variable": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_target - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "test_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_target - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/fewshot_seqlabel/conditional_random_field.py": {
        "torch": {
            "Tensor_328": {
                "variable": {
                    "value": "transitions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_353": {
                "variable": {
                    "value": "tag_sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "constraint_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "constraint_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_291": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*tags.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_numerator - log_denominator",
                            "BinOp"
                        ],
                        [
                            "torch.sum(llh)",
                            "Call"
                        ],
                        [
                            "torch.mean(llh)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_356": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_303": {
                "variable": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_numerator - log_denominator",
                            "BinOp"
                        ],
                        [
                            "torch.sum(llh)",
                            "Call"
                        ],
                        [
                            "torch.mean(llh)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/fewshot_seqlabel/context_embedder_base.py": {
        "torch": {
            "gather_169": {
                "variable": {
                    "value": "nwp_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.single_reps(test_token_ids, test_segment_ids, test_nwp_index, test_input_mask)",
                            "Call"
                        ],
                        [
                            "sequence_output.narrow(-2, 0, 1)",
                            "Call"
                        ],
                        [
                            "reps.contiguous().view(batch_size, -1, reps_size)",
                            "Call"
                        ],
                        [
                            "sequence_output",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.single_reps(test_token_ids, test_segment_ids, test_nwp_index, test_input_mask)",
                            "Call"
                        ],
                        [
                            "sequence_output.narrow(-2, 0, 1)",
                            "Call"
                        ],
                        [
                            "reps.contiguous().view(batch_size, -1, reps_size)",
                            "Call"
                        ],
                        [
                            "sequence_output",
                            "variable"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.expand(expand_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_252": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_token",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[test_item, support_item]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/fewshot_seqlabel/emission_scorer_base.py": {
        "torch": {
            "bmm_83": {
                "variable": {
                    "value": "emission",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarities.view((-1, test_len, support_len))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_targets.view((-1, support_len, num_tags)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_87": {
                "variable": {
                    "value": "emission",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emission",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "torch.bmm(similarities, support_targets)",
                            "Call"
                        ],
                        [
                            "emission.view(batch_size, support_size, test_len, num_tags)",
                            "Call"
                        ],
                        [
                            "torch.sum(emission, dim=1)",
                            "Call"
                        ],
                        [
                            "emission.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.div_emission_by_tag_num(emission, support_targets, batch_size, num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_target.view(batch_size, -1, num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_110": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emission",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "torch.bmm(similarities, support_targets)",
                            "Call"
                        ],
                        [
                            "emission.view(batch_size, support_size, test_len, num_tags)",
                            "Call"
                        ],
                        [
                            "torch.sum(emission, dim=1)",
                            "Call"
                        ],
                        [
                            "emission.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.div_emission_by_tag_num(emission, support_targets, batch_size, num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(support_target.view(batch_size, -1, num_tags), dim=1).float()",
                            "Call"
                        ],
                        [
                            "tag_count.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "tag_count.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_120": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emission",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "torch.bmm(similarities, support_targets)",
                            "Call"
                        ],
                        [
                            "emission.view(batch_size, support_size, test_len, num_tags)",
                            "Call"
                        ],
                        [
                            "torch.sum(emission, dim=1)",
                            "Call"
                        ],
                        [
                            "emission.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.div_emission_by_tag_num(emission, support_targets, batch_size, num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_emission(similarity, support_targets)",
                            "Call"
                        ],
                        [
                            "similarities.narrow(-1, 1, no_pad_num_tags)",
                            "Call"
                        ],
                        [
                            "self.scaler(emission, p=1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "support_num.float().unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "torch.isnan(my_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(my_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "my_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_135": {
                "input": {
                    "value": "my_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_135": {
                "input": {
                    "value": "my_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/fewshot_seqlabel/scale_controller.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self.scale_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.scale_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ],
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ],
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ],
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ],
                        [
                            "x * self.scale_rate",
                            "BinOp"
                        ],
                        [
                            "self.normalizer(x, dim=dim, p=p)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_90": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/fewshot_seqlabel/seq_labeler.py": {
        "torch": {
            "tensor_131": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.1, 0.2, 0.5, 0.7, 0.3], [1.2, 0.8, 0.5, 0.6, 0.1], [0.4, 0.5, 0.5, 0.9, 1.2]], [[1.9, 0.3, 0.5, 0.2, 0.3], [0.2, 0.1, 0.5, 0.4, 0.1], [0.4, 0.5, 0.1, 0.1, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_83": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/fewshot_seqlabel/similarity_scorer_base.py": {
        "torch": {
            "dist_23": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1_reps.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sent2_reps.unsqueeze(-1).expand()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_34": {
                "variable": {
                    "value": "dot_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(sent2_reps, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "sent1_reps_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_36": {
                "variable": {
                    "value": "sent2_reps_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent2_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_37": {
                "variable": {
                    "value": "norm_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1_reps_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(sent1_reps, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(sent2_reps_norm, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_12": {
                "input": {
                    "value": "sent1_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(sent2_reps, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_reps.view(-1, test_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(test_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "test_reps.contiguous().view(batch_size, support_size, -1, self.mlp_out_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_177": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(support_targets, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(support_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, self.mlp_out_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_180": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps.view(batch_size, support_size, num_tags, emb_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_targets.view(batch_size, -1, num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_186": {
                "variable": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, self.mlp_out_dim), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_242": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(support_targets, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(support_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, self.mlp_out_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_244": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps.view(batch_size, support_size, num_tags, emb_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_247": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_targets.view(batch_size, -1, num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_250": {
                "variable": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, self.mlp_out_dim), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_259": {
                "variable": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_reps.view(-1, test_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(test_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "test_reps.contiguous().view(batch_size, support_size, -1, self.mlp_out_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_366": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(support_targets, -1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(support_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "support_reps.view(-1, support_len, self.mlp_out_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_368": {
                "variable": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps.view(batch_size, support_size, num_tags, self.mlp_out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_targets.view(batch_size, -1, num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_374": {
                "variable": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, emb_dim), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.transpose(support_targets, -1, -2), support_reps)",
                            "Call"
                        ],
                        [
                            "torch.sum(sum_reps.view(batch_size, support_size, num_tags, self.mlp_out_dim), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tag_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ],
                        [
                            "torch.sum(support_targets.view(batch_size, -1, num_tags), dim=1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.remove_0(tag_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_382": {
                "variable": {
                    "value": "label_reps_sum_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(label_reps_sum).narrow(dim=-2, start=0, length=1).to(label_reps_sum.device), label_reps_sum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_417": {
                "variable": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_reps.view(-1, test_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(test_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "test_reps.contiguous().view(batch_size, support_size, -1, self.mlp_out_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "label_reps_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1).to(label_reps.device), label_reps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_12": {
                "input": {
                    "value": "sent2_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "input": {
                    "value": "sent2_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "input": {
                    "value": "sent2_reps_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(sent2_reps, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1), label_reps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_292": {
                "variable": {
                    "value": "self.label_reps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.xavier_normal_(torch.randn((num_tags * 3, self.bert_emb_dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.f_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mlp_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mlp_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_347": {
                "variable": {
                    "value": "random_label_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.label_reps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_353": {
                "variable": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(label_reps.contiguous().view(-1, emb_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_355": {
                "variable": {
                    "value": "support_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_theta(support_reps.contiguous().view(-1, emb_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_393": {
                "variable": {
                    "value": "(_, s, vh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "error_every_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_reps_sum_pad - prototype_reps_sum",
                            "BinOp"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_407": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_414": {
                "variable": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_theta(test_reps.contiguous().view(-1, emb_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "input": {
                    "value": "support_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "input": {
                    "value": "support_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_340": {
                "variable": {
                    "value": "random_label_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.label_reps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_366": {
                "input": {
                    "value": "support_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ],
                        [
                            "support_targets.view(batch_size * support_size, support_len, num_tags).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_380": {
                "input": {
                    "value": "label_reps_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_reps.sum(dim=1).unsqueeze(1).repeat(1, no_pad_num_tags, 1) - label_reps",
                            "BinOp"
                        ],
                        [
                            "label_reps - 1 / (no_pad_num_tags - 1) * label_reps_sum",
                            "BinOp"
                        ],
                        [
                            "label_reps_sum / (torch.norm(label_reps_sum, p=2, dim=-1).unsqueeze(-1).expand_as(label_reps_sum) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_380": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_383": {
                "input": {
                    "value": "label_reps_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_reps.sum(dim=1).unsqueeze(1).repeat(1, no_pad_num_tags, 1) - label_reps",
                            "BinOp"
                        ],
                        [
                            "label_reps - 1 / (no_pad_num_tags - 1) * label_reps_sum",
                            "BinOp"
                        ],
                        [
                            "label_reps_sum / (torch.norm(label_reps_sum, p=2, dim=-1).unsqueeze(-1).expand_as(label_reps_sum) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "narrow_383": {
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_386": {
                "input": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "(1 - self.scaler) * prototype_reps + self.scaler * label_reps",
                            "BinOp"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "svd_399": {
                "variable": {
                    "value": "(_, s_, vh_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "error_every_class[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_420": {
                "input": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1), label_reps), dim=-2)",
                            "Call"
                        ],
                        [
                            "random_label_reps.unsqueeze(0).repeat(batch_size, 1, 1).to(support_reps.device)",
                            "Call"
                        ],
                        [
                            "(1 - self.random_init_r) * label_reps + self.random_init_r * random_label_reps",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(self.phi(label_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "label_reps.contiguous().view(batch_size, no_pad_num_tags, self.mlp_out_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "narrow_420": {
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_428": {
                "input": {
                    "value": "torch.sum(torch.exp(-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_proto_reps, M))), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_428": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_447": {
                "input": {
                    "value": "torch.sum(torch.exp(-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_reps_pad, M))), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_447": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_254": {
                "input": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1), label_reps), dim=-2)",
                            "Call"
                        ],
                        [
                            "random_label_reps.unsqueeze(0).repeat(batch_size, 1, 1).to(support_reps.device)",
                            "Call"
                        ],
                        [
                            "(1 - self.random_init_r) * label_reps + self.random_init_r * random_label_reps",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(self.phi(label_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "label_reps.contiguous().view(batch_size, no_pad_num_tags, self.mlp_out_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "narrow_254": {
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_293": {
                "*size": {
                    "value": "(num_tags * 3, self.bert_emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_402": {
                "tensors": {
                    "value": "vh",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_407": {
                "input": {
                    "value": "vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_409": {
                "input": {
                    "value": "vh[i][s_sum[i]:].clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_427": {
                "input": {
                    "value": "label_proto_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tap_proto_r * prototype_reps + (1 - self.tap_proto_r) * label_reps_pad",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_446": {
                "input": {
                    "value": "label_reps_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1).to(label_reps.device), label_reps), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_429": {
                "input": {
                    "value": "torch.exp(-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_proto_reps, M)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_439": {
                "input": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_reps.view(-1, test_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(test_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "test_reps.contiguous().view(batch_size, support_size, -1, self.mlp_out_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_441": {
                "input": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "(1 - self.scaler) * prototype_reps + self.scaler * label_reps",
                            "BinOp"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_448": {
                "input": {
                    "value": "torch.exp(-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_reps_pad, M)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_461": {
                "input": {
                    "value": "test_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_reps.view(-1, test_len, emb_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.f_theta(test_reps.contiguous().view(-1, emb_dim)))",
                            "Call"
                        ],
                        [
                            "test_reps.contiguous().view(batch_size, support_size, -1, self.mlp_out_dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(test_reps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_465": {
                "input": {
                    "value": "prototype_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ],
                        [
                            "(1 - self.scaler) * prototype_reps + self.scaler * label_reps",
                            "BinOp"
                        ],
                        [
                            "torch.div(sum_reps, tag_count)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_430": {
                "input": {
                    "value": "-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_proto_reps, M))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_449": {
                "input": {
                    "value": "-self.sim_func(torch.matmul(test_reps, M), torch.matmul(label_reps_pad, M))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_430": {
                "input": {
                    "value": "label_proto_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tap_proto_r * prototype_reps + (1 - self.tap_proto_r) * label_reps_pad",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_449": {
                "input": {
                    "value": "label_reps_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.zeros_like(label_reps).narrow(dim=-2, start=0, length=1).to(label_reps.device), label_reps), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:s_sum[i] + self.proj_dim].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.transpose(vh[i][s_sum[i]:].clone(), 0, 1) for i in range(batch_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/fewshot_seqlabel/transition_scorer.py": {
        "torch": {
            "zeros_154": {
                "variable": {
                    "value": "unfold_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "index_viewer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "unfold_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "pad2label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "source_trans.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad2label, source_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "label2pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_trans.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label2pad, source_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "start_end2pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_end2pad, source_start_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_end2pad, source_end_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.mlp_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_296": {
                "variable": {
                    "value": "self.mlp_active_fun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_298": {
                "variable": {
                    "value": "self.biaffine_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.dk, self.dk, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.biaffine_w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, 2 * self.dk, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_300": {
                "variable": {
                    "value": "self.biaffine_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_373": {
                "variable": {
                    "value": "self.label_cat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "self.label_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(label_reps, dim=1).expand(-1, self.num_tags, -1), torch.unsqueeze(label_reps, dim=0).expand(self.num_tags, -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "self.label_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(self.start_reps, dim=0).expand(self.num_tags, -1), label_reps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "self.label_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_reps, torch.unsqueeze(self.end_reps, dim=0).expand(self.num_tags, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "unfold_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_557": {
                "variable": {
                    "value": "index_viewer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_599": {
                "variable": {
                    "value": "unfold_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.no_pad_num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_632": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_633": {
                "variable": {
                    "value": "start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_634": {
                "variable": {
                    "value": "end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_658": {
                "variable": {
                    "value": "pad2label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "source_trans.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_659": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad2label, source_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_661": {
                "variable": {
                    "value": "label2pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_trans.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_662": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label2pad, source_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_664": {
                "variable": {
                    "value": "start_end2pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_trans.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_end2pad, source_start_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_666": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_end2pad, source_end_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "self.target_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "self.target_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "self.target_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.backoff_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_normal_(torch.randn(3, 5, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.backoff_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.randn(3, dtype=torch.float)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.backoff_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.randn(3, dtype=torch.float)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "take_140": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_trans_mat, dim=1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_141": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_start_trans_mat, dim=0).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_142": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_end_trans_mat, dim=0).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_144": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_145": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_start_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_146": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_end_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_210": {
                "input": {
                    "value": "tensor_input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "variable"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "variable"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.mlp_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_384": {
                "variable": {
                    "value": "self.mlp_active_fun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_471": {
                "variable": {
                    "value": "self.target_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_472": {
                "variable": {
                    "value": "self.target_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_473": {
                "variable": {
                    "value": "self.target_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_519": {
                "variable": {
                    "value": "self.backoff_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_normal_(torch.randn(3, 5, dtype=torch.float))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_521": {
                "variable": {
                    "value": "self.backoff_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.randn(3, dtype=torch.float)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_522": {
                "variable": {
                    "value": "self.backoff_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.randn(3, dtype=torch.float)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "take_542": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_trans_mat, dim=1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_543": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_start_trans_mat, dim=0).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_544": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalizer(self.backoff_end_trans_mat, dim=0).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_546": {
                "variable": {
                    "value": "source_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_547": {
                "variable": {
                    "value": "source_start_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_start_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "take_548": {
                "variable": {
                    "value": "source_end_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backoff_end_trans_mat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "self.start_end_unfold_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_612": {
                "input": {
                    "value": "tensor_input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_639": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "variable"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "variable"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.backoff_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[0.5, 0.5, -0.5, 0.5, -0.5], [0.4, 0.2, 0.5, 0.2, -0.5], [0.5, 0.2, 0.5, 0.2, -0.5]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.backoff_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.5, 0.2, -0.5])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.backoff_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.5, 0.2, 0.5])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_298": {
                "*size": {
                    "value": "self.dk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * self.dk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_300": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_303": {
                "data": {
                    "value": "torch.randn(1, emb_dim, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_304": {
                "data": {
                    "value": "torch.randn(1, emb_dim, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_352": {
                "input": {
                    "value": "torch.matmul(l1, self.biaffine_w_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "l2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "input": {
                    "value": "torch.cat((l1, l2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.biaffine_w_2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_377": {
                "data": {
                    "value": "torch.randn(emb_dim, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "data": {
                    "value": "torch.randn(emb_dim, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_401": {
                "input": {
                    "value": "self.label_cat_linear(self.label_trans_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_407": {
                "input": {
                    "value": "self.label_cat_linear(self.label_start_trans_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_413": {
                "input": {
                    "value": "self.label_cat_linear(self.label_end_trans_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_524": {
                "variable": {
                    "value": "self.backoff_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[0.5, 0.5, -0.5, 0.5, -0.5], [0.4, 0.2, 0.5, 0.2, -0.5], [0.5, 0.2, 0.5, 0.2, -0.5]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_528": {
                "variable": {
                    "value": "self.backoff_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.5, 0.2, -0.5])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_529": {
                "variable": {
                    "value": "self.backoff_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.5, 0.2, 0.5])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.backoff_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.div(self.trans_mat, self.trans_mat.sum(dim=-1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.backoff_start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.div(self.start_trans_mat, self.start_trans_mat.sum(dim=-1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.backoff_end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.div(self.end_trans_mat, self.end_trans_mat.sum(dim=-1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_303": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_304": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.biaffine_w_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_377": {
                "*size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_378": {
                "*size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_398": {
                "input": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp(label_reps) if self.use_mlp else label_reps",
                            "IfExp"
                        ],
                        [
                            "self.mlp(label_reps) if self.use_mlp else label_reps",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_399": {
                "input": {
                    "value": "label_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp(label_reps) if self.use_mlp else label_reps",
                            "IfExp"
                        ],
                        [
                            "self.mlp(label_reps) if self.use_mlp else label_reps",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_404": {
                "input": {
                    "value": "self.start_reps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_411": {
                "input": {
                    "value": "self.end_reps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_110": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_111": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "[[0.5, 0.5, -0.5, 0.5, -0.5], [0.4, 0.2, 0.5, 0.2, -0.5], [0.5, 0.2, 0.5, 0.2, -0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "[0.5, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "[0.5, 0.2, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_519": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_521": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_522": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_524": {
                "data": {
                    "value": "[[0.5, 0.5, -0.5, 0.5, -0.5], [0.4, 0.2, 0.5, 0.2, -0.5], [0.5, 0.2, 0.5, 0.2, -0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_528": {
                "data": {
                    "value": "[0.5, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_529": {
                "data": {
                    "value": "[0.5, 0.2, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_122": {
                "input": {
                    "value": "self.trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.trans_mat.sum(dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_125": {
                "input": {
                    "value": "self.start_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.start_trans_mat.sum(dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_127": {
                "input": {
                    "value": "self.end_trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.end_trans_mat.sum(dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_357": {
                "tensors": {
                    "value": "(l1, l2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_helper.py": {
        "torch": {
            "cat_196": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vec, torch.zeros(*pad_size, dtype=vec.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "trans_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "start_trans_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "end_trans_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "padded_item_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_item_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: pad_tensor(x[item_idx], pad=max_len, dim=self.get_dim(item_idx)), batch))",
                            "Call"
                        ],
                        [
                            "torch.stack(padded_item_lst, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "*size": {
                    "value": "*pad_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/device_helper.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not opt.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_19": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "opt.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_46": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_32": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_helper.py": {
        "torch": {
            "load_162": {
                "variable": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/preprocessor.py": {
        "torch": {
            "nonzero_195": {
                "input": {
                    "value": "torch.LongTensor(word_piece_mark) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tester.py": {
        "torch": {
            "TensorDataset_82": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[self.unpack_feature(f) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pad_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12])",
                            "Call"
                        ],
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_299": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pad_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12])",
                            "Call"
                        ],
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_84": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_86": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_118": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_120": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_295": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_297": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ],
                        [
                            "FewShotDataset([self.unpack_feature(f) for f in features])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/trainer.py": {
        "torch": {
            "DataLoader_187": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_sampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SimilarLengthSampler(dataset, batch_size=self.batch_size)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_377": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_sampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SimilarLengthSampler(dataset, batch_size=self.batch_size)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pad_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12])",
                            "Call"
                        ],
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_493": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_sampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SimilarLengthSampler(dataset, batch_size=self.batch_size)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pad_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12])",
                            "Call"
                        ],
                        [
                            "PadCollate(dim=-1, sp_dim=-2, sp_item_idx=[3, 8, 12, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_70": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertAdam(optimizer_grouped_parameters, lr=opt.learning_rate, warmup=opt.warmup_proportion, t_total=num_train_steps)",
                            "Call"
                        ],
                        [
                            "BertAdam(optimizer_grouped_parameters, lr=opt.learning_rate, warmup=opt.warmup_proportion, t_total=num_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.decay_epoch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.decay_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_177": {
                "*tensors": {
                    "value": "[self.unpack_feature(f) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RandomSampler_181": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_183": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_233": {
                "obj": {
                    "value": "self.check_point_content(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.opt.output_dir, 'model.step{}.cpt.pl'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_372": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dataset(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_241": {
                "obj": {
                    "value": "self.check_point_content(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.opt.output_dir, 'model.step{}.cpt.pl'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "self.check_point_content(model)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.opt.output_dir, 'model.pl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "param_opti.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "param_opti.data.new().resize_(*param_opti.data.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_value__327": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "self.opt.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_211": {
                "input": {
                    "value": "param_model.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}