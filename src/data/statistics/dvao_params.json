{
    "cuda_runner.py": {
        "torch": {
            "tensor_76": {
                "variable": {
                    "value": "gauss2d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vol.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_77": {
                "variable": {
                    "value": "sobel3d_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gauss2d, 0 * gauss2d, -gauss2d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv3d(vol, sobel3d_x), F.conv3d(vol, sobel3d_y), F.conv3d(vol, sobel3d_z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "{'vol_path': str(save_path / orig_name), 'ao': torch.from_numpy(out_ao).half(), 'tf_pts': torch.from_numpy(tf_pts), 'tf_tex': torch.from_numpy(tf_tex), 'vox_scl': torch.from_numpy(voxel_scale)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path / f'{vol_name}_{str(uuid4())[:8]}.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv3d_82": {
                "input": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asfortranarray(data['vol'].astype(np.float32))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "sobel3d_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sobel3d_x.permute(1, 2, 0)[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_125": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path / vol_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "torch.from_numpy(out_vol)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path / orig_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "out_ao",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(out[:, :, :, 3] / n_rays)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "tf_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "read_inviwo_tf(tf_path)",
                            "Call"
                        ],
                        [
                            "data['tf_pts'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "tf_tex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_tf_tex_from_pts(tf_pts, args.tf_res)",
                            "Call"
                        ],
                        [
                            "make_tf_tex_from_pts(tf_pts, resolution=args.tf_res)",
                            "Call"
                        ],
                        [
                            "make_tf_tex_from_pts(tf_pts, resolution=tf_res)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "voxel_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "out_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(out[:, :, :, 1].astype(np.float16))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "infer.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Event_51": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_52": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "{'pred': pred.to(torch.float16).cpu(), 'vol': vol.to(torch.float16).cpu(), 'gt': ao.to(torch.float16).cpu(), 'tf': tf[0].cpu() if isinstance(tf, list) else tf.cpu(), **meta}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "out_path / out_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ssim3d_torch.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_12": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-coords ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv3d_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win.to(input.dtype).to(input.device)",
                            "Call"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "groups": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_19": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv3d(input, win, groups=input.size(1))",
                            "Call"
                        ],
                        [
                            "F.conv3d(out, win.transpose(3, 4), groups=input.size(1))",
                            "Call"
                        ],
                        [
                            "F.conv3d(out, win.transpose(2, 4), groups=input.size(1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "win.transpose(3, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv3d(input, win, groups=input.size(1))",
                            "Call"
                        ],
                        [
                            "F.conv3d(out, win.transpose(3, 4), groups=input.size(1))",
                            "Call"
                        ],
                        [
                            "F.conv3d(out, win.transpose(2, 4), groups=input.size(1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "win.transpose(2, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_4": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "cs_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cs_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * sigma12 + C2) / (sigma1_sq + sigma2_sq + C2)",
                            "BinOp"
                        ],
                        [
                            "F.relu(cs_map, inplace=True)",
                            "Call"
                        ],
                        [
                            "(2 * sigma12 + C2) / (sigma1_sq + sigma2_sq + C2)",
                            "BinOp"
                        ],
                        [
                            "F.relu(cs_map, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "cs_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cs_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * sigma12 + C2) / (sigma1_sq + sigma2_sq + C2)",
                            "BinOp"
                        ],
                        [
                            "F.relu(cs_map, inplace=True)",
                            "Call"
                        ],
                        [
                            "(2 * sigma12 + C2) / (sigma1_sq + sigma2_sq + C2)",
                            "BinOp"
                        ],
                        [
                            "F.relu(cs_map, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_5": {
                "data": {
                    "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_6": {
                "tensors": {
                    "value": "[gauss2d, 2 * gauss2d, gauss2d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_53": {
                "input": {
                    "value": "targ",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win.to(input.dtype).to(input.device)",
                            "Call"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "groups": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_58": {
                "input": {
                    "value": "pred * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win.to(input.dtype).to(input.device)",
                            "Call"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "groups": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_59": {
                "input": {
                    "value": "targ * targ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win.to(input.dtype).to(input.device)",
                            "Call"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "groups": {
                    "value": "targ.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_60": {
                "input": {
                    "value": "pred * targ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "win",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win.to(input.dtype).to(input.device)",
                            "Call"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "get_gaussian1d(win_size, sigma, dtype=pred.dtype).to(pred.device)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "groups": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils.py": {
        "torch": {
            "empty_85": {
                "variable": {
                    "value": "x_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_out_shap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_shap[0], nc - 1, *x_shap[2:])",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_86": {
                "variable": {
                    "value": "pts_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npt * (nc - 1), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_178": {
                "variable": {
                    "value": "sobel3d_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gauss2d, 0 * gauss2d, -gauss2d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(vol, (1, 1, 1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv3d(vol, sobel3d_x), F.conv3d(vol, sobel3d_y), F.conv3d(vol, sobel3d_z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_184": {
                "variable": {
                    "value": "grad_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([F.conv3d(vol, sobel3d_x), F.conv3d(vol, sobel3d_y), F.conv3d(vol, sobel3d_z)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[apply_tf_torch(x, tf) for tf in tf_pts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vol.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_69": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv3d_183": {
                "input": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(vol, (1, 1, 1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "sobel3d_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sobel3d_x.permute(1, 2, 0)[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "randint_96": {
                "variable": {
                    "value": "tf_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.label[orig_name])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path / orig_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path / self.label[orig_name][tf_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor([[0.0, 0.0]]), label['tf_pts'][:, [0, -1]].float(), torch.Tensor([[1.0, 0.0]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tf_desc_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_feature_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tf_desc_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_feature_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_220": {
                "variable": {
                    "value": "self.middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Mish(), nn.BatchNorm1d(desc_sz), nn.Linear(desc_sz, desc_sz)] * n_mid_mlps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_221": {
                "variable": {
                    "value": "self.last_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "[local_shading, tfd[:, 3].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_445": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, tf)",
                            "Call"
                        ],
                        [
                            "self.forward(x, tf)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targ.to(pred.dtype).to(pred.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_454": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_454": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_455": {
                "variable": {
                    "value": "avg_ssim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_ssim'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_455": {
                "variable": {
                    "value": "avg_ssim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_456": {
                "variable": {
                    "value": "avg_ssim3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_ssim3d'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_456": {
                "variable": {
                    "value": "avg_ssim3d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_457": {
                "variable": {
                    "value": "avg_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_mse'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_457": {
                "variable": {
                    "value": "avg_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_488": {
                "variable": {
                    "value": "sch",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ranger(self.parameters(), lr=self.hparams.learning_rate, weight_decay=self.hparams.wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate, weight_decay=self.hparams.wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.AdamW(self.parameters(), lr=self.hparams.learning_rate, weight_decay=self.hparams.wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.RMSprop(self.parameters(), lr=self.hparams.learning_rate, weight_decay=self.hparams.wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=self.hparams.learning_rate, weight_decay=self.hparams.wd)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[it[0] for it in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[it[1] for it in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_556": {
                "seed": {
                    "value": "hparams.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "list(map(max_fn, descs_per_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_398": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_407": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "skips[-1].shape[-3:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[torch.cat([x, ops.pop(0)], dim=1)] if self.inj == Injection.OmniCat else [x]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_410": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_499": {
                "variable": {
                    "value": "tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[it[2] for it in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_504": {
                "dataset": {
                    "value": "self.ds_cls(self.hparams.ds_path, items=self.items[:self.split_idx], tf_as_pts=self.tf_as_pts, vol_sz=self.hparams.vol_sz, device=torch.device('cpu'))",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_520": {
                "dataset": {
                    "value": "self.ds_cls(self.hparams.ds_path, items=self.items[self.split_idx:], tf_as_pts=self.tf_as_pts, vol_sz=self.hparams.vol_sz, device=torch.device('cpu'))",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_108": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softplus_128": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_131": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.sf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "Conv1d(1, nf, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "*args": {
                    "value": "AdaptiveAvgPool1d(pool_sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "input": {
                    "value": "normals.permute(0, 2, 3, 4, 1).view(bs, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "light_pos.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_385": {
                "modules": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_422": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([it[1] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_440": {
                "input": {
                    "value": "targ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targ.to(pred.dtype).to(pred.device)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_479": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_142": {
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_190": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.path / orig_name)",
                            "Call"
                        ],
                        [
                            "x.to(self.dev)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "norm(x, tf)",
                            "Call"
                        ],
                        [
                            "norm(self.act(x))",
                            "Call"
                        ],
                        [
                            "norm(self.act(x), tf)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.first(x.view(-1, 2))",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "tf_desc(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=0.5)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, tf_desc.view(-1, self.tf_desc_sz, 1, 1, 1).expand(x.size(0), -1, 1, 1, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mid_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=skips[-1].shape[-3:])",
                            "Call"
                        ],
                        [
                            "layer(x, tf=tf_desc if self.inj == Injection.AdaIN else None)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([it[0] for it in batch], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.sf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_241": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "self.hparams.n_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_242": {
                "num_features": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "self.hparams.n_filters",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "Conv1d(nf, 2 * nf, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_253": {
                "output_size": {
                    "value": "pool_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Flatten_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_255": {
                "in_features": {
                    "value": "nf * pool_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_396": {
                "tensors": {
                    "value": "[x, ops.pop(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamW_481": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_220": {
                "num_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "desc_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_247": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "self.hparams.n_filters",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_248": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_392": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_desc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2 ** (-i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_400": {
                "tensors": {
                    "value": "[x, ops.pop(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_483": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_485": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_509": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_525": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_363": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "t.to(p.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_364": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "t.to(p.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}