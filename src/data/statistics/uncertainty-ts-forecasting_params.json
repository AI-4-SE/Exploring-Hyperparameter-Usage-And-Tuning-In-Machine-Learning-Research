{
    "test_bayesian_rnn.py": {
        "sklearn": {
            "StandardScaler_47": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "loss_fn_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_72": {
                "variable": {
                    "value": "scheduler_1",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model_1.parameters(), lr=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BBBLayers.py": {
        "torch": {
            "sum_52": {
                "variable": {
                    "value": "ll1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w ** 2 / (2 * var1) - logstd1 - math.log(math.sqrt(2 * math.pi))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "ll2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w ** 2 / (2 * var2) - logstd2 - math.log(math.sqrt(2 * math.pi))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_156": {
                "variable": {
                    "value": "self.weight_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.bias_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_359": {
                "variable": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "-(w - mean) ** 2 / (2 * var) - logstd - math.log(math.sqrt(2 * math.pi))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.weight_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.bias_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_189": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + Variable(eps) * std",
                            "BinOp"
                        ],
                        [
                            "h_post_means + Variable(eps) * std",
                            "BinOp"
                        ],
                        [
                            "self.sampled_weights[0]",
                            "Subscript"
                        ],
                        [
                            "self.weight_mean",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sampled_weights[1]",
                            "Subscript"
                        ],
                        [
                            "self.bias_mean",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_126": {
                "input": {
                    "value": "(sharp_w - w).pow(2) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "w_ih_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, layer_input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "w_hh_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "b_ih_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_230": {
                "variable": {
                    "value": "b_hh_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "w_ih_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, layer_input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "w_hh_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_236": {
                "variable": {
                    "value": "b_ih_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "b_hh_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "w_ih_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, layer_input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "w_hh_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "b_ih_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_270": {
                "variable": {
                    "value": "b_hh_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bayesian_rnn.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "input": {
                    "value": "y_batch[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "input": {
                    "value": "y_pred[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dropout_rnn.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_frac",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 1).squeeze(2)",
                            "Call"
                        ],
                        [
                            "predict_given_gt_sequence(x, model, num_samples)",
                            "Call"
                        ],
                        [
                            "predict_given_gt_sequence(x_new, model, num_samples)",
                            "Call"
                        ],
                        [
                            "np.zeros((x.shape[0], num_samples))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "x_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x).reshape(-1, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "y_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y).reshape(-1, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_212": {
                "variable": {
                    "value": "new_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.mean(axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "y_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(y_variance)",
                            "Call"
                        ],
                        [
                            "y_var ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.copy(), new_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "input": {
                    "value": "y_batch[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "input": {
                    "value": "y_pred[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ts_rnn.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_frac",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs, 1).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "x_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x).reshape(-1, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "y_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y).reshape(-1, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "input": {
                    "value": "y_batch[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "input": {
                    "value": "y_pred[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}