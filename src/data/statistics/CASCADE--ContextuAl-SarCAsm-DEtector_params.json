{
    "src/text_cnn.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.input_author",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_author",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.input_topic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_topic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_pool_flat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "word2vec_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "variable": {
                    "value": "self.user_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "user_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "user_W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "self.topic_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "topic_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "topic_W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "variable": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "self.user_embedding_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.user_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_author",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "variable": {
                    "value": "self.topic_embedding_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.topic_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_topic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([num_filters_total, 100])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "b_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[100])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_prime",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_68": {
                "variable": {
                    "value": "self.h_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([num_filters_total, 100]), name='C')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[100]), name='b_prime')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([300, 400])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "b_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[400], name='b_user')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "self.combined_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h_last, self.user_embedding_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "self.combined_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.combined_vectors, self.topic_embedding_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "self.final_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.combined_vectors, U, b_user)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "final_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.final_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "h_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[400, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_93": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[400, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_99": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_104": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_114": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_115": {
                "variable": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "confusion_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_25": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[400, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_51": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "last_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "user_embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_91": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[400, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_92": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "correct_preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "confusion_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[400]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "b_user",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_76": {
                "x": {
                    "value": "self.combined_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([300, 400]), name='U')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_user",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[400], name='b_user'))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_90": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_104": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_105": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_40": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_49": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train_cascade.py": {
        "tensorflow": {
            "ConfigProto_25": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "dev_sample_percentage",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Percentage of the training data to use for validation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "embedding_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3,4,5",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_43": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularization lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 200)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "checkpoint_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of checkpoints to store (default: 5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_198": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False, gpu_options=tf.GPUOptions(allow_growth=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_step_274": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_215": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_219": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "FLAGS.num_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_28": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "users/generate_user_personality.py": {
        "tensorflow": {
            "latest_checkpoint_69": {
                "variable": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_70": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "test_data_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./../data/train-balanced.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Data source",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Checkpoint directory from training run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "FLAGS.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_75": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_77": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "./my_model-1.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_78": {
                "checkpoint_dir": {
                    "value": "./",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "users/text_cnn.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_pool_flat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "word2vec_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_25": {
                "variable": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([num_filters_total, 100])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "b_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[100])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_prime",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_62": {
                "variable": {
                    "value": "self.h_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([num_filters_total, 100]), name='C')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[100]), name='b_prime')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "h_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_76": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[100, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_78": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_87": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_23": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[100, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_45": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "last_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[100, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_75": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_87": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_34": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_43": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "users/train_personality.py": {
        "tensorflow": {}
    }
}