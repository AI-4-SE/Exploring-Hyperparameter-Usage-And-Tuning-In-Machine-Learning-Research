[
    {
        "full_name": "sklearn.feature_selection.SelectorMixin",
        "name": "SelectorMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.ConvergenceWarning",
        "name": "ConvergenceWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.DataConversionWarning",
        "name": "DataConversionWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.DataDimensionalityWarning",
        "name": "DataDimensionalityWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.EfficiencyWarning",
        "name": "EfficiencyWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.FitFailedWarning",
        "name": "FitFailedWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.NotFittedError",
        "name": "NotFittedError",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.UndefinedMetricWarning",
        "name": "UndefinedMetricWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.feature_extraction.DictVectorizer",
        "name": "DictVectorizer",
        "params": {
            "dtype": "<class 'numpy.float64'>",
            "separator": "'='",
            "sparse": "True",
            "sort": "True"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.FeatureHasher",
        "name": "FeatureHasher",
        "params": {
            "n_features": "1048576",
            "input_type": "'dict'",
            "dtype": "<class 'numpy.float64'>",
            "alternate_sign": "True"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.PatchExtractor",
        "name": "PatchExtractor",
        "params": {
            "patch_size": "None",
            "max_patches": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.CountVectorizer",
        "name": "CountVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "analyzer": "'word'",
            "max_df": "1.0",
            "min_df": "1",
            "max_features": "None",
            "vocabulary": "None",
            "binary": "False",
            "dtype": "<class 'numpy.int64'>"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.HashingVectorizer",
        "name": "HashingVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "analyzer": "'word'",
            "n_features": "1048576",
            "binary": "False",
            "norm": "'l2'",
            "alternate_sign": "True",
            "dtype": "<class 'numpy.float64'>"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfTransformer",
        "name": "TfidfTransformer",
        "params": {
            "norm": "'l2'",
            "use_idf": "True",
            "smooth_idf": "True",
            "sublinear_tf": "False"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfVectorizer",
        "name": "TfidfVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "analyzer": "'word'",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "max_df": "1.0",
            "min_df": "1",
            "max_features": "None",
            "vocabulary": "None",
            "binary": "False",
            "dtype": "<class 'numpy.float64'>",
            "norm": "'l2'",
            "use_idf": "True",
            "smooth_idf": "True",
            "sublinear_tf": "False"
        }
    },
    {
        "full_name": "sklearn.feature_selection.GenericUnivariateSelect",
        "name": "GenericUnivariateSelect",
        "params": {
            "score_func": "<function f_classif>",
            "mode": "'percentile'",
            "param": "1e-05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectPercentile",
        "name": "SelectPercentile",
        "params": {
            "score_func": "<function f_classif>",
            "percentile": "10"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectKBest",
        "name": "SelectKBest",
        "params": {
            "score_func": "<function f_classif>",
            "k": "10"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFpr",
        "name": "SelectFpr",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFdr",
        "name": "SelectFdr",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFromModel",
        "name": "SelectFromModel",
        "params": {
            "estimator": null,
            "threshold": "None",
            "prefit": "False",
            "norm_order": "1",
            "max_features": "None",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFwe",
        "name": "SelectFwe",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SequentialFeatureSelector",
        "name": "SequentialFeatureSelector",
        "params": {
            "estimator": null,
            "n_features_to_select": "'warn'",
            "tol": "None",
            "direction": "'forward'",
            "scoring": "None",
            "cv": "5",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.feature_selection.RFE",
        "name": "RFE",
        "params": {
            "estimator": null,
            "n_features_to_select": "None",
            "step": "1",
            "verbose": "0",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.RFECV",
        "name": "RFECV",
        "params": {
            "estimator": null,
            "step": "1",
            "min_features_to_select": "1",
            "cv": "None",
            "scoring": "None",
            "verbose": "0",
            "n_jobs": "None",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.VarianceThreshold",
        "name": "VarianceThreshold",
        "params": {
            "threshold": "0.0"
        }
    },
    {
        "full_name": "sklearn.impute.SimpleImputer",
        "name": "SimpleImputer",
        "params": {
            "missing_values": "nan",
            "strategy": "'mean'",
            "fill_value": "None",
            "verbose": "'deprecated'",
            "copy": "True",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.impute.IterativeImputer",
        "name": "IterativeImputer",
        "params": {
            "estimator": "None",
            "missing_values": "nan",
            "sample_posterior": "False",
            "max_iter": "10",
            "tol": "0.001",
            "n_nearest_features": "None",
            "initial_strategy": "'mean'",
            "imputation_order": "'ascending'",
            "skip_complete": "False",
            "min_value": "- inf",
            "max_value": "inf",
            "verbose": "0",
            "random_state": "None",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.impute.MissingIndicator",
        "name": "MissingIndicator",
        "params": {
            "missing_values": "nan",
            "features": "'missing-only'",
            "sparse": "'auto'",
            "error_on_new": "True"
        }
    },
    {
        "full_name": "sklearn.impute.KNNImputer",
        "name": "KNNImputer",
        "params": {
            "missing_values": "nan",
            "n_neighbors": "5",
            "weights": "'uniform'",
            "metric": "'nan_euclidean'",
            "copy": "True",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.inspection.DecisionBoundaryDisplay",
        "name": "DecisionBoundaryDisplay",
        "params": {
            "xx0": null,
            "xx1": null,
            "response": null,
            "xlabel": "None",
            "ylabel": "None"
        }
    },
    {
        "full_name": "sklearn.inspection.PartialDependenceDisplay",
        "name": "PartialDependenceDisplay",
        "params": {
            "pd_results": null,
            "features": null,
            "feature_names": null,
            "target_idx": null,
            "deciles": null,
            "pdp_lim": "'deprecated'",
            "kind": "'average'",
            "subsample": "1000",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.AdditiveChi2Sampler",
        "name": "AdditiveChi2Sampler",
        "params": {
            "sample_steps": "2",
            "sample_interval": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.Nystroem",
        "name": "Nystroem",
        "params": {
            "kernel": "'rbf'",
            "gamma": "None",
            "coef0": "None",
            "degree": "None",
            "kernel_params": "None",
            "n_components": "100",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.PolynomialCountSketch",
        "name": "PolynomialCountSketch",
        "params": {
            "gamma": "1.0",
            "degree": "2",
            "coef0": "0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.RBFSampler",
        "name": "RBFSampler",
        "params": {
            "gamma": "1.0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.SkewedChi2Sampler",
        "name": "SkewedChi2Sampler",
        "params": {
            "skewedness": "1.0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.Isomap",
        "name": "Isomap",
        "params": {
            "n_neighbors": "5",
            "radius": "None",
            "n_components": "2",
            "eigen_solver": "'auto'",
            "tol": "0",
            "max_iter": "None",
            "path_method": "'auto'",
            "neighbors_algorithm": "'auto'",
            "n_jobs": "None",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.LocallyLinearEmbedding",
        "name": "LocallyLinearEmbedding",
        "params": {
            "n_neighbors": "5",
            "n_components": "2",
            "reg": "0.001",
            "eigen_solver": "'auto'",
            "tol": "1e-06",
            "max_iter": "100",
            "method": "'standard'",
            "hessian_tol": "0.0001",
            "modified_tol": "1e-12",
            "neighbors_algorithm": "'auto'",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.MDS",
        "name": "MDS",
        "params": {
            "n_components": "2",
            "metric": "True",
            "n_init": "4",
            "max_iter": "300",
            "verbose": "0",
            "eps": "0.001",
            "n_jobs": "None",
            "random_state": "None",
            "dissimilarity": "'euclidean'"
        }
    },
    {
        "full_name": "sklearn.manifold.SpectralEmbedding",
        "name": "SpectralEmbedding",
        "params": {
            "n_components": "2",
            "affinity": "'nearest_neighbors'",
            "gamma": "None",
            "random_state": "None",
            "eigen_solver": "None",
            "n_neighbors": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.TSNE",
        "name": "TSNE",
        "params": {
            "n_components": "2",
            "perplexity": "30.0",
            "early_exaggeration": "12.0",
            "learning_rate": "'warn'",
            "n_iter": "1000",
            "n_iter_without_progress": "300",
            "min_grad_norm": "1e-07",
            "metric": "'euclidean'",
            "metric_params": "None",
            "init": "'warn'",
            "verbose": "0",
            "random_state": "None",
            "method": "'barnes_hut'",
            "angle": "0.5",
            "n_jobs": "None",
            "square_distances": "'deprecated'"
        }
    },
    {
        "full_name": "sklearn.preprocessing.Binarizer",
        "name": "Binarizer",
        "params": {
            "threshold": "0.0",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.FunctionTransformer",
        "name": "FunctionTransformer",
        "params": {
            "func": "None",
            "inverse_func": "None",
            "validate": "False",
            "accept_sparse": "False",
            "check_inverse": "True",
            "feature_names_out": "None",
            "kw_args": "None",
            "inv_kw_args": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.KBinsDiscretizer",
        "name": "KBinsDiscretizer",
        "params": {
            "n_bins": "5",
            "encode": "'onehot'",
            "strategy": "'quantile'",
            "dtype": "None",
            "subsample": "'warn'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.KernelCenterer",
        "name": "KernelCenterer",
        "params": {}
    },
    {
        "full_name": "sklearn.preprocessing.LabelBinarizer",
        "name": "LabelBinarizer",
        "params": {
            "neg_label": "0",
            "pos_label": "1",
            "sparse_output": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.LabelEncoder",
        "name": "LabelEncoder",
        "params": {}
    },
    {
        "full_name": "sklearn.preprocessing.MultiLabelBinarizer",
        "name": "MultiLabelBinarizer",
        "params": {
            "classes": "None",
            "sparse_output": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.MaxAbsScaler",
        "name": "MaxAbsScaler",
        "params": {
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.MinMaxScaler",
        "name": "MinMaxScaler",
        "params": {
            "feature_range": "(0, 1)",
            "copy": "True",
            "clip": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.Normalizer",
        "name": "Normalizer",
        "params": {
            "norm": "'l2'",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.OneHotEncoder",
        "name": "OneHotEncoder",
        "params": {
            "categories": "'auto'",
            "drop": "None",
            "sparse": "True",
            "dtype": "<class 'numpy.float64'>",
            "handle_unknown": "'error'",
            "min_frequency": "None",
            "max_categories": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.OrdinalEncoder",
        "name": "OrdinalEncoder",
        "params": {
            "categories": "'auto'",
            "dtype": "<class 'numpy.float64'>",
            "handle_unknown": "'error'",
            "unknown_value": "None",
            "encoded_missing_value": "nan"
        }
    },
    {
        "full_name": "sklearn.preprocessing.PolynomialFeatures",
        "name": "PolynomialFeatures",
        "params": {
            "degree": "2",
            "interaction_only": "False",
            "include_bias": "True",
            "order": "'C'"
        }
    },
    {
        "full_name": "sklearn.preprocessing.PowerTransformer",
        "name": "PowerTransformer",
        "params": {
            "method": "'yeo-johnson'",
            "standardize": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.QuantileTransformer",
        "name": "QuantileTransformer",
        "params": {
            "n_quantiles": "1000",
            "output_distribution": "'uniform'",
            "ignore_implicit_zeros": "False",
            "subsample": "100000",
            "random_state": "None",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.RobustScaler",
        "name": "RobustScaler",
        "params": {
            "with_centering": "True",
            "with_scaling": "True",
            "quantile_range": "(25.0, 75.0)",
            "copy": "True",
            "unit_variance": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.SplineTransformer",
        "name": "SplineTransformer",
        "params": {
            "n_knots": "5",
            "degree": "3",
            "knots": "'uniform'",
            "extrapolation": "'constant'",
            "include_bias": "True",
            "order": "'C'"
        }
    },
    {
        "full_name": "sklearn.preprocessing.StandardScaler",
        "name": "StandardScaler",
        "params": {
            "copy": "True",
            "with_mean": "True",
            "with_std": "True"
        }
    },
    {
        "full_name": "sklearn.random_projection.GaussianRandomProjection",
        "name": "GaussianRandomProjection",
        "params": {
            "n_components": "'auto'",
            "eps": "0.1",
            "compute_inverse_components": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.random_projection.SparseRandomProjection",
        "name": "SparseRandomProjection",
        "params": {
            "n_components": "'auto'",
            "density": "'auto'",
            "eps": "0.1",
            "dense_output": "False",
            "compute_inverse_components": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.utils.Bunch",
        "name": "Bunch",
        "params": {
            "**kwargs": null
        }
    }
]