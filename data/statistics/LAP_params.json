{
    "utils.py": {
        "sklearn": {
            "NearestNeighbors_298": {
                "variable": {
                    "value": "nbrs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_242": {
                "n_components": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "conv2d_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0, :, :] if bw else np.moveaxis(x, 1, -1)",
                            "IfExp"
                        ],
                        [
                            "self.avgpool(functional.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.subsample(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "M.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv_transpose2d_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0, :, :] if bw else np.moveaxis(x, 1, -1)",
                            "IfExp"
                        ],
                        [
                            "self.avgpool(functional.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.subsample(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "M.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AvgPool2d_22": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "avgpool_resnet_classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "avgpool_resnet_classifier",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, filters, 7, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(filters, filters, 3, 2, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(filters, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(filters, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(filters, int_filters, 5, 2, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, int_filters, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(filters, int_filters, 5, 2, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(feature_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "nn.Linear(feature_size, nclasses * 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "nn.Linear(feature_size, nclasses * 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "feature_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "nclasses * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "nclasses * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_87": {
                "num_features": {
                    "value": "nclasses * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "int_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders.py": {
        "torch": {
            "DataLoader_8": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=datafolder, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/ILSVRC2012/ILSVRC2012_img_train', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/imagenet-downloader/imagenet-downloader-500-500-seed0', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/tinyimagenet/train', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FakeData(size=400, image_size=datashape[1:], num_classes=nclasses, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nworkers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=datafolder, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/ILSVRC2012/ILSVRC2012_img_train', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/imagenet-downloader/imagenet-downloader-500-500-seed0', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root='./data/tinyimagenet/train', transform=transforms.Compose(data_aug + transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FakeData(size=400, image_size=datashape[1:], num_classes=nclasses, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root='./data/tinyimagenet/val', transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FakeData(size=200, image_size=datashape[1:], num_classes=nclasses, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transforms.Compose(transform))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FakeData(size=200, image_size=datashape[1:], num_classes=nclasses, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_96": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300000",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ],
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_85": {
                "indices": {
                    "value": "np.random.choice(range(n), int(size * n), False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "MSELoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_443": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_444": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learningrate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningrate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weightdecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weightdecay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_445": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=learningrate, momentum=0.9, weight_decay=weightdecay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 225, 250]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_528": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[FirstResBlock(nfilters, batchnorm, bias, timestep) if i == 0 and first else ResBlock(nfilters, batchnorm, bias, timestep) for i in range(nblocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nfilters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * nfilters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * nfilters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * nfilters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_126": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "featuresize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders(dataset, batchsize, trainsize, valsize, testsize)",
                            "Call"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_155": {
                "variable": {
                    "value": "self.avgpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_157": {
                "variable": {
                    "value": "self.avgpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_159": {
                "variable": {
                    "value": "self.avgpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_161": {
                "variable": {
                    "value": "self.avgpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "featuresize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders(dataset, batchsize, trainsize, valsize, testsize)",
                            "Call"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.cv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "datashape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "variable": {
                    "value": "self.cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_196": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "featuresize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders(dataset, batchsize, trainsize, valsize, testsize)",
                            "Call"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "infilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "self.cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.cv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.intfilters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outfilters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.outfilters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_232": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.cv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_233": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.cv2(r))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_234": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.cv3(r))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_251": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[block(i) for i in range(nb)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AvgPool2d_267": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "featuresize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders(dataset, batchsize, trainsize, valsize, testsize)",
                            "Call"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_297": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7 if datashape[-1] == 224 else 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "featuresize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.forward_conv(torch.zeros(*datashape))[0].view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders(dataset, batchsize, trainsize, valsize, testsize)",
                            "Call"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ],
                        [
                            "nclasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_434": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getmodel(datashape, modelname, nclasses, learnencoder, encoder, nfilters, batchnorm, bias, timestep, classifier, nblocks, relu, residu)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "nfilters",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_238": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_407": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_457": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'weights.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "encoder_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.getcwd(), 'autoencoders', encoder_pre + '-weights', encoder_pre + name)",
                            "Call"
                        ],
                        [
                            "pretrained_ae_files(dataset, filters, ds, bn, 0, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_25": {
                "f": {
                    "value": "decoder_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.getcwd(), 'autoencoders', decoder_pre + '-weights', decoder_pre + name)",
                            "Call"
                        ],
                        [
                            "pretrained_ae_files(dataset, filters, ds, bn, 0, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool4(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.cv0(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool4(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.cv0(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool4(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.cv0(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.cv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.cv2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "*args": {
                    "value": "nn.Conv2d(inf, intf, 1, stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pln * exp",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "intf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pln * exp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__358": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_103": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_352": {
                "input": {
                    "value": "torch.abs(r) ** pnorm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_391": {
                "input": {
                    "value": "r ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_352": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn1(self.cv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn2(self.cv2(r)), inplace=True)",
                            "Call"
                        ],
                        [
                            "functional.relu(self.bn3(self.cv3(r)), inplace=True)",
                            "Call"
                        ],
                        [
                            "z - x",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "*size": {
                    "value": "*datashape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}