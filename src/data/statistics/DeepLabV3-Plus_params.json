{
    "config/camvid_resnet50.py": {
        "tensorflow": {
            "OneDeviceStrategy_29": {
                "device": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "config/human_parsing_resnet50.py": {
        "tensorflow": {
            "OneDeviceStrategy_45": {
                "device": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/datasets/augmentations.py": {
        "tensorflow": {
            "cast_12": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform([], maxval=2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_17": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32, seed=self.configs['seed']), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_25": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform([], maxval=2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_30": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32, seed=self.configs['seed']), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform([], maxval=2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_44": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32, seed=self.configs['seed']), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_flip_left_right_54": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.configs['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "(image, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.configs['image_channels'], self.configs['label_channels']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_flip_up_down_65": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.configs['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_68": {
                "variable": {
                    "value": "(image, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.configs['image_channels'], self.configs['label_channels']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.configs['image_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "resize_76": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(mask, self.configs['image_size'], method='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.configs['image_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "method": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform([], maxval=2, dtype=tf.int32, seed=self.configs['seed'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[0] * self.configs['crop_percent']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[1] * self.configs['crop_percent']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_90": {
                "variable": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.random.uniform([], maxval=2, dtype=tf.int32, seed=self.configs['seed']), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(combined_tensor)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "(image, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self.configs['image_channels'], self.configs['label_channels']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_function_130": {
                "func": {
                    "value": "compose",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.uint8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_function_148": {
                "func": {
                    "value": "compose",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.uint8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_13": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_26": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_40": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_81": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.configs['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_18": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "self.configs['random_brightness_max_delta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_20": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_contrast_31": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "self.configs['random_contrast_lower_bound']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "self.configs['random_contrast_upper_bound']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_34": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_saturation_45": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "self.configs['random_contrast_lower_bound']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "self.configs['random_contrast_upper_bound']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_48": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(condition, lambda : tf.image.random_brightness(image, self.configs['random_brightness_max_delta']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_contrast(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_saturation(image, self.configs['random_contrast_lower_bound'], self.configs['random_contrast_upper_bound']), lambda : tf.identity(image))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.configs['image_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_91": {
                "value": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w, self.configs['image_channels'] + self.configs['label_channels']]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.configs['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_95": {
                "input": {
                    "value": "combined_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(combined_tensor, seed=self.configs['seed'])",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cond(condition, lambda : tf.image.random_crop(combined_tensor, [h, w, self.configs['image_channels'] + self.configs['label_channels']], seed=self.configs['seed']), lambda : tf.identity(combined_tensor))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deeplabv3plus/datasets/dataloader.py": {
        "tensorflow": {
            "read_file_19": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_21": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_23": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.configs['height'], self.configs['width']]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_31": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_33": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.configs['height'], self.configs['width']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']], method='nearest')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=[self.configs['height'], self.configs['width']])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "self.read_img(image_list)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/inference.py": {
        "tensorflow": {
            "read_file_6": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "resize_13": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_model_19": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_8": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_11": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_14": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image_file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(images=image, size=image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/model/backbones.py": {
        "tensorflow": {}
    },
    "deeplabv3plus/model/blocks.py": {
        "tensorflow": {
            "Conv2D_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "conv_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNormalization_39": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_71": {
                "variable": {
                    "value": "dummy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AveragePooling2D_74": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(input_shape[-3], input_shape[-2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling2D_85": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_shape[-3] // dummy_tensor.shape[1], input_shape[-2] // dummy_tensor.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "interpolation": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_103": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "he_normal_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/model/deeplabv3_plus.py": {
        "tensorflow": {
            "Input_59": {
                "variable": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2D_91": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_66": {
                "inputs": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone_model.get_layer(BACKBONES[self.backbone][feature]).output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "UpSampling2D_47": {
                "size": {
                    "value": "(input_shape[1] // factor // fan_in_shape[1], input_shape[2] // factor // fan_in_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "interpolation": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_104": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "he_normal_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/train.py": {
        "tensorflow": {
            "TensorBoard_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModelCheckpoint_171": {
                "filepath": {
                    "value": "self._get_checkpoint_filename_format()",
                    "type": "Call",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_61": {
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deeplabv3plus/utils.py": {
        "tensorflow": {
            "array_to_img_31": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.image.array_to_img(image)",
                            "Call"
                        ],
                        [
                            "np.array(image).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "array_to_img_11": {
                "x": {
                    "value": "display_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "tensorflow": {}
    }
}