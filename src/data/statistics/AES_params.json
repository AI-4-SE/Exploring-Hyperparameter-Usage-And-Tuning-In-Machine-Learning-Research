{
    "BERT_text_representation.py": {
        "sklearn": {
            "OneHotEncoder_34": {
                "variable": {
                    "value": "onehot_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataUtils_mult.py": {
        "sklearn": {
            "OneHotEncoder_160": {
                "variable": {
                    "value": "onehot_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_166": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "datautilsbca.py": {
        "sklearn": {
            "OneHotEncoder_112": {
                "variable": {
                    "value": "onehot_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "attention.py": {
        "tensorflow": {
            "Variable_61": {
                "variable": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "b_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.reshape(inputs, [-1, hidden_size]), W_omega) + tf.expand_dims(b_omega, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(tf.reshape(inputs, [-1, hidden_size]), W_omega) + tf.expand_dims(b_omega, 0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(u_omega, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(inputs)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_74": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "inputs.shape[1].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_75": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-30.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(vu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_77": {
                "variable": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(seq_len, inputs.shape[1].value)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(seq_len, inputs.shape[1].value)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(vu)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(vu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(-30.0, tf.ones_like(vu))",
                            "Call"
                        ],
                        [
                            "tf.multiply(-30.0, tf.ones_like(vu))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(vu, attn_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs * tf.expand_dims(alphas, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([batch_size, inputs.shape[1].value], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sequence_mask_115": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "inputs.shape[1].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_116": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-30.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(vu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_118": {
                "variable": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(seq_len, inputs.shape[1].value)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(seq_len, inputs.shape[1].value)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(vu)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(vu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(-30.0, tf.ones_like(vu))",
                            "Call"
                        ],
                        [
                            "tf.multiply(-30.0, tf.ones_like(vu))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.add(vu, attn_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs * tf.expand_dims(alphas, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([attention_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_78": {
                "x": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, x=attn_mask_z, y=attn_mask)",
                            "Call"
                        ],
                        [
                            "tf.where(mask, x=attn_mask_z, y=attn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_112": {
                "shape": {
                    "value": "[batch_size, inputs.shape[1].value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_119": {
                "x": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.expand_dims(u_omega, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(vu, tf.shape(inputs)[:2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([batch_size, inputs.shape[1].value], tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, x=attn_mask_z, y=attn_mask)",
                            "Call"
                        ],
                        [
                            "tf.where(mask, x=attn_mask_z, y=attn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "tf.reshape(inputs, [-1, hidden_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_size, attention_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "b_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([attention_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(vu, attn_pad))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.add(vu, attn_pad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.add(vu, attn_pad))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.add(vu, attn_pad))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "bca_.py": {
        "tensorflow": {
            "concat_54": {
                "variable": {
                    "value": "batch_next",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batch_att_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "batch_last",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batch_att_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_next, batch_last, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(inputs, [-1, hidden_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(inputs, [-1, hidden_size]), W_omega)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, u_omega)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vu)",
                            "Call"
                        ],
                        [
                            "tf.add(vu, attn_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_72": {
                "variable": {
                    "value": "seq_len_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[inputs.shape[1].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_73": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "seq_len_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile([seq_len], [inputs.shape[1].value])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "inputs.shape[1].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_74": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-30.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(vu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, u_omega)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vu)",
                            "Call"
                        ],
                        [
                            "tf.add(vu, attn_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_76": {
                "variable": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(seq_len_t, inputs.shape[1].value)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "attn_mask_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(vu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(-30.0, tf.ones_like(vu))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_82": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, u_omega)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vu)",
                            "Call"
                        ],
                        [
                            "tf.add(vu, attn_pad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attn_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, x=attn_mask_z, y=attn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, u_omega)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vu)",
                            "Call"
                        ],
                        [
                            "tf.add(vu, attn_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(inp_t * tf.expand_dims(alphas, -1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_20": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "seq_len_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_len[i * seq_len_d:(i + 1) * seq_len_d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "pad_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros_like(inp[0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pad_, inp, pad_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "seq_len_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], seq_len_batch, [0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "inp_last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[k - 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "inp_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[k + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "inp_current",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inp[k, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, u_omega)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vu)",
                            "Call"
                        ],
                        [
                            "tf.add(vu, attn_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "inp_t * tf.expand_dims(alphas, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_89": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.array_ops.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_40": {
                "input": {
                    "value": "inp[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(vu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ordloss.py": {
        "tensorflow": {
            "sigmoid_12": {
                "variable": {
                    "value": "s_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_13": {
                "variable": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_15": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.argmax(y_true, 1), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_17": {
                "variable": {
                    "value": "y_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "cat_idx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, tf.shape(y_p)[0]), y_t_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_20": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cat_idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t_1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t_1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_22": {
                "variable": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, tf.shape(y_p)[0]), y_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_23": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_24": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.subtract(result, result_1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1e-25])",
                            "Call"
                        ],
                        [
                            "np.array([1e-25])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.negative(tf.log(r))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "s_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_36": {
                "variable": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_39": {
                "variable": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_p[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_p[:, :r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_41": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(y_p[:, 1:], y_p[:, :r])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "s_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_55": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.argmax(y_true, 1), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "y_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true_l",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "cat_idx_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, tf.shape(y_p)[0]), y_t_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_60": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cat_idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t_1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t_1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, tf.shape(y_p)[0]), y_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_63": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(0, tf.shape(y_p)[0]), y_t], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_64": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.subtract(result, result_1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1e-25])",
                            "Call"
                        ],
                        [
                            "np.array([1e-25])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.negative(tf.log(r))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_15": {
                "x": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_17": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_24": {
                "x": {
                    "value": "tf.subtract(result, result_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "negative_26": {
                "x": {
                    "value": "tf.log(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_64": {
                "x": {
                    "value": "tf.subtract(result, result_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "negative_66": {
                "x": {
                    "value": "tf.log(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_13": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_15": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_24": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(y_p, cat_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(y_p, cat_idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(y_p, cat_idx_1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(y_p, cat_idx_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_26": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.maximum(tf.subtract(result, result_1), 0.0), eps)",
                            "Call"
                        ],
                        [
                            "tf.shape(y_p)[1] - 1",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.maximum(tf.subtract(result, result_1), 0.0), eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_36": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_53": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_64": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(y_p, cat_idx)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(y_p, cat_idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(y_p, cat_idx_1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(y_p, cat_idx_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_66": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.maximum(tf.subtract(result, result_1), 0.0), eps)",
                            "Call"
                        ],
                        [
                            "tf.shape(y_p)[1] - 1",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.maximum(tf.subtract(result, result_1), 0.0), eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_19": {
                "input": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_22": {
                "input": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_59": {
                "input": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_62": {
                "input": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.constant(0.0, shape=[batch_size, 1]), s_max, tf.constant(1.0, shape=[batch_size, 1])], 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}