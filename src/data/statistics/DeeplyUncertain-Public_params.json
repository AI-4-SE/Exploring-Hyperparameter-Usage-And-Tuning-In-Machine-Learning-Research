{
    "preprocessing.py": {
        "sklearn": {
            "MinMaxScaler_5": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_val + gap, max_val - gap)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train_network.py": {
        "sklearn": {
            "train_test_split_32": {
                "variable": {
                    "value": "(x_train, x_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_proportion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/cd.py": {
        "tensorflow": {
            "exp_125": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Input_131": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concatenate_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[mean, log_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_147": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(n_features,))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concatenate([mean, log_var])",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_54": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_79": {
                "variable": {
                    "value": "unif_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "drop_prob / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.p_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel_regularizer + dropout_regularizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "(true - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "precision * (true - mean) ** 2.0 + log_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "x": {
                    "value": "1.0 - unif_noise + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_133": {
                "units": {
                    "value": "n_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_136": {
                "units": {
                    "value": "n_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_139": {
                "units": {
                    "value": "n_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_142": {
                "units": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.shape[1] // 2",
                            "BinOp"
                        ],
                        [
                            "pred.shape[1] // 2",
                            "BinOp"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_144": {
                "units": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.shape[1] // 2",
                            "BinOp"
                        ],
                        [
                            "pred.shape[1] // 2",
                            "BinOp"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_63": {
                "minval": {
                    "value": "self.init_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.init_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "ConcreteDropout(Dense(n_nodes, activation='relu'), weight_regularizer=wd, dropout_regularizer=dropout_reg)(x)",
                            "Call"
                        ],
                        [
                            "ConcreteDropout(Dense(n_nodes, activation='relu'), weight_regularizer=wd, dropout_regularizer=dropout_reg)(x)",
                            "Call"
                        ],
                        [
                            "ConcreteDropout(Dense(n_nodes, activation='relu'), weight_regularizer=wd, dropout_regularizer=dropout_reg)(x)",
                            "Call"
                        ],
                        [
                            "x / retain_prob",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_83": {
                "x": {
                    "value": "unif_noise + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.square(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_101": {
                "x": {
                    "value": "1.0 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_81": {
                "x": {
                    "value": "p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_82": {
                "x": {
                    "value": "1.0 - p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer.kernel",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/mlp_tf.py": {
        "tensorflow": {
            "convert_to_tensor_56": {
                "variable": {
                    "value": "sigma_p",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(p.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_57": {
                "variable": {
                    "value": "sigma_q",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(q.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "tf.math.sqrt(gamma_sq / scale_pp) + tf.math.sqrt(gamma_sq / scale_qq) - 2 * tf.math.sqrt(gamma_sq / scale_cr) * tf.math.exp(-0.5 * tf.math.squared_difference(p.loc, q.loc) / scale_cr)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-i - 1 for i in range(0, num_reduce_dims)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "-y_pred.log_prob(tf.cast(y_true, tf.float32))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_56": {
                "x": {
                    "value": "p.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "q.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "x": {
                    "value": "gamma_sq / scale_qq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_64": {
                "x": {
                    "value": "-0.5 * tf.math.squared_difference(p.loc, q.loc) / scale_cr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_74": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "x": {
                    "value": "gamma_sq / scale_cr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squared_difference_65": {
                "x": {
                    "value": "p.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "q.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_117": {
                "features": {
                    "value": "t[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_92": {
                "features": {
                    "value": "t[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}