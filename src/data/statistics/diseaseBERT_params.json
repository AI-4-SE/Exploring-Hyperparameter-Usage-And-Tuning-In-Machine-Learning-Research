{
    "BC5CDR/run_model_sep.py": {
        "sklearn": {},
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_174": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_180": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 30, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 359, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SequentialSampler_361": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_362": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 30, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 359, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_138": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 30, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 359, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__257": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BC5CDR/utils.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MEDIQA-2019/run_model_sep.py": {
        "sklearn": {},
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_164": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_170": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs-test/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 213, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "MSELoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_322": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs-test/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 213, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_334": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_400": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs-test/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 213, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_402": {
                "obj": {
                    "value": "regressionLayerMedIQA.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_426": {
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__241": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__245": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "towerModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "MEDIQA-2019/utils.py": {
        "sklearn": {}
    },
    "MEDNLI/run_model_sep.py": {
        "sklearn": {},
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_178": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_184": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 1, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 702, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_200": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_334": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_335": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 1, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 702, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_345": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 1, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 702, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_410": {
                "obj": {
                    "value": "classificationlLayerMedNLI.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_429": {
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__252": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__256": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "towerModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "MEDNLI/utils.py": {
        "sklearn": {}
    },
    "NCBI/run_model_sep.py": {
        "sklearn": {},
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_174": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_180": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 220, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SequentialSampler_361": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_362": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 220, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_138": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 16, 'eval_batch_size': 16, 'gradient_accumulation_steps': 2, 'num_train_epochs': 10, 'weight_decay': 0, 'learning_rate': 5e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 220, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__257": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "NCBI/utils.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TRECQA-2017/run_model_sep.py": {
        "sklearn": {},
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_165": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_171": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 247, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "MSELoss_188": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(EVAL_TASK, tokenizer, mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 247, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_335": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_401": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'regression', 'output_dir': 'outputs/', 'cache_dir': 'cache/', 'do_train': False, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'regression', 'train_batch_size': 8, 'eval_batch_size': 8, 'gradient_accumulation_steps': 2, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 247, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "regressionLayerMedIQA.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_427": {
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__242": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__246": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "towerModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tower_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir + 'tower.dict'",
                            "BinOp"
                        ],
                        [
                            "args['output_dir'] + 'checkpoint-outputstower.dict'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(args['output_dir'], 'checkpoint-{}'.format(global_step)) + 'tower.dict'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "TRECQA-2017/utils.py": {
        "sklearn": {}
    },
    "diseaseKnowledgeInfusionTraining/utils_pretrain.py": {
        "sklearn": {}
    },
    "diseaseKnowledgeInfusionTraining/disease_knowledge_infusion_training.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "all_diseaseName_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.diseaseName_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_163": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_174": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode='pretrain')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(task, tokenizer, mode='pretrain')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs_pretrain/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 12, 'eval_batch_size': 12, 'gradient_accumulation_steps': 1, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 1219, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_126": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "save_352": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data_dir': 'data/', 'model_type': 'bert', 'model_name': 'bert-base-uncased', 'task_name': 'binary', 'output_dir': 'outputs_pretrain/', 'cache_dir': 'cache/', 'do_train': True, 'do_eval': True, 'fp16': False, 'fp16_opt_level': 'O1', 'max_seq_length': 128, 'output_mode': 'classification', 'train_batch_size': 12, 'eval_batch_size': 12, 'gradient_accumulation_steps': 1, 'num_train_epochs': 20, 'weight_decay': 0, 'learning_rate': 1e-05, 'adam_epsilon': 1e-08, 'warmup_ratio': 0, 'warmup_steps': 0, 'max_grad_norm': 1.0, 'logging_steps': 50, 'evaluate_during_training': False, 'save_steps': 1219, 'eval_all_checkpoints': True, 'overwrite_output_dir': False, 'reprocess_input_data': True, 'notes': 'Using Yelp Reviews dataset'}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args['output_dir'], 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args['max_seq_length'], tokenizer, output_mode, cls_token_at_end=bool(args['model_type'] in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args['model_type'] in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args['model_type'] in ['roberta']), pad_on_left=bool(args['model_type'] in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args['model_type'] in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], f\"cached_{mode}_{args['model_name']}_{args['max_seq_length']}_{task}\")",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "logits_score_total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "logits_score",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__302": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__306": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}