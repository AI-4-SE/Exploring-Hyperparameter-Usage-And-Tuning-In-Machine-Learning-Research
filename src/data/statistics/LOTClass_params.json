{
    "src/model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_16": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer.py": {
        "torch": {
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "self.mcp_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_56": {
                "variable": {
                    "value": "self.st_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_226": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(data_dict['input_ids'], data_dict['attention_masks'], data_dict['labels'])",
                            "Call"
                        ],
                        [
                            "TensorDataset(data_dict['input_ids'], data_dict['attention_masks'])",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "self.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(data_dict['input_ids'], data_dict['attention_masks'], data_dict['labels'])",
                            "Call"
                        ],
                        [
                            "TensorDataset(data_dict['input_ids'], data_dict['attention_masks'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, num_replicas=self.world_size, rank=rank)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(input_ids) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(input_mask) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(preds) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_624": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.test_data['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_625": {
                "variable": {
                    "value": "test_dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(self.test_data['input_ids'], self.test_data['attention_masks'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "SequentialSampler(test_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[0] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "attention_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[1] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "label_name_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_name_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([result[2] for result in results])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label_name_idx, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.ones(0, self.max_len, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "input_ids_with_label_name",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_192": {
                "variable": {
                    "value": "attention_masks_with_label_name",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "label_name_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_223": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data_dict['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_225": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data_dict['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_290": {
                "variable": {
                    "value": "self.category_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_347": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([res['all_input_ids'] for res in gather_res], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "all_mask_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_mask_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_mask_label, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([res['all_mask_label'] for res in gather_res], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([res['all_input_mask'] for res in gather_res], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_366": {
                "variable": {
                    "value": "self.mcp_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_378": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res['all_input_ids'] for res in gather_res]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "all_mask_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res['all_mask_label'] for res in gather_res]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res['all_input_mask'] for res in gather_res]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "select_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(idx, len(self.train_data['input_ids'])), torch.arange(idx + target_num - len(self.train_data['input_ids'])))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_463": {
                "variable": {
                    "value": "select_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "idx + len(wordpcs)",
                            "BinOp"
                        ],
                        [
                            "(idx + len(select_idx)) % len(self.train_data['input_ids'])",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "idx + target_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_517": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[total_train_loss / len(wrap_train_dataset_loader) * self.accum_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_520": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(avg_train_loss) for _ in range(self.world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.ones_like(avg_train_loss) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "randperm_562": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.train_data['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(label.strip()) for label in truth.readlines()]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ],
                        [
                            "batch[2].to(rank)",
                            "Call"
                        ],
                        [
                            "labels[mask_pos]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_121": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(loader_file)",
                            "Call"
                        ],
                        [
                            "{'input_ids': input_ids, 'attention_masks': attention_masks, 'labels': labels}",
                            "Dict"
                        ],
                        [
                            "{'input_ids': input_ids, 'attention_masks': attention_masks}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_126": {
                "variable": {
                    "value": "label_name_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "input_ids_with_label_name",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[0] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "attention_masks_with_label_name",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[1] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "label_name_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[2] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_281": {
                "obj": {
                    "value": "category_words_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{i: defaultdict(float) for i in range(self.num_class)}",
                            "DictComp"
                        ],
                        [
                            "gather_res",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.temp_dir, f'{rank}_' + loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.temp_dir, f'{rank}_' + loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_307": {
                "obj": {
                    "value": "self.category_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_357": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'all_input_ids': all_input_ids, 'all_mask_label': all_mask_label, 'all_input_mask': all_input_mask, 'category_doc_num': category_doc_num}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.temp_dir, f'{rank}_' + loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.temp_dir, f'{rank}_' + loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_388": {
                "obj": {
                    "value": "self.mcp_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[total_train_loss / len(mcp_dataset_loader) * self.accum_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(avg_train_loss) for _ in range(self.world_size)]",
                            "ListComp"
                        ],
                        [
                            "[torch.ones_like(avg_train_loss) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_454": {
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_470": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenizer.encode(doc, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "encoded_dict['input_ids']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([result[0] for result in results])",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "torch.cat(gather_input_ids, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_471": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[1].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[1].to(rank)",
                            "Call"
                        ],
                        [
                            "torch.cat(gather_input_mask, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "batch[1].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[1].to(rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_472": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.LogSoftmax(dim=-1)(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_479": {
                "input": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gather_preds, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gather_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(acc) for _ in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_516": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_554": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_601": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([res['all_input_ids'] for res in gather_res], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_602": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([res['all_input_mask'] for res in gather_res], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_603": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gather_preds, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_622": {
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "label_name_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(loader_file)",
                            "Call"
                        ],
                        [
                            "{'input_ids': input_ids_with_label_name, 'attention_masks': attention_masks_with_label_name, 'labels': label_name_idx}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_275": {
                "variable": {
                    "value": "(_, sorted_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[match_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "top_pred_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_332": {
                "variable": {
                    "value": "(_, sorted_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, pred_mode='mlm', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "model(input_ids, pred_mode='mlm', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_pred_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_441": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, label_name_loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dataset_dir, loader_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_518": {
                "input": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([total_train_loss / len(mcp_dataset_loader) * self.accum_steps]).to(rank)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gather_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor([total_train_loss / len(wrap_train_dataset_loader) * self.accum_steps]).to(rank)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gather_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_606": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "self.inference(self.model, test_dataset_loader, 0, return_type='pred')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "truth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "truth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(truth_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SequentialSampler_625": {
                "data_source": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(self.test_data['input_ids'], self.test_data['attention_masks'])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "variable": {
                    "value": "match_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_res",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_337": {
                "variable": {
                    "value": "match_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_idx.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_434": {
                "input": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([total_train_loss / len(mcp_dataset_loader) * self.accum_steps]).to(rank)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gather_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor([total_train_loss / len(wrap_train_dataset_loader) * self.accum_steps]).to(rank)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gather_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_460": {
                "start": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "idx + len(wordpcs)",
                            "BinOp"
                        ],
                        [
                            "(idx + len(select_idx)) % len(self.train_data['input_ids'])",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "len(self.train_data['input_ids'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_461": {
                "start": {
                    "value": "idx + target_num - len(self.train_data['input_ids'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_480": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_preds ** 2 / torch.sum(all_preds, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_502": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__508": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_514": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, test_dataset_loader, rank, return_type='acc')",
                            "Call"
                        ],
                        [
                            "torch.tensor(gather_acc).mean().item()",
                            "Call"
                        ],
                        [
                            "(pred_labels == truth_labels).float().sum() / samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "self.inference(self.model, test_dataset_loader, 0, return_type='pred')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_299": {
                "f": {
                    "value": "os.path.join(self.temp_dir, f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_376": {
                "f": {
                    "value": "os.path.join(self.temp_dir, f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__429": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_339": {
                "input": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(match_count > match_threshold) & (input_mask > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_341": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenizer.encode(doc, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "encoded_dict['input_ids']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([result[0] for result in results])",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "torch.cat(gather_input_ids, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ],
                        [
                            "batch[0].to(rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_593": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_596": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[mask_pos]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_599": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[mask_pos]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids, pred_mode='classification', token_type_ids=None, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "logits[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}