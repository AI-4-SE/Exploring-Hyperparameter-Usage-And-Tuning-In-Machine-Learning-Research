{
    "LaU-reg/encoding/datasets/ade20k.py": {
        "torch": {
            "from_numpy_57": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(mask).astype('int64') - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/datasets/base.py": {
        "torch": {
            "from_numpy_103": {
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/datasets/cityscapes.py": {
        "torch": {
            "load_50": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(mask_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "mask_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._class_to_index(np.array(mask).astype('int32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/datasets/coco.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "ids_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(root, 'annotations/train_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(root, 'annotations/val_ids.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "new_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "ids_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(root, 'annotations/train_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(root, 'annotations/val_ids.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/datasets/pascal_voc.py": {
        "torch": {
            "from_numpy_77": {
                "ndarray": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Image.open(self.masks[index])",
                            "Call"
                        ],
                        [
                            "self._mask_transform(target)",
                            "Call"
                        ],
                        [
                            "self.target_transform(target)",
                            "Call"
                        ],
                        [
                            "np.array(mask).astype('int32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/datasets/pcontext.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, self.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, self.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(mask).astype('int32') - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/dilated/resnet.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "previous_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "previous_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_154": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_174": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "get_model_file('resnet50', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_276": {
                "f": {
                    "value": "get_model_file('resnet101', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_290": {
                "f": {
                    "value": "get_model_file('resnet152', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/functions/encoding.py": {
        "torch": {}
    },
    "LaU-reg/encoding/functions/syncbn.py": {
        "torch": {}
    },
    "LaU-reg/encoding/lib/__init__.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "enclib_cpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "[os.path.join(cpu_path, 'operator.cpp'), os.path.join(cpu_path, 'encoding_cpu.cpp'), os.path.join(cpu_path, 'syncbn_cpu.cpp')]",
                    "type": "List",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "cpu_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cwd, 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "enclib_gpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "[os.path.join(gpu_path, 'operator.cpp'), os.path.join(gpu_path, 'encoding_kernel.cu'), os.path.join(gpu_path, 'syncbn_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "gpu_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cwd, 'gpu')",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/lib/cpu/setup.py": {
        "torch": {}
    },
    "LaU-reg/encoding/lib/gpu/setup.py": {
        "torch": {}
    },
    "LaU-reg/encoding/models/base.py": {
        "torch": {
            "upsample_189": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_200": {
                "variable": {
                    "value": "img_pad[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padw, 0, padh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_values[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "-np.array(mean) / np.array(std)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_210": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "img.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_of_209": {
                "obj": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_of_120": {
                "obj": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_of_152": {
                "obj": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/models/deeplabv3.py": {
        "torch": {
            "Sequential_81": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=atrous_rate, dilation=atrous_rate, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inter_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(0.1, False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.b0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * out_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat0, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, imsize, **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, (h, w), **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "auxout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(auxout, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "atrous_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "atrous_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_101": {
                "input": {
                    "value": "pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gap(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, imsize, **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, (h, w), **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_71": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "5 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 8",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_121": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/models/encnet.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(0.1, False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "auxout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.auxlayer(features[2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(auxout, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.selayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.connect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(in_channels[0], 512, kernel_size=1, bias=False), norm_layer(512), nn.ReLU(inplace=True)), nn.Sequential(nn.Conv2d(in_channels[1], 512, kernel_size=1, bias=False), norm_layer(512), nn.ReLU(inplace=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu__98": {
                "input": {
                    "value": "x + x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "nn.Conv2d(in_channels[-1], 512, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "nn.Conv2d(in_channels[-1], 512, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_134": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_181": {
                "f": {
                    "value": "get_model_file('encnet_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "in_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "3 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[feat, c2, c3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/models/fcn.py": {
        "torch": {
            "upsample_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.head(c4)",
                            "Call"
                        ],
                        [
                            "upsample(x, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_56": {
                "variable": {
                    "value": "auxout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "upsample(auxout, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "get_model_file('fcn_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/models/lau.py": {
        "torch": {
            "index_select_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th_flatten(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "coords[:, 0] * input.size(1) + coords[:, 1]",
                            "BinOp"
                        ],
                        [
                            "indices[:, 0] * input.size(1) * input.size(2) + indices[:, 1] * input.size(2) + indices[:, 2]",
                            "BinOp"
                        ],
                        [
                            "indices[:, 0] * input.size(1) * input.size(2) + indices[:, 1] * input.size(2) + indices[:, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(coords, 0, input_size - 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.clamp(coords.narrow(2, 0, 1), 0, input_height - 1), torch.clamp(coords.narrow(2, 1, 1), 0, input_width - 1)), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.clamp(coords.narrow(2, 0, 1), 0, input_height - 1), torch.clamp(coords.narrow(2, 1, 1), 0, input_width - 1)), 2)",
                            "Call"
                        ],
                        [
                            "offsets + grid",
                            "BinOp"
                        ],
                        [
                            "offsets + grid.to(offsets.device).div(k)",
                            "BinOp"
                        ],
                        [
                            "grid.to(input.device).div(k)",
                            "Call"
                        ],
                        [
                            "grid.to(input.device).div(k)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "input_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_lt[:, 0], coords_rb[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_rb[:, 0], coords_lt[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.clamp(coords.narrow(2, 0, 1), 0, input_height - 1), torch.clamp(coords.narrow(2, 1, 1), 0, input_width - 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_rb[..., 0], coords_lt[..., 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_lt[..., 0], coords_rb[..., 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ne_121": {
                "variable": {
                    "value": "lt_rb_h_ne",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_lt[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "coords_rb[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ne_122": {
                "variable": {
                    "value": "lt_rb_w_ne",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_lt[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "coords_rb[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.clamp(coords.narrow(2, 0, 1), 0, input_height - 1), torch.clamp(coords.narrow(2, 1, 1), 0, input_width - 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_rb[..., 0], coords_lt[..., 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_lt[..., 0], coords_rb[..., 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ne_204": {
                "variable": {
                    "value": "lt_rb_h_ne",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_lt[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "coords_rb[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ne_205": {
                "variable": {
                    "value": "lt_rb_w_ne",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_lt[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "coords_rb[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack(np.mgrid[:input_height, :input_width], -1).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.repeat([grid], batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "np.meshgrid(range(input_height), range(input_width), indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "grid.reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np_repeat_2d(grid, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(dtype)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ],
                        [
                            "np.meshgrid(range(input_height), range(input_width), indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=0)",
                            "Call"
                        ],
                        [
                            "np_repeat_3d(grid, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(dtype)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_298": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack(np.mgrid[:input_height, :input_width], -1).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.repeat([grid], batch_size, axis=0)",
                            "Call"
                        ],
                        [
                            "np.meshgrid(range(input_height), range(input_width), indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "grid.reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np_repeat_2d(grid, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(dtype)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ],
                        [
                            "np.meshgrid(range(input_height), range(input_width), indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=0)",
                            "Call"
                        ],
                        [
                            "np_repeat_3d(grid, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(dtype)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_125": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[idx.to(coords.device), th_flatten(coords[..., 0]), th_flatten(coords[..., 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[idx.to(coords.device), th_flatten(coords[..., 0]), th_flatten(coords[..., 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "input": {
                    "value": "a.repeat(repeats, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_138": {
                "input": {
                    "value": "coords_lt.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_142": {
                "input": {
                    "value": "coords_rb.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_146": {
                "input": {
                    "value": "coords_lb.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_150": {
                "input": {
                    "value": "coords_rt.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_226": {
                "input": {
                    "value": "coords_lt.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_230": {
                "input": {
                    "value": "coords_rb.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_234": {
                "input": {
                    "value": "coords_lb.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_238": {
                "input": {
                    "value": "coords_rt.detach().float() - coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "input": {
                    "value": "coords.narrow(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "input_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "input": {
                    "value": "coords.narrow(2, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "input_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "input": {
                    "value": "coords.narrow(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "input_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_195": {
                "input": {
                    "value": "coords.narrow(2, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "input_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_304": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ],
                        [
                            "output0.size(0)",
                            "Call"
                        ],
                        [
                            "input.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "input.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/models/psp.py": {
        "torch": {
            "Sequential_69": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PyramidPooling(in_channels, norm_layer, up_kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(0.1, False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, imsize, **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "variable": {
                    "value": "auxout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(auxout, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, imsize, **self._up_kwargs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_74": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "get_model_file('psp_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/models/util.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.infer_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(offset_branch_input_channels, bottleneck_channel, 1, padding=0, bias=False, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.infer_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(offset_branch_input_channels, bottleneck_channel, 1, padding=0, bias=False, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "PixelShuffle_28": {
                "variable": {
                    "value": "self.pixelshuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "offsets_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offsets_h, offsets_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "offset_branch_input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "offset_branch_input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/nn/customize.py": {
        "torch": {
            "BCELoss_35": {
                "variable": {
                    "value": "self.bceloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "self.bceloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_89": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_90": {
                "variable": {
                    "value": "self.nllloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_91": {
                "variable": {
                    "value": "self.smoothl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "self.crossentropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_342": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "labels.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "labels.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_544": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_545": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_546": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_547": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_550": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_553": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_556": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_559": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_567": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_568": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_569": {
                "variable": {
                    "value": "feat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(self.pool3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_570": {
                "variable": {
                    "value": "feat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(self.pool4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_578": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_580": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_594": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[-1], width, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_598": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[-2], width, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_602": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[-3], width, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_607": {
                "variable": {
                    "value": "self.dilation1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeparableConv2d(3 * width, width, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_610": {
                "variable": {
                    "value": "self.dilation2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeparableConv2d(3 * width, width, kernel_size=3, padding=2, dilation=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_613": {
                "variable": {
                    "value": "self.dilation3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeparableConv2d(3 * width, width, kernel_size=3, padding=4, dilation=4, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_616": {
                "variable": {
                    "value": "self.dilation4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeparableConv2d(3 * width, width, kernel_size=3, padding=8, dilation=8, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_623": {
                "variable": {
                    "value": "feats[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feats[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_624": {
                "variable": {
                    "value": "feats[-3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feats[-3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_625": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.conv5(inputs[-1]), self.conv4(inputs[-2]), self.conv3(inputs[-3])]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_626": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dilation1(feat), self.dilation2(feat), self.dilation3(feat), self.dilation4(feat)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histc_66": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[i].cpu().data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "nclass",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "nclass - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "target_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(dim=1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(pred1_diffdup.size(2), pred1_diffdup.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "histc_352": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[i].cpu().data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "nclass",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "nclass - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_534": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_571": {
                "tensors": {
                    "value": "(x, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nclass",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_rb[:, 0, :, :].unsqueeze(dim=1), coords_lt[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_lt[:, 0, :, :].unsqueeze(dim=1), coords_rb[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "gt_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "offsets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_127": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_129": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_131": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_133": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_135": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_137": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_139": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_141": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_143": {
                "variable": {
                    "value": "error_map_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "target_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(dim=1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(pred1_diffdup.size(2), pred1_diffdup.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "*size": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nclass",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_550": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_552": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_553": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_555": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_556": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_558": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_559": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_561": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_595": {
                "in_channels": {
                    "value": "in_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_597": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_599": {
                "in_channels": {
                    "value": "in_channels[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_601": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "in_channels[-3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_605": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_609": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_612": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_615": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_618": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "input": {
                    "value": "se_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_rb[:, 0, :, :].unsqueeze(dim=1), coords_lt[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_lt[:, 0, :, :].unsqueeze(dim=1), coords_rb[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "gt_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "offsets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_189": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_191": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_193": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_195": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_197": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_199": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_201": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_203": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_205": {
                "variable": {
                    "value": "error_map_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "target_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(dim=1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(pred1_diffdup.size(2), pred1_diffdup.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_274": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_285": {
                "variable": {
                    "value": "target_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(dim=1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(pred1_diffdup.size(2), pred1_diffdup.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_335": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_rb[:, 0, :, :].unsqueeze(dim=1), coords_lt[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_lt[:, 0, :, :].unsqueeze(dim=1), coords_rb[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "gt_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "offsets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_250": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_252": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_254": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_256": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_258": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_260": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_262": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_264": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_266": {
                "variable": {
                    "value": "error_map_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_304": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_rb[:, 0, :, :].unsqueeze(dim=1), coords_lt[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_lt[:, 0, :, :].unsqueeze(dim=1), coords_rb[:, 1, :, :].unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "gt_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "offsets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_311": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_313": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_315": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_317": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_lb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_319": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_321": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss5",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rt_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_323": {
                "variable": {
                    "value": "error_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_325": {
                "variable": {
                    "value": "min_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_rb_detup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_327": {
                "variable": {
                    "value": "error_map_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1_loss1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.nllloss(pred1_diffup_logsoftmax, target_1.squeeze().long()).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_error",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ],
                        [
                            "pred1_loss1",
                            "Name"
                        ],
                        [
                            "torch.min(pred1_loss3, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss4, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss5, min_error)",
                            "Call"
                        ],
                        [
                            "torch.min(pred1_loss6, min_error)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_49": {
                "input": {
                    "value": "se_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "se_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "input": {
                    "value": "se_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/nn/encoding.py": {
        "torch": {
            "Parameter_81": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_l2(X, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/nn/syncbn.py": {
        "torch": {
            "batch_norm_42": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(input_shape[0], self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/encoding/parallel.py": {
        "torch": {
            "broadcast_coalesced_42": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_grad_enabled_153": {
                "variable": {
                    "value": "grad_enabled",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_add_60": {
                "inputs": {
                    "value": "inputs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[inputs[i:i + num_inputs] for i in range(0, len(inputs), num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i[0].get_device())",
                            "Call"
                        ],
                        [
                            "[i.data for i in inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs[i:i + ctx.num_inputs] for i in range(0, len(inputs), ctx.num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_157": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_161": {
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/utils/files.py": {
        "torch": {
            "save_19": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "directory + filename",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "LaU-reg/encoding/utils/metrics.py": {
        "torch": {
            "max_71": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_90": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/experiments/segmentation/option.py": {
        "torch": {
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/experiments/segmentation/test.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split=args.split, mode=args.mode, transform=input_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_batchify_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_96": {
                "variable": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/experiments/segmentation/test_fps_params.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU-reg/experiments/segmentation/train.py": {
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split=args.train_split, mode='train', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "self.valloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='val', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': model.pretrained.parameters(), 'lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_206": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "gather(outputs, 0, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU/functions/location_aware_upsampling_func.py": {
        "torch": {}
    },
    "LaU/modules/location_aware_upsampling.py": {
        "torch": {}
    },
    "LaU/setup.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LaU/test.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "13",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_17": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_18": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradcheck_24": {
                "func": {
                    "value": "_LaU",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input, offset_x, offset_y, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}