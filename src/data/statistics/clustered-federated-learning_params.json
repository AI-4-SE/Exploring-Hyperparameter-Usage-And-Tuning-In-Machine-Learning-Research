{
    "fl_devices.py": {
        "sklearn": {
            "AgglomerativeClustering_133": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_63": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(sources), len(sources)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[value.flatten() for value in source.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(self.data, [n_train, n_eval])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "self.eval_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(self.data, [n_train, n_eval])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_35": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([source[name].data for source in sources])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_55": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_150": {
                "input": {
                    "value": "torch.mean(torch.stack([flatten(client.dW) for client in cluster]), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_146": {
                "input": {
                    "value": "flatten(client.dW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_150": {
                "input": {
                    "value": "torch.stack([flatten(client.dW) for client in cluster])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "tensors": {
                    "value": "[source[name].data for source in sources]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(source2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "[flatten(client.dW) for client in cluster]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "torch": {}
    },
    "models.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_9": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "62",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_14": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_15": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}