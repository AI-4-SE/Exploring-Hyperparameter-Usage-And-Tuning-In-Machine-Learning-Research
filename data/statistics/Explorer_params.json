{
    "agents/BaseAgent.py": {
        "torch": {}
    },
    "agents/RPG.py": {
        "torch": {}
    },
    "components/network.py": {
        "torch": {
            "Identity_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardsigmoid_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_18": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_19": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_20": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.bias_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_206": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_207": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_208": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc4(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_229": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "phi_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phi, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "phi_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phi, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_353": {
                "variable": {
                    "value": "self.action_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(layer_dims[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_359": {
                "variable": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(self.action_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_366": {
                "variable": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "log_pi - (2 * (math.log(2) - action - F.softplus(-2 * action))).sum(axis=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, u)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action=action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_391": {
                "variable": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(action_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_399": {
                "variable": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "log_pi - (2 * (math.log(2) - action - F.softplus(-2 * action))).sum(axis=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, u)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action=action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_437": {
                "variable": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(action_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_444": {
                "variable": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "log_pi - (2 * (math.log(2) - action - F.softplus(-2 * action))).sum(axis=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, u)",
                            "Call"
                        ],
                        [
                            "action_distribution.log_prob(action).sum(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_pi, -20, 20)",
                            "Call"
                        ],
                        [
                            "self.log_pi_from_distribution(action_distribution, action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action=action)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_333": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits_net(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_412": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action / self.action_lim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "atanh_413": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(action / self.action_lim, -0.999, 0.999)",
                            "Call"
                        ],
                        [
                            "torch.atanh(u)",
                            "Call"
                        ],
                        [
                            "action_mean",
                            "variable"
                        ],
                        [
                            "action_distribution.rsample() if self.rsample else action_distribution.sample()",
                            "IfExp"
                        ],
                        [
                            "torch.atanh(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_583": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action / self.actor_net.action_lim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "atanh_584": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_distribution.sample()",
                            "Call"
                        ],
                        [
                            "action_mean",
                            "variable"
                        ],
                        [
                            "action_distribution.rsample() if self.rsample else action_distribution.sample()",
                            "IfExp"
                        ],
                        [
                            "self.action_lim * torch.tanh(u)",
                            "BinOp"
                        ],
                        [
                            "action_mean",
                            "variable"
                        ],
                        [
                            "action_distribution.rsample() if self.rsample else action_distribution.sample()",
                            "IfExp"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi, action, deterministic)",
                            "Call"
                        ],
                        [
                            "torch.clamp(action / self.actor_net.action_lim, -0.999, 0.999)",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_81": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu + self.weight_sigma * self.weight_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu + self.bias_sigma * self.bias_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_83": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "linear_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 * 7 * 64",
                            "BinOp"
                        ],
                        [
                            "size_linear_unit(10) * size_linear_unit(10) * 16",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "linear_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 * 7 * 64",
                            "BinOp"
                        ],
                        [
                            "size_linear_unit(10) * size_linear_unit(10) * 16",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "*size": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_359": {
                "input": {
                    "value": "self.action_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_360": {
                "loc": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_lim * self.actor_net(phi)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.action_lim * torch.tanh(action_mean)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(F.softplus(self.action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_391": {
                "input": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(F.softplus(self.action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_392": {
                "loc": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_lim * self.actor_net(phi)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.action_lim * torch.tanh(action_mean)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(F.softplus(self.action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_435": {
                "input": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_lim * self.actor_net(phi)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.action_lim * torch.tanh(action_mean)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_437": {
                "input": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(F.softplus(self.action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_438": {
                "loc": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_lim * self.actor_net(phi)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.action_lim * torch.tanh(action_mean)",
                            "BinOp"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(F.softplus(self.action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net(phi).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(F.softplus(action_std), 1e-06, 10)",
                            "Call"
                        ],
                        [
                            "self.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ],
                        [
                            "self.actor_net.distribution(phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_174": {
                "in_channels": {
                    "value": "layer_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_410": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(action / self.action_lim, -0.999, 0.999)",
                            "Call"
                        ],
                        [
                            "torch.atanh(u)",
                            "Call"
                        ],
                        [
                            "action_mean",
                            "variable"
                        ],
                        [
                            "action_distribution.rsample() if self.rsample else action_distribution.sample()",
                            "IfExp"
                        ],
                        [
                            "torch.atanh(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_586": {
                "input": {
                    "value": "action_mean + action_std * eps.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "layer_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "layer_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "len(layer_dims) - i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_182": {
                "in_channels": {
                    "value": "layer_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_397": {
                "input": {
                    "value": "-2 * action",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "components/normalizer.py": {
        "torch": {}
    },
    "components/replay.py": {
        "torch": {
            "stack_35": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiment.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/helper.py": {
        "torch": {
            "as_tensor_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x, device=device, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_33": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_56": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/logger.py": {
        "torch": {
            "SummaryWriter_26": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.logs_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}