{
    "CamRest676/model.py": {
        "torch": {
            "Adam_66": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda x: x.requires_grad, self.m.parameters())}, {'params': filter(lambda x: x.requires_grad, self.m_para.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_428": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda x: x.requires_grad, self.m.parameters())}, {'params': filter(lambda x: x.requires_grad, self.m_para.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_529": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_536": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_552": {
                "variable": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_glove_matrix(self.reader.vocab, initial_arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_596": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_597": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_514": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lstd': self.m_para.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'lstd': self.m.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_524": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lstd': self.m_para.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'lstd': self.m.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_path + '_' + str(epoch) + '.pkl'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_592": {
                "device": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['delex_user'], cfg.max_para_len, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'test', prev_act)",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode=mode)",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, mode='val')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'rl')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode='rl')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "delex_para_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['delex_para'], cfg.max_para_len, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "degree_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(py_batch['degree'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['delex_user'], cfg.max_para_len, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'test', prev_act)",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode=mode)",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, mode='val')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'rl')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode='rl')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_213": {
                "ndarray": {
                    "value": "z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['bspan'], padding='post').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "z_input.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "z_input.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_214": {
                "ndarray": {
                    "value": "m_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['response'], cfg.max_ts, padding='post', truncating='post').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode=mode)",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, mode='val')",
                            "Call"
                        ],
                        [
                            "self._convert_batch(turn_batch, prev_z, mode='rl')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__287": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_326": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.lr",
                            "Attribute"
                        ],
                        [
                            "lr * cfg.lr_decay",
                            "BinOp"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_328": {
                "variable": {
                    "value": "self.optim_para",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.lr_para",
                            "Attribute"
                        ],
                        [
                            "lr_para * cfg.lr_decay",
                            "BinOp"
                        ],
                        [
                            "cfg.lr_para",
                            "Attribute"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m_para.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "current_device_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "prev_dial_act_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['pre_dial_act'], cfg.a_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(prev_a_py, cfg.a_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "prev_dial_act_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['pre_dial_act'], cfg.a_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(prev_a_py, cfg.a_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__288": {
                "parameters": {
                    "value": "self.m_para.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "ndarray": {
                    "value": "prev_z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(prev_z_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CamRest676/tsd_net.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_119": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_134": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_135": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_154": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_156": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_166": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_171": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_z, context, context_para]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_220": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy1(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_225": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_279": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_embed, u_context, z_context, degree_input.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_282": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_283": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_286": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score - z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, z_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_302": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_303": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.proj_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_310": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_a, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_329": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_331": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_334": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_351": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_352": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_353": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.proj_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_360": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_p, context_u, context_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_382": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_384": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_384": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_387": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_393": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_407": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_419": {
                "variable": {
                    "value": "self.para_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_420": {
                "variable": {
                    "value": "self.act_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_552": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_552": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_574": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_575": {
                "variable": {
                    "value": "self.dec_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "degree_size + embed_size + hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_576": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_588": {
                "variable": {
                    "value": "self.pr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_589": {
                "variable": {
                    "value": "self.dec_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_764": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_765": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_765": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_786": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_786": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1037": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_168": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "cfg.max_ts + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * (j // 2) / d_pos_vec) for j in range(d_pos_vec)] if pos != 0 else np.zeros(d_pos_vec) for pos in range(n_position)])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_238": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(pv_z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, 2 * cfg.vocab_size + u_input_np.shape[0]:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_242": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score - pv_z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score, pv_z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_464": {
                "variable": {
                    "value": "prev_a_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_485": {
                "variable": {
                    "value": "para_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_513": {
                "variable": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded_act, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded_act)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_513": {
                "variable": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_534": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_534": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_545": {
                "variable": {
                    "value": "(parat_proba, parat_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_681": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.bspan_decoder(u_enc_out, z_tm1, last_hidden, u_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, para_dec_out=para_dec, para_input_np=para_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_686": {
                "variable": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_turn(u_input, u_len, m_input=m_input, m_len=m_len, z_input=z_input, mode='train', turn_states=turn_states, degree_input=degree_input, u_input_np=u_input_np, m_input_np=m_input_np, domain=domain, para_dec=para_dec, para_input_np=para_input_np, sparse_bspan=sparse_bspan, sparse_response=sparse_response, **kwargs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pz_proba, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pz_proba[:, :, :cfg.vocab_size].contiguous()",
                            "Call"
                        ],
                        [
                            "pz_proba",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_704": {
                "variable": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_turn(u_input, u_len, m_input=m_input, m_len=m_len, z_input=z_input, mode='train', turn_states=turn_states, degree_input=degree_input, u_input_np=u_input_np, m_input_np=m_input_np, domain=domain, para_dec=para_dec, para_input_np=para_input_np, sparse_bspan=sparse_bspan, sparse_response=sparse_response, **kwargs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ],
                        [
                            "pm_dec_proba[:, :, :cfg.vocab_size].contiguous()",
                            "Call"
                        ],
                        [
                            "pm_dec_proba",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_714": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.bspan_decoder(u_enc_out, z_tm1, last_hidden, u_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, para_dec_out=para_dec, para_input_np=para_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ],
                        [
                            "pz_dec_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_750": {
                "variable": {
                    "value": "(z_proba, z_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_779": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_1017": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "orthogonal_80": {
                "module": {
                    "value": "hh[i:i + gru.hidden_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_224": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_226": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_285": {
                "input": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_287": {
                "input": {
                    "value": "torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "[gen_score, z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_333": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_335": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_335": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_386": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "scores[:, cfg.vocab_size:2 * cfg.vocab_size + u_input_np.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_388": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_388": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_503": {
                "variable": {
                    "value": "(a_proba, a_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_525": {
                "variable": {
                    "value": "(parat_proba, parat_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_847": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_848": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size - dead_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_887": {
                "tensors": {
                    "value": "finished[0].decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_891": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(proba, 1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "state.decoded[-1]",
                            "Subscript"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_892": {
                "tensor": {
                    "value": "degree_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "self.reader.multi_db_degree_handler(bspan_index, domain)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_971": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(proba, 1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "state.decoded[-1]",
                            "Subscript"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ],
                        [
                            "m_tm1",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_972": {
                "tensor": {
                    "value": "degree_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "self.reader.multi_db_degree_handler(bspan_index, domain)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "tensors": {
                    "value": "[pv_z_enc_out, u_enc_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, 2 * cfg.vocab_size + u_input_np.shape[0]:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_243": {
                "input": {
                    "value": "torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "[gen_score, u_copy_score, pv_z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_427": {
                "input": {
                    "value": "prev_act_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_turn(u_input=u_input, u_len=u_len, mode=mode, u_input_np=u_input_np, para_input=para_input, prev_act_input=prev_act_input, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "prev_act_proba[:, :, :cfg.vocab_size].contiguous()",
                            "Call"
                        ],
                        [
                            "prev_act_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_447": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_448": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_480": {
                "variable": {
                    "value": "(_, p_tm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_605": {
                "input": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_turn(u_input, u_len, m_input=m_input, m_len=m_len, z_input=z_input, mode='train', turn_states=turn_states, degree_input=degree_input, u_input_np=u_input_np, m_input_np=m_input_np, domain=domain, para_dec=para_dec, para_input_np=para_input_np, sparse_bspan=sparse_bspan, sparse_response=sparse_response, **kwargs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ],
                        [
                            "pm_dec_proba[:, :, :cfg.vocab_size].contiguous()",
                            "Call"
                        ],
                        [
                            "pm_dec_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_658": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_699": {
                "variable": {
                    "value": "(_, m_tm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, para_dec_out=para_dec, para_input_np=para_input_np, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, z_input_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.z_decoder(u_enc_out=u_enc_out, u_input_np=u_input_np, z_tm1=z_tm1, last_hidden=last_hidden, pv_z_enc_out=pv_z_enc_out, prev_z_input_np=prev_z_input_np, u_emb=u_emb, pv_z_emb=pv_z_emb, position=t, para_dec_out=para_dec_out, para_input_np=para_input_np, sparse_bspan=sparse_bspan)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "self.m_decoder(pz_dec_outs, u_enc_out, u_input_np, m_tm1, degree_input, last_hidden, bspan_index_np, sparse_response=sparse_response)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "[gru_out, context, context_para]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[z_context, u_context, gru_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "[gru_out, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "tensors": {
                    "value": "[gru_out, context_u, context_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_488": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_657": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_719": {
                "ndarray": {
                    "value": "degree_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.db_degree_handler(bspan_index, kwargs['dial_id'])",
                            "Call"
                        ],
                        [
                            "self.reader.multi_db_degree_handler(bspan_index, domain)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(torch.from_numpy(degree_input).float()))",
                            "Call"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ],
                        [
                            "degree_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_226": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_bspan",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_287": {
                "input": {
                    "value": "z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_z_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_response",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_335": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_bspan",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_388": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_bspan",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_243": {
                "input": {
                    "value": "pv_z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_pv_z_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(get_sparse_input_aug(prev_z_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MultiWOZ/damd_net.py": {
        "torch": {
            "LogSoftmax_311": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_338": {
                "variable": {
                    "value": "gen_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([gen_score] + c_to_g_scores, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1909": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size_oov",
                            "variable"
                        ],
                        [
                            "n_dims if n_dims is not None else int(torch.max(y_tensor)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size_oov",
                            "variable"
                        ],
                        [
                            "n_dims if n_dims is not None else int(torch.max(y_tensor)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_99": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_123": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleDict_141": {
                "variable": {
                    "value": "self.model_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hs, 0)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hs[::-1] + [zeros], dim=1)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "hs",
                            "Method Argument"
                        ],
                        [
                            "hs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.Wcopy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_233": {
                "variable": {
                    "value": "raw_cp_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcopy(enc_out_hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_234": {
                "variable": {
                    "value": "raw_cp_score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "beh,bdh->bde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "raw_cp_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcopy(enc_out_hs))",
                            "Call"
                        ],
                        [
                            "torch.einsum('beh,bdh->bde', raw_cp_score, dec_hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_302": {
                "variable": {
                    "value": "cps",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "imj,ijn->imn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "raw_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_sc in enumerate(raw_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_351": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "3 * cfg.hidden_size + self.embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_429": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "4 * cfg.hidden_size + self.embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_450": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_556": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_579": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_726": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "gru_input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_749": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_840": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_841": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_842": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_875": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_914": {
                "variable": {
                    "value": "self.nllloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_1153": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.exp(logprob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1202": {
                "variable": {
                    "value": "hidden_states[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(self.layer_num, self.bidirec, batch_size, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1202": {
                "variable": {
                    "value": "hidden_states[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1203": {
                "variable": {
                    "value": "decoded_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decode_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1321": {
                "variable": {
                    "value": "hiddens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hiddens_batch, dim=1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens_batch, dim=1)",
                            "Call"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1321": {
                "variable": {
                    "value": "hiddens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1322": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(decoded_batch, dim=1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded_batch, dim=1)",
                            "Call"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1322": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1387": {
                "variable": {
                    "value": "hiddens_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hiddens_batch, dim=1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens_batch, dim=1)",
                            "Call"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ],
                        [
                            "hiddens_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1388": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(decoded_batch, dim=1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded_batch, dim=1)",
                            "Call"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ],
                        [
                            "decoded_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1538": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size if not self.bidirec else 2 * self.hidden_size",
                            "IfExp"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_1539": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_1558": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_1561": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(embedded, hidden)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1572": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1573": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_1598": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_1604": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_1607": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "self.v(energy).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_1614": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_1615": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1616": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1619": {
                "variable": {
                    "value": "self.proj_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_1622": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1636": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_a, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1641": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1643": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1643": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1646": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_1652": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1655": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1663": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_1664": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1665": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1669": {
                "variable": {
                    "value": "self.proj_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_1672": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1689": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_p, context_u, context_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1694": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1696": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1696": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1699": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_1705": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1708": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1718": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cfg.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1719": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_1731": {
                "variable": {
                    "value": "self.para_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_1732": {
                "variable": {
                    "value": "self.act_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1864": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_forward(inputs, hidden_states, first_turn, para_dec)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1864": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "new_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(x_input_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_195": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_312": {
                "tensors": {
                    "value": "raw_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "raw_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_336": {
                "variable": {
                    "value": "total_score[b, :, input_idx_oov[i - 1][b, t]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([ts, cs], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_338": {
                "tensors": {
                    "value": "[gen_score] + c_to_g_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_957": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs['aspn_aug']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1015": {
                "variable": {
                    "value": "dec_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(self.layer_num, self.bidirec, batch_size, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1015": {
                "variable": {
                    "value": "dec_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1316": {
                "variable": {
                    "value": "wid_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wid_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wid_seqs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1317": {
                "variable": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(self.layer_num, self.bidirec, batch_size, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1383": {
                "variable": {
                    "value": "decoded_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decode_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1431": {
                "variable": {
                    "value": "hidden_chosen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_chosen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "hiddens_batch[:, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(hidden_chosen, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1432": {
                "variable": {
                    "value": "decode_chosen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decode_chosen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "wid_seqs_np[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(decode_chosen, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1493": {
                "ndarray": {
                    "value": "inputs[name + '_unk_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1494": {
                "ndarray": {
                    "value": "inputs[name + '_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_1581": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1596": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1776": {
                "variable": {
                    "value": "prev_a_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1777": {
                "variable": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1797": {
                "variable": {
                    "value": "para_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1798": {
                "variable": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1824": {
                "variable": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_a_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(prev_a_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1825": {
                "variable": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded_act, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded_act)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1825": {
                "variable": {
                    "value": "decoded_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1845": {
                "variable": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "para_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(para_dec_outs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1846": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_forward(inputs, hidden_states, first_turn, para_dec)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('resp', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.greedy_decode('bspn', user_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('dspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode(cfg.bspn_mode, init_hidden, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.greedy_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.beam_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "self.sampling_decode('aspn', usdx_enc_last_h, first_turn, inputs, hs, decoded, para_dec)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1846": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1857": {
                "variable": {
                    "value": "(parat_proba, parat_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_145": {
                "variable": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_149": {
                "variable": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_156": {
                "variable": {
                    "value": "ln",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size if not self.bidirec else 2 * self.hidden_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "in_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self.model_layers['gru_' + str(l)](in_l, init_hs)",
                            "Call"
                        ],
                        [
                            "self.model_layers['ln_' + str(l)](in_l)",
                            "Call"
                        ],
                        [
                            "F.dropout(in_l)",
                            "Call"
                        ],
                        [
                            "in_l + last_input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_355": {
                "in_features": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_396": {
                "tensors": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "in_features": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_502": {
                "tensors": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_560": {
                "in_features": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_642": {
                "tensors": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_730": {
                "in_features": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_787": {
                "tensors": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_889": {
                "in_features": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1153": {
                "input": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(logits)",
                            "Call"
                        ],
                        [
                            "self.act_selection.forward(hiddens_batch)",
                            "Call"
                        ],
                        [
                            "logprob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_1274": {
                "variable": {
                    "value": "(log_probs, dec_last_ws)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_turn.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_1310": {
                "variable": {
                    "value": "decoded_T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decode_idx[::-1] + [zeros]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1312": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs[::-1] + [zeros]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1555": {
                "ndarray": {
                    "value": "np.argsort(sort_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1556": {
                "ndarray": {
                    "value": "sort_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-input_lens)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(sort_idx).type(torch.LongTensor))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1573": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_1645": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_1647": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1647": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1652": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1698": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "F.tanh(self.proj_copy(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ],
                        [
                            "scores[:, cfg.vocab_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_1700": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1700": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1705": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1759": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_1760": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_1815": {
                "variable": {
                    "value": "(a_proba, a_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1837": {
                "variable": {
                    "value": "(parat_proba, parat_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "Tdec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score.size(1)",
                            "Call"
                        ],
                        [
                            "dec_hs.size(1)",
                            "Call"
                        ],
                        [
                            "dec_hs.size(1)",
                            "Call"
                        ],
                        [
                            "dec_hs.size(1)",
                            "Call"
                        ],
                        [
                            "dec_hs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "vocab_size_oov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ],
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ],
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ],
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ],
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ],
                        [
                            "vocab_size_oov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_336": {
                "tensors": {
                    "value": "[ts, cs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_495": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1169": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1225": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1358": {
                "variable": {
                    "value": "(logprobs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_turn.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "cfg.topk_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_1359": {
                "variable": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(logprobs)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_1360": {
                "variable": {
                    "value": "dec_curr_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob_turn.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob_turn.squeeze(1), 55)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(torch.exp(logprobs), 1, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1384": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(self.layer_num, self.bidirec, batch_size, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hiddens, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1384": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1604": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1739": {
                "input": {
                    "value": "prev_act_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_turn(u_input=u_input, u_len=u_len, mode=mode, u_input_np=u_input_np, para_input=para_input, prev_act_input=prev_act_input, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "prev_act_proba[:, :, :cfg.vocab_size].contiguous()",
                            "Call"
                        ],
                        [
                            "prev_act_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_1792": {
                "variable": {
                    "value": "(_, p_tm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.a_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, a_tm1=a_tml, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(a_enc_out=prev_a_dec_outs, u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_input_np=a_input_np)",
                            "Call"
                        ],
                        [
                            "self.p_decoder.forward(u_enc_out=u_enc_out, u_input_np=u_input_np, p_tm1=p_tm1, last_hidden=last_hidden, sparse_u_input_para=sparse_u_input_para, a_enc_out=a_enc_out, a_input_np=a_input_np)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1800": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_54": {
                "input": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.data if isinstance(labels, Variable) else labels",
                            "IfExp"
                        ],
                        [
                            "y_tensor.type(torch.LongTensor).contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "y.data if isinstance(y, Variable) else y",
                            "IfExp"
                        ],
                        [
                            "y_tensor.type(torch.LongTensor).contiguous().view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_851": {
                "inplace": {
                    "value": "self.W1(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_991": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1102": {
                "ndarray": {
                    "value": "inputs['db_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_1309": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "cfg.max_span_length - len(decode_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1311": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "cfg.max_span_length - len(decode_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hs[0].size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1345": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1366": {
                "variable": {
                    "value": "(logprobs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_turn.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "55",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1367": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob_turn.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob_turn.squeeze(1), 55)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1378": {
                "variable": {
                    "value": "dec_last_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_curr_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(topk_words, 1, widx)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1476": {
                "ndarray": {
                    "value": "inputs['db_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1639": {
                "tensors": {
                    "value": "[gru_out, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1692": {
                "tensors": {
                    "value": "[gru_out, context_u, context_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_631": {
                "*size": {
                    "value": "inputs['user'].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_633": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_1183": {
                "input": {
                    "value": "prob_turn.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1192": {
                "input": {
                    "value": "prob_turn.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1197": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0) if bidx is None else len(bidx)",
                            "IfExp"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "hiddens_batch.size()[0]",
                            "Subscript"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "inputs['user'].size(0)",
                            "Call"
                        ],
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1359": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob_turn.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob_turn.squeeze(1), 55)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_1373": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs[b][:pnum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_1647": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_u_input_para",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_1700": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_u_input_para",
                            "variable"
                        ],
                        [
                            "sparse_u_input_para",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_1371": {
                "input": {
                    "value": "probs[b][:pnum]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_1375": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MultiWOZ/model.py": {
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda x: x.requires_grad, self.m.parameters())}, {'params': filter(lambda x: x.requires_grad, self.m_para.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_531": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_533": {
                "variable": {
                    "value": "all_state_para",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_model_path",
                            "Attribute"
                        ],
                        [
                            "path_para + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_642": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_643": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_29": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model()",
                            "Call"
                        ],
                        [
                            "DAMD(self.reader)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_30": {
                "variable": {
                    "value": "self.m_para",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "m_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Paraphrase(self.reader)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_522": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lstd': self.m.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "path + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_523": {
                "obj": {
                    "value": "all_state_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lstd': self.m_para.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path_para, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path_para",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.para_model_path",
                            "Attribute"
                        ],
                        [
                            "path_para + '.final'",
                            "BinOp"
                        ],
                        [
                            "cfg.para_model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_552": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "utils.get_glove_matrix(cfg.glove_path, self.reader.vocab, initial_arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_557": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "utils.get_glove_matrix(cfg.glove_path, self.reader.vocab, initial_arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(combined_input, cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'train')",
                            "Call"
                        ],
                        [
                            "self._convert_batch_para(turn_batch, 'test', prev_act)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "ndarray": {
                    "value": "delex_para_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['padx'], cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "inputs['db_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(raw_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_634": {
                "device": {
                    "value": "cfg.cuda_device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_638": {
                "device": {
                    "value": "cfg.cuda_device[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "prev_dial_act_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['pv_aspn'], cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(prev_a_py, cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "prev_dial_act_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['pv_aspn'], cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(prev_a_py, cfg.max_nl_length, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "inputs[item + '_unk_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "inputs['aspn_aug_unk_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__272": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_323": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.lr",
                            "Attribute"
                        ],
                        [
                            "lr * cfg.lr_decay",
                            "BinOp"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "inputs[item + '_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "inputs['pv_' + item + '_unk_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "inputs['pv_' + item + '_np']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}