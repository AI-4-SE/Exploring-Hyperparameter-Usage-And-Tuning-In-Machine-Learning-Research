{
    "mhre.py": {
        "torch": {
            "sum_1210": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1211": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.eq(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_1214": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_len.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_1791": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_1792": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_1958": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1222": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_1231": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(output, 2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_1247": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1250": {
                "variable": {
                    "value": "self.coref_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_coref_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "other_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1253": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ngram_count * cnn_filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1254": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_1255": {
                "variable": {
                    "value": "self.visible_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_1271": {
                "variable": {
                    "value": "psg1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_word_embeds, psg1_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1272": {
                "variable": {
                    "value": "psg2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_word_embeds, psg2_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1273": {
                "variable": {
                    "value": "psg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_input, psg2_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1274": {
                "variable": {
                    "value": "psg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_words_mask, psg2_words_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1294": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1297": {
                "variable": {
                    "value": "self.coref_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_coref_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "other_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1299": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1300": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1301": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_1302": {
                "variable": {
                    "value": "self.visible_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_1320": {
                "variable": {
                    "value": "psg1_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_word_embeds, psg1_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1323": {
                "variable": {
                    "value": "psg2_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_word_embeds, psg2_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1326": {
                "variable": {
                    "value": "psg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_lstm_input, psg2_lstm_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1329": {
                "variable": {
                    "value": "psg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_words_mask, psg2_words_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1339": {
                "variable": {
                    "value": "arg1_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "arg1_start.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1341": {
                "variable": {
                    "value": "arg1_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "arg1_end.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1343": {
                "variable": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg1_s_vec, arg1_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1347": {
                "variable": {
                    "value": "arg2_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "arg2_start.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1349": {
                "variable": {
                    "value": "arg2_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "arg2_end.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1351": {
                "variable": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg2_s_vec, arg2_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1372": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1375": {
                "variable": {
                    "value": "self.coref_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_coref_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "other_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1377": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1379": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ngram_count * cnn_filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1380": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_1381": {
                "variable": {
                    "value": "self.visible_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_1399": {
                "variable": {
                    "value": "psg1_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_word_embeds, psg1_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1402": {
                "variable": {
                    "value": "psg2_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_word_embeds, psg2_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1405": {
                "variable": {
                    "value": "psg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_lstm_input, psg2_lstm_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1408": {
                "variable": {
                    "value": "psg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_words_mask, psg2_words_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1429": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1432": {
                "variable": {
                    "value": "self.coref_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_coref_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "other_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1434": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1435": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1436": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_1437": {
                "variable": {
                    "value": "self.visible_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_1456": {
                "variable": {
                    "value": "psg1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_word_embeds, psg1_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1459": {
                "variable": {
                    "value": "psg2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_word_embeds, psg2_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1462": {
                "variable": {
                    "value": "psg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_input, psg2_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1465": {
                "variable": {
                    "value": "psg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_words_mask, psg2_words_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1476": {
                "variable": {
                    "value": "path_e1_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_e1_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1478": {
                "variable": {
                    "value": "path_e1_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_e1_e.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1480": {
                "variable": {
                    "value": "path_c1_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_c1_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1482": {
                "variable": {
                    "value": "path_c1_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_c1_e.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1484": {
                "variable": {
                    "value": "path_e1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_e1_s_vec, path_e1_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1485": {
                "variable": {
                    "value": "path_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_c1_s_vec, path_c1_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1486": {
                "variable": {
                    "value": "p1_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_e1, path_c1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1488": {
                "variable": {
                    "value": "path_c2_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_c2_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1490": {
                "variable": {
                    "value": "path_c2_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_c2_e.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1492": {
                "variable": {
                    "value": "path_e2_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_e2_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1494": {
                "variable": {
                    "value": "path_e2_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "path_e2_e.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1496": {
                "variable": {
                    "value": "path_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_c2_s_vec, path_c2_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1497": {
                "variable": {
                    "value": "path_e2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_e2_s_vec, path_e2_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1498": {
                "variable": {
                    "value": "p2_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_e2, path_c2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1500": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p1_rel, p2_rel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1519": {
                "variable": {
                    "value": "self.gcn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1522": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_1539": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ems_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ems_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1542": {
                "variable": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.w(ems))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "words.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1544": {
                "variable": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.tanh(self.w(ems)), words.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "att_scores.masked_fill(ems_words_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(att_scores, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_1545": {
                "variable": {
                    "value": "ems_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.tanh(self.w(ems)), words.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "att_scores.masked_fill(ems_words_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(att_scores, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg['text'].split(' ')",
                            "Call"
                        ],
                        [
                            "psg['text'].split(' ')",
                            "Call"
                        ],
                        [
                            "words",
                            "Method Argument"
                        ],
                        [
                            "words",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_1567": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_1570": {
                "variable": {
                    "value": "self.coref_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_coref_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "other_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1572": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1579": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "6 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1580": {
                "variable": {
                    "value": "self.hid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_1581": {
                "variable": {
                    "value": "self.visible_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "cat_1600": {
                "variable": {
                    "value": "psg1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_word_embeds, psg1_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1603": {
                "variable": {
                    "value": "psg2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_word_embeds, psg2_coref_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1606": {
                "variable": {
                    "value": "psg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_input, psg2_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1609": {
                "variable": {
                    "value": "psg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_words_mask, psg2_words_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1620": {
                "variable": {
                    "value": "psg1_ems_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "psg1_ems_start.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1622": {
                "variable": {
                    "value": "psg1_ems_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg1_output.view(-1, psg1_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "psg1_ems_end.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1624": {
                "variable": {
                    "value": "psg1_ems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_ems_s_vec, psg1_ems_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1630": {
                "variable": {
                    "value": "psg1_ems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_ems, psg1_ems_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1635": {
                "variable": {
                    "value": "psg2_ems_s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "psg2_ems_start.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1637": {
                "variable": {
                    "value": "psg2_ems_e_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ],
                        [
                            "psg2_output.view(-1, psg2_output.size()[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "psg2_ems_end.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1639": {
                "variable": {
                    "value": "psg2_ems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_ems_s_vec, psg2_ems_e_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1645": {
                "variable": {
                    "value": "psg2_ems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg2_ems, psg2_ems_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1650": {
                "variable": {
                    "value": "joint_ems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(psg1_ems, psg2_ems)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_1683": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_1684": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_1787": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_1789": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(model_id)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_1234": {
                "variable": {
                    "value": "cur_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(cur_output, 2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1235": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, cur_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1279": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1281": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1357": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1359": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1414": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1416": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1507": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1509": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_1527": {
                "variable": {
                    "value": "gcn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gcn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn_layers[i](gcn_input)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, gcn_input)",
                            "Call"
                        ],
                        [
                            "F.relu(gcn_input)",
                            "Call"
                        ],
                        [
                            "self.hid_drop(gcn_input)",
                            "Call"
                        ],
                        [
                            "gcn_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_1528": {
                "variable": {
                    "value": "gcn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn_layers[i](gcn_input)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, gcn_input)",
                            "Call"
                        ],
                        [
                            "F.relu(gcn_input)",
                            "Call"
                        ],
                        [
                            "self.hid_drop(gcn_input)",
                            "Call"
                        ],
                        [
                            "gcn_input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1554": {
                "input": {
                    "value": "mask_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ems_words_mask.clone()",
                            "Call"
                        ],
                        [
                            "mask_copy.float()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psg['text'].split(' ')",
                            "Call"
                        ],
                        [
                            "psg['text'].split(' ')",
                            "Call"
                        ],
                        [
                            "words",
                            "Method Argument"
                        ],
                        [
                            "words",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_1554": {
                "input": {
                    "value": "mask_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ems_words_mask.clone()",
                            "Call"
                        ],
                        [
                            "mask_copy.float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_1554": {
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1661": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1663": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((arg1, arg2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(feature))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(path))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.hid_drop(torch.cat((ent1, ent2), -1)))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_2066": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_2068": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(model_name)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(best_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1345": {
                "input": {
                    "value": "arg1_mask.eq(0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_1353": {
                "input": {
                    "value": "arg2_mask.eq(0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_1502": {
                "input": {
                    "value": "path_mask.eq(0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_1542": {
                "input": {
                    "value": "self.w(ems)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_1651": {
                "input": {
                    "value": "joint_ent_ems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_ent_ems",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "joint_ems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((psg1_ems, psg2_ems), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1651": {
                "input": {
                    "value": "joint_ent_ems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_ent_ems",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_1708": {
                "ndarray": {
                    "value": "cur_input['psg1_words'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1709": {
                "ndarray": {
                    "value": "cur_input['psg1_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1710": {
                "ndarray": {
                    "value": "cur_input['psg1_coref'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1711": {
                "ndarray": {
                    "value": "cur_input['psg2_words'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1712": {
                "ndarray": {
                    "value": "cur_input['psg2_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1713": {
                "ndarray": {
                    "value": "cur_input['psg2_coref'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1714": {
                "ndarray": {
                    "value": "cur_input['path_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1715": {
                "ndarray": {
                    "value": "cur_input['path_e1_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1716": {
                "ndarray": {
                    "value": "cur_input['path_e1_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1717": {
                "ndarray": {
                    "value": "cur_input['path_c1_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1718": {
                "ndarray": {
                    "value": "cur_input['path_c1_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1719": {
                "ndarray": {
                    "value": "cur_input['path_c2_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1720": {
                "ndarray": {
                    "value": "cur_input['path_c2_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1721": {
                "ndarray": {
                    "value": "cur_input['path_e2_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1722": {
                "ndarray": {
                    "value": "cur_input['path_e2_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1723": {
                "ndarray": {
                    "value": "cur_input['arg1_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1724": {
                "ndarray": {
                    "value": "cur_input['arg1_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1725": {
                "ndarray": {
                    "value": "cur_input['arg2_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1726": {
                "ndarray": {
                    "value": "cur_input['arg2_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1727": {
                "ndarray": {
                    "value": "cur_input['arg1_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1728": {
                "ndarray": {
                    "value": "cur_input['arg2_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1729": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1730": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1731": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1732": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1733": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_words_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1734": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1735": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1736": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1737": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1738": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_words_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1739": {
                "ndarray": {
                    "value": "cur_input['joint_ent'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1740": {
                "ndarray": {
                    "value": "cur_input['joint_ent_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1741": {
                "ndarray": {
                    "value": "cur_input['joint_ent_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_1743": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__1882": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_1906": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_2069": {
                "f": {
                    "value": "model_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(trg_data_folder, 'model.h5py')",
                            "Call"
                        ],
                        [
                            "os.path.join(trg_data_folder, 'model.h5py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_1224": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filter",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.NGrams",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_1231": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "open(save_vocab_file_name, 'wb')",
                            "Call"
                        ],
                        [
                            "self.conv_layers[0](input)",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.max(output, 2)[0])",
                            "Call"
                        ],
                        [
                            "torch.cat((output, cur_output), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1249": {
                "ndarray": {
                    "value": "word_embed_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_vocab(train_lines, dev_lines, test_lines, save_vocab_file, embedding_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1296": {
                "ndarray": {
                    "value": "word_embed_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_vocab(train_lines, dev_lines, test_lines, save_vocab_file, embedding_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1355": {
                "tensors": {
                    "value": "(arg1, arg2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_1374": {
                "ndarray": {
                    "value": "word_embed_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_vocab(train_lines, dev_lines, test_lines, save_vocab_file, embedding_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1431": {
                "ndarray": {
                    "value": "word_embed_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_vocab(train_lines, dev_lines, test_lines, save_vocab_file, embedding_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1521": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_1569": {
                "ndarray": {
                    "value": "word_embed_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_vocab(train_lines, dev_lines, test_lines, save_vocab_file, embedding_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1659": {
                "tensors": {
                    "value": "(ent1, ent2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_1819": {
                "ndarray": {
                    "value": "cur_input['psg1_words'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1820": {
                "ndarray": {
                    "value": "cur_input['psg1_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1821": {
                "ndarray": {
                    "value": "cur_input['psg1_coref'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1822": {
                "ndarray": {
                    "value": "cur_input['psg2_words'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1823": {
                "ndarray": {
                    "value": "cur_input['psg2_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1824": {
                "ndarray": {
                    "value": "cur_input['psg2_coref'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1825": {
                "ndarray": {
                    "value": "cur_input['arg1_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1826": {
                "ndarray": {
                    "value": "cur_input['arg1_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1827": {
                "ndarray": {
                    "value": "cur_input['arg2_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1828": {
                "ndarray": {
                    "value": "cur_input['arg2_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1829": {
                "ndarray": {
                    "value": "cur_input['arg1_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1830": {
                "ndarray": {
                    "value": "cur_input['arg2_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1831": {
                "ndarray": {
                    "value": "cur_input['path_e1_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1832": {
                "ndarray": {
                    "value": "cur_input['path_e1_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1833": {
                "ndarray": {
                    "value": "cur_input['path_c1_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1834": {
                "ndarray": {
                    "value": "cur_input['path_c1_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1835": {
                "ndarray": {
                    "value": "cur_input['path_c2_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1836": {
                "ndarray": {
                    "value": "cur_input['path_c2_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1837": {
                "ndarray": {
                    "value": "cur_input['path_e2_s'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1838": {
                "ndarray": {
                    "value": "cur_input['path_e2_e'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1839": {
                "ndarray": {
                    "value": "cur_input['path_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1840": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1841": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1842": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1843": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1844": {
                "ndarray": {
                    "value": "cur_input['psg1_ems_words_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1845": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_start'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1846": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_end'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1847": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1848": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1849": {
                "ndarray": {
                    "value": "cur_input['psg2_ems_words_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1850": {
                "ndarray": {
                    "value": "cur_input['joint_ent'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1851": {
                "ndarray": {
                    "value": "cur_input['joint_ent_mask'].astype('bool')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1852": {
                "ndarray": {
                    "value": "cur_input['joint_ent_adj_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1854": {
                "ndarray": {
                    "value": "cur_target['target'].astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_1856": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_1880": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_1234": {
                "input": {
                    "value": "cur_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_layers[i](input)",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.max(cur_output, 2)[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}