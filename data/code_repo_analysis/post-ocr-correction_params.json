{
    "src/data_handler.py": {
        "sklearn": {
            "train_test_split_56": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "src/test.py": {
        "sklearn": {},
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.SeqDataset(train_data, dictionary, rand_rate=RAND_RATE, window=WINDOW)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.Collator(noise_model, device_cpu, rand_mode=RAND_MODE)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.SeqDataset(test_data, dictionary, rand_rate=RAND_RATE, window=WINDOW)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.Collator(noise_model, device_cpu, rand_mode=RAND_MODE)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/error_gen.py": {
        "torch": {
            "load_158": {
                "variable": {
                    "value": "check_point",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_18": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_29": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.embedding(src))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.embedding(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_51": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim + hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "emb_con",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded.squeeze(0), hidden.squeeze(0), context.squeeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/nmt_rnn.py": {
        "torch": {
            "tensor_387": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t.shape[0] for t in src]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_sequence_391": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "pad_sequence(src)",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "src.to(device)",
                            "Call"
                        ],
                        [
                            "src.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_392": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "pad_sequence(trg)",
                            "Call"
                        ],
                        [
                            "trg.to(device)",
                            "Call"
                        ],
                        [
                            "trg[1:].view(-1)",
                            "Call"
                        ],
                        [
                            "trg.to(device)",
                            "Call"
                        ],
                        [
                            "trg[1:].view(-1)",
                            "Call"
                        ],
                        [
                            "trg.to(device)",
                            "Call"
                        ],
                        [
                            "trg.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "trg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_34": {
                "variable": {
                    "value": "packed_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.embedding(src))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.embedding(input))",
                            "Call"
                        ],
                        [
                            "embedded.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.LongTensor([len(src_ids)]).to(device)",
                            "Call"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_41": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed_embedded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(torch.cat((hidden[-2, :, :], hidden[-1, :, :]), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((hidden, encoder_outputs), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "output.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_111": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "enc_hid_dim * 2 + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "output.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_145": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(src, src_len)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, weighted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(src_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + src_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(src_ids, dtype=int)",
                            "Call"
                        ],
                        [
                            "self.dictionary.doc2idx(tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + src_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor(src_ids).to(device)",
                            "Call"
                        ],
                        [
                            "src_ids.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(trg_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + trg_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(trg_ids, dtype=int)",
                            "Call"
                        ],
                        [
                            "[1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_321": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_322": {
                "variable": {
                    "value": "check_point",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_336": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_424": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, lens, trg, masks)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 2)",
                            "Call"
                        ],
                        [
                            "output.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.rnn(rnn_input, hidden.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.decoder(input, hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "model.decoder(trg_token, hidden, context)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_99": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(energy).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attention.masked_fill(mask == 0, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__446": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_478": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, lens, trg, masks)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 2)",
                            "Call"
                        ],
                        [
                            "output.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.rnn(rnn_input, hidden.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.decoder(input, hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "model.decoder(trg_token, hidden, context)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_522": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, lens, trg, masks)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 2)",
                            "Call"
                        ],
                        [
                            "output.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.rnn(rnn_input, hidden.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.decoder(input, hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "model.decoder(trg_token, hidden, context)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(output, weighted, embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_366": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, lens, trg, masks)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "output[1:].view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, lens, trg, masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, 2)",
                            "Call"
                        ],
                        [
                            "output.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.rnn(rnn_input, hidden.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.decoder(input, hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "model.decoder(trg_token, hidden, context)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/tfm_context.py": {
        "torch": {
            "tensor_67": {
                "variable": {
                    "value": "l_ctx_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "l_ctx_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(l_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + l_ctx_ids + [3]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(l_ctx_ids, dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "r_ctx_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "r_ctx_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(r_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[3] + r_ctx_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(r_ctx_ids, dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(trg_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + trg_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(trg_ids, dtype=int)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(src_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + src_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(src_ids, dtype=int)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_sequence_112": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "src.to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "[torch.cat((x, y, z)) for (x, y, z) in zip(l_ctx, src_tokens, r_ctx)]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(src)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_113": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(trg_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + trg_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(trg_ids, dtype=int)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(t) for t in non_errs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_sequence_97": {
                "variable": {
                    "value": "non_errs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "non_errs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_src.loc[df_src['is_rand'] == False]['tokens'].tolist()",
                            "Call"
                        ],
                        [
                            "pad_sequence(non_errs)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "autocast_131": {
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "mp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_188": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_185": {
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "mp",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/tfm_no_context.py": {
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(trg_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + trg_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(trg_ids, dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "src_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dictionary.doc2idx(src_tokens, unknown_word_index=4)",
                            "Call"
                        ],
                        [
                            "[1] + src_ids + [2]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(src_ids, dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_sequence_84": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "src.to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "df_src['tokens'].tolist()",
                            "Call"
                        ],
                        [
                            "[torch.LongTensor(i) for i in src]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(src)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_85": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "pad_sequence(trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(t) for t in non_errs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_sequence_75": {
                "variable": {
                    "value": "non_errs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "non_errs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_src.loc[df_src['is_rand'] == False]['tokens'].tolist()",
                            "Call"
                        ],
                        [
                            "pad_sequence(non_errs)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_103": {
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_153": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ],
                        [
                            "model(src, tgt[:-1, :])",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_150": {
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/transfomer.py": {
        "torch": {
            "tril_47": {
                "variable": {
                    "value": "trg_sub_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((trg_len, trg_len), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_95": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(hid_dim, n_heads, pf_dim, dropout, device) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_107": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([hid_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_117": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.self_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_145": {
                "variable": {
                    "value": "self.ff_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_151": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_195": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([self.head_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale",
                            "BinOp"
                        ],
                        [
                            "energy.masked_fill(mask == 0, -10000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(attention)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_v(value)",
                            "Call"
                        ],
                        [
                            "V.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "pf_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pf_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ],
                        [
                            "pf_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_292": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_293": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(hid_dim, n_heads, pf_dim, dropout, device) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_304": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_306": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([hid_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_318": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ],
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_318": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_351": {
                "variable": {
                    "value": "self.self_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_352": {
                "variable": {
                    "value": "self.enc_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_353": {
                "variable": {
                    "value": "self.ff_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_444": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "GradScaler_445": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_224": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_q(query)",
                            "Call"
                        ],
                        [
                            "Q.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_267": {
                "input": {
                    "value": "self.fc_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "(trg_len, trg_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/transformer.py": {
        "torch": {
            "TransformerEncoderLayer_22": {
                "variable": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_head",
                            "Method Argument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_23": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(embed_dim, n_head, hid_dim, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerDecoderLayer_25": {
                "variable": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_head",
                            "Method Argument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerDecoder_26": {
                "variable": {
                    "value": "self.transformer_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerDecoderLayer(embed_dim, n_head, hid_dim, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.embed_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.embed_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_89": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_90": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_91": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_92": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "GradScaler_126": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_90": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_35": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "sum_18": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out != trg",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('models', model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join('models', model_name + '.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join('logs', filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradScaler_73": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "{'epoch': epoch, 'scaler': scaler.state_dict(), 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_134": {
                "input": {
                    "value": "output[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}