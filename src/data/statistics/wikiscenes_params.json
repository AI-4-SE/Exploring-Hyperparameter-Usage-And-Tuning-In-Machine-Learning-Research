{
    "train.py": {
        "sklearn": {
            "average_precision_score_776": {
                "variable": {
                    "value": "aps",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "related_stacked if self.multi_label else targets_stacked",
                    "type": "IfExp",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds_stacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(preds_all)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "multilabel_confusion_matrix_803": {
                "variable": {
                    "value": "mcm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "related_stacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(related_gt)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "(preds_stacked.max(axis=1, keepdims=1) == preds_stacked).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_781": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_stacked.argmax(1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_stacked.argmax(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_784": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_stacked.argmax(1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_stacked.argmax(1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_5": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=[h, w], mode=mode, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "int(self.fixed_batch['points'][i][j]['rx'] * cfg.DATASET.CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "int(coord[j, 1] * cfg.DATASET.CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_164": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "self.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_665": {
                "variable": {
                    "value": "(masks_conf, masks_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_835": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "visual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[image_norm]",
                            "List"
                        ],
                        [
                            "[image_norm]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_867": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "visual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[image_norm]",
                            "List"
                        ],
                        [
                            "[image_norm]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_156": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_157": {
                "variable": {
                    "value": "self.criterion_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.criterion_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_170": {
                "variable": {
                    "value": "self.fixed_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.fixed_batch_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_387": {
                "variable": {
                    "value": "cls_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_out.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_535": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_692": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_748": {
                "variable": {
                    "value": "cls_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_raw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "modified_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, feature[1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_271": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image['1'], image['2']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "related_labels",
                            "variable"
                        ],
                        [
                            "torch.cat(gt_labels, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([gt_labels, gt_labels], 0)",
                            "Call"
                        ],
                        [
                            "gt_labels[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(gt_labels, 0)",
                            "Call"
                        ],
                        [
                            "gt_labels[0]",
                            "Subscript"
                        ],
                        [
                            "gt_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "related_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "related_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(related_labels, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([related_labels, related_labels], 0)",
                            "Call"
                        ],
                        [
                            "related_labels[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(related_labels, 0)",
                            "Call"
                        ],
                        [
                            "related_labels[0]",
                            "Subscript"
                        ],
                        [
                            "related_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "paired_image_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image[j:j + 1] for j in range(cfg.TRAIN.BATCH_SIZE) if corr[j]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "paired_image_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image[j + cfg.TRAIN.BATCH_SIZE:j + 1 + cfg.TRAIN.BATCH_SIZE] for j in range(cfg.TRAIN.BATCH_SIZE) if corr[j]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "paired_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[paired_image_1, paired_image_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image['1'], image['2']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "related_labels",
                            "variable"
                        ],
                        [
                            "torch.cat(gt_labels, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([gt_labels, gt_labels], 0)",
                            "Call"
                        ],
                        [
                            "gt_labels[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(gt_labels, 0)",
                            "Call"
                        ],
                        [
                            "gt_labels[0]",
                            "Subscript"
                        ],
                        [
                            "gt_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "related_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "related_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(related_labels, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([related_labels, related_labels], 0)",
                            "Call"
                        ],
                        [
                            "related_labels[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(related_labels, 0)",
                            "Call"
                        ],
                        [
                            "related_labels[0]",
                            "Subscript"
                        ],
                        [
                            "related_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_666": {
                "input": {
                    "value": "masks_conf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_861": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks['full']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "modified_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, feature[1:].repeat(self.num_negative, 1, 1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_240": {
                "variable": {
                    "value": "perm_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "b // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "(self.num_negative,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "modified_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature[0, i].unsqueeze(0), feature[1, i].unsqueeze(0), feature[1, perm_rand])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_245": {
                "variable": {
                    "value": "coord[2:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_negative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_268": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modified_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([feature, feature[1:]])",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, feature[1:].repeat(self.num_negative, 1, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "feature",
                            "variable"
                        ],
                        [
                            "torch.cat((feature[0, i].unsqueeze(0), feature[1, i].unsqueeze(0), feature[1, perm_rand]))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "torch.flip(coord, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_270": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modified_feature[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.flip(coord, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image['1'], image['2']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, gt_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "related_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[related_labels, related_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_406": {
                "obj": {
                    "value": "self.fixed_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.fixed_batch_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_458": {
                "variable": {
                    "value": "min_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat[0].min()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_743": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_908": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, coord[1:2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_274": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks['feature']",
                            "Subscript"
                        ],
                        [
                            "feature.reshape(2, b // 2, c, h, w)",
                            "Call"
                        ],
                        [
                            "masks['feature'].cpu()",
                            "Call"
                        ],
                        [
                            "masks['feature'].detach()",
                            "Call"
                        ],
                        [
                            "masks['feature'].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_553": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_560": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature[k:k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.flip(coord, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_249": {
                "*size": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_256": {
                "variable": {
                    "value": "coord[2:2 + self.num_negative // 2, 0, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_negative // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_258": {
                "variable": {
                    "value": "coord[2 + self.num_negative // 2:, 0, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_negative // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_268": {
                "input": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2]])",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3)[:1].contiguous()",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_270": {
                "input": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2]])",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3)[:1].contiguous()",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_455": {
                "input": {
                    "value": "feature[k] - selected_feature[:, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_459": {
                "input": {
                    "value": "heat[0].max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_575": {
                "variable": {
                    "value": "cls_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_out.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_591": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_604": {
                "variable": {
                    "value": "min_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat[0].min()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_600": {
                "input": {
                    "value": "feature[k] - selected_feature[:, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_605": {
                "input": {
                    "value": "heat[0].max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_615": {
                "tensors": {
                    "value": "(heat[0], heat[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_635": {
                "tensors": {
                    "value": "[colormap[0], colormap[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_255": {
                "*size": {
                    "value": "self.num_negative // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "self.num_negative // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "coord.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_560": {
                "input": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.cat([coord, coord[1:2]])",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([coord, coord[1:2].repeat(self.num_negative, 1, 1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ],
                        [
                            "coord.reshape(1, -1, 2, 2).permute(2, 0, 1, 3)[:1].contiguous()",
                            "Call"
                        ],
                        [
                            "coord * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(list(p))",
                            "Call"
                        ],
                        [
                            "coord.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "sklearn": {
            "average_precision_score_139": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "base_trainer.py": {
        "torch": {
            "zeros_140": {
                "variable": {
                    "value": "x_all_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "x_all_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h + 85",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_248": {
                "variable": {
                    "value": "(masks_conf, masks_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "SummaryWriter_55": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_56": {
                "variable": {
                    "value": "self.writer_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, 'val')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_58": {
                "variable": {
                    "value": "self.writer_val_easy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir_val_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, 'val_easy')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "upd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(cfg.BETA1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "variable": {
                    "value": "predict_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_116": {
                "variable": {
                    "value": "upd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "im_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(im).astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.array(im).astype(np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "ndarray": {
                    "value": "im_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(im).astype(np.float)",
                            "Call"
                        ],
                        [
                            "np.array(im).astype(np.float)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/__init__.py": {
        "torch": {
            "DataLoader_28": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cls(cfg, args.export_set, test_mode)",
                            "Call"
                        ],
                        [
                            "dataset_cls(cfg, split, test_mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/pascal_voc.py": {
        "torch": {
            "zeros_189": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.NUM_CLASS - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/pascal_voc_ms.py": {
        "torch": {
            "zeros_80": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.NUM_CLASS - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "pads",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/transforms.py": {
        "torch": {
            "arange_146": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_149": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.hflip(mask)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).type_as(gt_labels)",
                            "Call"
                        ],
                        [
                            "torch.eq(mask, gt_labels).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, 21)",
                            "Call"
                        ],
                        [
                            "gt_labels.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/wikiscenes_corr.py": {
        "torch": {
            "zeros_215": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.NUM_CLASS - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.NUM_CLASS - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "infer_val.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetClass(args.infer_list, cfg.TEST, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TEST.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(cfg.NET, num_classes=cfg.TEST.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "cls_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_raw",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "losses/__init__.py": {
        "torch": {
            "interpolate_52": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=pseudo_gt.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pseudo_gt.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=pseudo_gt.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pseudo_gt, 1)",
                            "Call"
                        ],
                        [
                            "mask_gt + (1 - weight) * ignore_index",
                            "BinOp"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "class_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1352, 874, 1050, 629, 1063, 932, 1029, 957, 956, 949.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_31": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(total - class_size) / class_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multilabel_margin_loss_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_idx - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.argmax(y, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_13": {
                "start": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/base_net.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "weights_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_weights",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/mobilenet.py": {
        "torch": {
            "Sequential_86": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.adaptive_avg_pool2d(x, (1, 1)).reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/resnet38d.py": {
        "torch": {
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_43": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_66": {
                "variable": {
                    "value": "self.dropout_2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_branch2b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_70": {
                "variable": {
                    "value": "self.dropout_2b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv_branch2b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/resnets.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/vgg16d.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "fc6_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "fc6_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_33": {
                "variable": {
                    "value": "self.drop6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/mods/aspp.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.atrous_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_36": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/mods/gci.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.fc_deep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(256, 512, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.fc_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(256, 256, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(256, 256, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._adin_conv(x, attrs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/mods/pamr.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_affs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "(m * x).sum(2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B * K, 1, H, W)",
                            "Call"
                        ],
                        [
                            "super(LocalStDev, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(LocalAffinityAbs, self).forward(x)",
                            "Call"
                        ],
                        [
                            "-self.aff_x(x) / (1e-08 + 0.1 * x_std)",
                            "BinOp"
                        ],
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_43": {
                "input": {
                    "value": "self.weight_check.eq(self.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B * K, 1, H, W)",
                            "Call"
                        ],
                        [
                            "super(LocalStDev, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(LocalAffinityAbs, self).forward(x)",
                            "Call"
                        ],
                        [
                            "-self.aff_x(x) / (1e-08 + 0.1 * x_std)",
                            "BinOp"
                        ],
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[d] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "x_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [d] * 4, mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dilations",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B * K, 1, H, W)",
                            "Call"
                        ],
                        [
                            "super(LocalStDev, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(LocalAffinityAbs, self).forward(x)",
                            "Call"
                        ],
                        [
                            "-self.aff_x(x) / (1e-08 + 0.1 * x_std)",
                            "BinOp"
                        ],
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/mods/sg.py": {
        "torch": {
            "ones_like_28": {
                "variable": {
                    "value": "self._mask_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1 - alpha_rate * x2) / max(1e-08, 1 - alpha_rate)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_31": {
                "input": {
                    "value": "self._mask_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "alpha_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/stage_net.py": {
        "torch": {
            "interpolate_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=[h, w], mode=mode, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "self.forward_backbone(y)",
                            "Call"
                        ],
                        [
                            "self.forward_backbone(y)",
                            "Call"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ],
                        [
                            "self.fc8_x(torch.cat([x_up, x2_x], 1))",
                            "Call"
                        ],
                        [
                            "self.sg(x, x2, alpha_rate=self.cfg.SG_PSI)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([bg, x], 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "lowest",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.view(bs, c, -1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=pseudo_gt.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pseudo_gt.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "variable": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask > mask_max).type_as(mask)",
                            "Call"
                        ],
                        [
                            "(1 - ambiguous) * pseudo_gt",
                            "BinOp"
                        ],
                        [
                            "pseudo_gtmask(masks_dec).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_81": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.view(bs, c, -1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=pseudo_gt.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pseudo_gt, 1)",
                            "Call"
                        ],
                        [
                            "mask_gt + (1 - weight) * ignore_index",
                            "BinOp"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_30": {
                "input": {
                    "value": "c + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fan_out()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.cls_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cls_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.mask_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_156": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc8(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(logits, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.relu(masks)",
                            "Call"
                        ],
                        [
                            "masks.view(b, c, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.cfg.BG_SCORE * bg, masks], 1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_168": {
                "variable": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.cfg.BG_SCORE * bg, masks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_198": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(logits, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.relu(masks)",
                            "Call"
                        ],
                        [
                            "masks.view(b, c, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.cfg.BG_SCORE * bg, masks], 1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.fc8_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(256, 48, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.fc8_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(304, 256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(256, num_classes - 1, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_270": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(im, mask.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "mask.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_321": {
                "variable": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bg, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=[h, w], mode=mode, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "self.forward_backbone(y)",
                            "Call"
                        ],
                        [
                            "self.forward_backbone(y)",
                            "Call"
                        ],
                        [
                            "self.aspp(x)",
                            "Call"
                        ],
                        [
                            "self.fc8_x(torch.cat([x_up, x2_x], 1))",
                            "Call"
                        ],
                        [
                            "self.sg(x, x2, alpha_rate=self.cfg.SG_PSI)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([bg, x], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "out_feature[multi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_feature['conv3'], out_feature['decoder']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_373": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(logits, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.relu(masks)",
                            "Call"
                        ],
                        [
                            "masks.view(b, c, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.cfg.BG_SCORE * bg, masks], 1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_380": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(logits, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.relu(masks)",
                            "Call"
                        ],
                        [
                            "masks.view(b, c, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.cfg.BG_SCORE * bg, masks], 1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self._rescale_and_clean(masks, y, labels)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=image.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model_ft.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_134": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_263": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_298": {
                "tensors": {
                    "value": "[x_up, x2_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model_ft.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_421": {
                "input": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_ft(y)",
                            "Call"
                        ],
                        [
                            "self.forward_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_1[:, 1:] + cls_2[:, 1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout2d_136": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "variable": {
                    "value": "self.model_ft.classifier[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.model_ft.classifier[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "opts.py": {
        "torch": {
            "set_num_threads_67": {
                "int": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_num_threads_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_threads_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/checkpoints.py": {
        "torch": {
            "save_140": {
                "obj": {
                    "value": "data[d].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_full_path(fn)",
                            "Call"
                        ],
                        [
                            "self._get_full_path(fn)",
                            "Call"
                        ],
                        [
                            "self._get_full_path(fn)",
                            "Call"
                        ],
                        [
                            "self._get_full_path(fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_100": {
                "f": {
                    "value": "paths[name][d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/inference_tools.py": {
        "torch": {
            "zeros_172": {
                "variable": {
                    "value": "masks_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_classes, *imsize_hw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "imsize_hw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "all_201": {
                "input": {
                    "value": "counts > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_224": {
                "variable": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gt_masks[b]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flip_116": {
                "variable": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cut(mask[0], pads[i]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_149": {
                "variable": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cut(mask[0], pads[i]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_242": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[0]",
                            "Subscript"
                        ],
                        [
                            "mask.flip(-1)",
                            "Call"
                        ],
                        [
                            "mask_batch[b]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_112": {
                "input": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cut(mask[0], pads[i]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize_hw",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_145": {
                "input": {
                    "value": "mask_cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cut(mask[0], pads[i]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "F.interpolate(mask_cut, imsize_hw, mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(mask_cut, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize_hw",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}