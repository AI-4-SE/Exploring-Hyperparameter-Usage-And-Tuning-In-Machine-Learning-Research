{
    "ensemble.py": {
        "sklearn": {
            "f1_score_28": {
                "variable": {
                    "value": "f1_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "df_to_join['Labels'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "df_to_join[f'Argmaxed'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_51": {
                "variable": {
                    "value": "f1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "df_to_join['Labels'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "df_to_join[f'Argmaxed average'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_40": {
                "variable": {
                    "value": "f1_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "df_to_join['Labels'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "df_to_join[f'Argmaxed{index}'].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "general_utils.py": {
        "sklearn": {
            "f1_score_101": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(g_truths)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "where_62": {
                "variable": {
                    "value": "index_bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(input_ids != mask_id) * (input_ids != 1) * (input_ids != -100) * (input_ids != 2) * (input_ids != 3) * (input_ids != 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "index_bool.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(input_ids.shape[0], input_ids.shape[1]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_64": {
                "variable": {
                    "value": "index_bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_bool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(input_ids.shape[0], input_ids.shape[1]) * masking_percentage",
                            "BinOp"
                        ],
                        [
                            "torch.where((input_ids != mask_id) * (input_ids != 1) * (input_ids != -100) * (input_ids != 2) * (input_ids != 3) * (input_ids != 0), index_bool.float().to(device), torch.zeros(input_ids.shape[0], input_ids.shape[1]).to(device))",
                            "Call"
                        ],
                        [
                            "index_bool.to(device)",
                            "Call"
                        ],
                        [
                            "torch.mul(index_bool, atttention_mask)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(index_bool).bool()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atttention_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bernoulli_65": {
                "variable": {
                    "value": "index_bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_bool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(input_ids.shape[0], input_ids.shape[1]) * masking_percentage",
                            "BinOp"
                        ],
                        [
                            "torch.where((input_ids != mask_id) * (input_ids != 1) * (input_ids != -100) * (input_ids != 2) * (input_ids != 3) * (input_ids != 0), index_bool.float().to(device), torch.zeros(input_ids.shape[0], input_ids.shape[1]).to(device))",
                            "Call"
                        ],
                        [
                            "index_bool.to(device)",
                            "Call"
                        ],
                        [
                            "torch.mul(index_bool, atttention_mask)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(index_bool).bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_61": {
                "*size": {
                    "value": "input_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input_ids.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "input_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input_ids.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "modeling.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "region_country_eval.py": {
        "sklearn": {
            "f1_score_82": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(region_preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(region_preds))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "region_country_eval_beam.py": {
        "sklearn": {
            "f1_score_106": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(region_preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(region_preds))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "region_country_eval_ensemble.py": {
        "sklearn": {
            "f1_score_41": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "run_regional_classifier_exp_eval.py": {
        "sklearn": {
            "f1_score_40": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_labels + [x[2] for x in all_preds]",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_preds + [x[1] for x in all_preds]",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AdaptersComponents/AdapterModules.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.down_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.up_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GELU_12": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(query_layer.unsqueeze(2), key_layer.transpose(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(attention_probs.unsqueeze(2), value_layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.list_of_adapter_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AdapterModule(config.hidden_size, 64) for _ in range(self.number_of_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "adapters_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adapters_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(adapters_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "input": {
                    "value": "query_layer.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_58": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "input": {
                    "value": "attention_probs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.value(value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdaptersComponents/BertLayerAdapter.py": {
        "torch": {}
    },
    "AdaptersComponents/BertLayerPlainAdapter.py": {
        "torch": {}
    },
    "HuggingFace_deployment/modeling.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayerPlainAdapters(config, config.bottleneck_dim) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_28": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HuggingFace_deployment/modeling_utils.py": {
        "torch": {
            "Dropout_8": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.down_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.up_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GELU_30": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, input_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "HuggingFace_deployment/vertical_attention.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.static",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "T.ones(self.Dout)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.Din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.Dout * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.value_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.hidden_size, self.hidden_size, bias=False) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "keys.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_logits / math.sqrt(self.hidden_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "values.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_180": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "shared_key_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_layers * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.key_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[shared_key_transform for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.key_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.hidden_size, self.hidden_size) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.key_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.value_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_128": {
                "tensors": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.static * mag.sigmoid() * sgn.tanh()",
                            "BinOp"
                        ],
                        [
                            "[self.key_c(tkey(xs)) if self.use_common_transform else tkey(xs) for (tkey, xs) in zip(self.key_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[self.value_c(tlvalue(xs)) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[tlvalue(xs) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.static * mag.sigmoid() * sgn.tanh()",
                            "BinOp"
                        ],
                        [
                            "[self.key_c(tkey(xs)) if self.use_common_transform else tkey(xs) for (tkey, xs) in zip(self.key_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[self.value_c(tlvalue(xs)) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[tlvalue(xs) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "self.Dout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_67": {
                "variable": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_layers * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_69": {
                "variable": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "other": {
                    "value": "T.pow(100, di)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_layers * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_69": {
                "input": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.arange(key_size)",
                            "Call"
                        ],
                        [
                            "(di // 2).type(T.float32) / key_size",
                            "BinOp"
                        ],
                        [
                            "T.div(1.0, T.pow(100, di))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "WebApp/WebAppLocal/main.py": {
        "torch": {
            "softmax_40": {
                "variable": {
                    "value": "logits_softmaxed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_utils.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([weight[t] for t in classes_list])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(samples_weight)",
                            "Call"
                        ],
                        [
                            "samples_weight.double()",
                            "Call"
                        ]
                    ]
                }
            },
            "WeightedRandomSampler_108": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([weight[t] for t in classes_list])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(samples_weight)",
                            "Call"
                        ],
                        [
                            "samples_weight.double()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(samples_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_class_label_ids, all_input_ids_w_masking, all_sentence_indices)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imbalance_handling_sampler",
                            "Name"
                        ],
                        [
                            "RandomSampler(dataset) if random_sampler else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[0] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[1] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[2] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "all_class_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[3] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "all_input_ids_w_masking",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[4] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "all_sentence_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[5] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_164": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_124": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_class_label_ids, all_input_ids_w_masking, all_sentence_indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deployment_script.py": {
        "torch": {
            "softmax_45": {
                "variable": {
                    "value": "logits_softmaxed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, input_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer_w_Adapters(config, args['bottleneck_dim'], args['current_adapter_to_train'], args['no_total_adapters'], args['stage_2_training'], args['use_adapt_after_fusion']) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MSELoss_96": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer_w_Adapters(config, args['bottleneck_dim'], args['current_adapter_to_train'], args['no_total_adapters'], args['stage_2_training'], args['use_adapt_after_fusion']) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer_w_PlainAdapters(config, args['bottleneck_dim'], args['current_adapter_to_train'], args['no_total_adapters'], args['stage_2_training'], args['use_adapt_after_fusion']) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer_w_PlainAdapters(config, args['bottleneck_dim'], args['current_adapter_to_train'], args['no_total_adapters'], args['stage_2_training'], args['use_adapt_after_fusion']) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/download_load_adapters.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "model_adapters",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/Users/mohamedgabr/Downloads/ar_houlsby_gelu/pytorch_adapter.bin'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "model2_state_dict_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "PATH2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/Users/mohamedgabr/Documents/NeuralDialectDetector/pytorch_model_MABERT/pytorch_model.bin'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/remove_classif_head.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "model_with_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "start_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./checkpoints_marbert/MARBERT_100/pytorch_model.bin'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_21": {
                "obj": {
                    "value": "model_with_head",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(start_model_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "end_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./checkpoints_marbert/MARBERT_100_1/pytorch_model.bin'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/weighted_sampling_trial.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "samples_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([weight[t] for t in target])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(samples_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((np.zeros(int(numDataPoints * 0.9), dtype=np.int32), np.ones(int(numDataPoints * 0.1), dtype=np.int32)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_26": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vatt/balanced_dropout.py": {
        "torch": {
            "softmax_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x.max() - x) / (x.max() - x.min())",
                            "BinOp"
                        ],
                        [
                            "1.0 - x",
                            "BinOp"
                        ],
                        [
                            "x / tt",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x)",
                            "Call"
                        ],
                        [
                            "freqs",
                            "Name"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vatt/vatt.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.static",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "T.ones(self.Dout)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.Din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.Dout * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.value_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.hidden_size, self.hidden_size, bias=False) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_104": {
                "variable": {
                    "value": "self.values_lnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "variable": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "keys.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "attention_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_logits / math.sqrt(self.hidden_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "values.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.key_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[shared_key_transform for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.key_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.hidden_size, self.hidden_size) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.key_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.value_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_127": {
                "tensors": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.static * mag.sigmoid() * sgn.tanh()",
                            "BinOp"
                        ],
                        [
                            "[self.key_c(tkey(xs)) if self.use_common_transform else tkey(xs) for (tkey, xs) in zip(self.key_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[self.value_c(tlvalue(xs)) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[tlvalue(xs) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "tensors": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.static * mag.sigmoid() * sgn.tanh()",
                            "BinOp"
                        ],
                        [
                            "[self.key_c(tkey(xs)) if self.use_common_transform else tkey(xs) for (tkey, xs) in zip(self.key_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[self.value_c(tlvalue(xs)) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ],
                        [
                            "[tlvalue(xs) for (tlvalue, xs) in zip(self.value_transforms, Xs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "self.Dout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_layers * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_71": {
                "variable": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "other": {
                    "value": "T.pow(100, di)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_layers * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_71": {
                "input": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T.arange(key_size)",
                            "Call"
                        ],
                        [
                            "(di // 2).type(T.float32) / key_size",
                            "BinOp"
                        ],
                        [
                            "T.div(1.0, T.pow(100, di))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}