{
    "models/convnet.py": {
        "tensorflow": {
            "Adam_19": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Input_26": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.img_rows, self.img_cols, self.img_chans)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_46": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(self.img_rows, self.img_cols, self.img_chans))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(units=self.n_classes, activation='softmax')(latent)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_58": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "PATH_MODEL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DIR_ASSETS + 'nn-model.hdf5'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_data_format_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_39": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_44": {
                "units": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Permute_30": {
                "dims": {
                    "value": "(3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/tree.py": {
        "tensorflow": {
            "ExponentialMovingAverage_83": {
                "variable": {
                    "value": "self.ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tree.ema_win_size * 2 ** self.depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_95": {
                "variable": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(self.penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(self.penalty)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "variable": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Concatenate(axis=1)(weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_164": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_168": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_features,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_209": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_238": {
                "variable": {
                    "value": "init_indep_vars_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "independent_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if v not in ema_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variables_initializer_239": {
                "variable": {
                    "value": "init_ema_vars_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "ema_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'ExponentialMovingAverage' in v.name and 'Const' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "self.leaf_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.pathprob * leaf_ce",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_nan_96": {
                "x": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "input": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Concatenate_124": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_125": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_128": {
                "fn": {
                    "value": "lambda x: opinions[x]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfk.argmax(weights, axis=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_129": {
                "function": {
                    "value": "from_keras_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'elems': elems}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dense_48": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'dense_' + self.id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "TruncatedNormal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_68": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'prob_' + self.id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Activation_71": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'pdist_' + self.id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "self.ema_P * self.ema_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "self.ema_P",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "self.alpha + tree.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "x": {
                    "value": "1.0 - self.alpha + tree.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "y * tf.log(tree.eps + self.prob)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_198": {
                "control_inputs": {
                    "value": "self.ema_apply_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_199": {
                "x": {
                    "value": "self.eps + self.loss_leaves",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TruncatedNormal_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomNormal_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TruncatedNormal_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "tree.eps + self.prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RandomNormal_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "tensorflow": {
            "ConfigProto_11": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_14": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reset_default_graph_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}