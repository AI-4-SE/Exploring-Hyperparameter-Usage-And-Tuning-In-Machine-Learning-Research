{
    "dist_train.py": {
        "torch": {
            "device_count_263": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_218": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.build_model(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_227": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_213": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/build_optimizer.py": {
        "torch": {
            "SGD_6": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/imagenet1k.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_dirs, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=val_dirs, transform=transform_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "val_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.val_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_48": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_dirs, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_65": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=val_dirs, transform=transform_val)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/utils.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "self.eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "self.eigvec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/metrics.py": {
        "torch": {}
    },
    "lib/models/LESA.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "col_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, col_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "flat_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, l - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "flat_x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flat_x, flat_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_31": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h x y d, r d -> b h x y r",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h d (x y) -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "torch.split(qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW), [self.qk_planes, self.qk_planes, self.v_planes], dim=2)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.qkv_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_planes + self.branch_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "self.bn_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_planes + self.branch_planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.x_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*x_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.branch_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.reasoning",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*r_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*proj_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "split_223": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.qk_planes, self.qk_planes, self.v_planes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci, bgcj->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h d (x y) -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "torch.split(qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW), [self.qk_planes, self.qk_planes, self.v_planes], dim=2)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_254": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qk",
                            "variable"
                        ],
                        [
                            "self.bn_similarity(stacked_similarity)",
                            "Call"
                        ],
                        [
                            "qk",
                            "variable"
                        ],
                        [
                            "self.bn_similarity(torch.cat([stacked_similarity, qr], dim=1)).view(N, 2, self.groups, HW, HW).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([qk, qr, kr], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn_similarity(stacked_similarity).view(N, 3, self.groups, HW, HW).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_255": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,bgcj->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_296": {
                "variable": {
                    "value": "gate_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unary, binary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(r)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "groups * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "variable": {
                    "value": "self.bn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.branch_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.pe_dim, kernel_size * 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_173": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size ** 2",
                            "BinOp"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_174": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size ** 2",
                            "BinOp"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_174": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_193": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_215": {
                "equation": {
                    "value": "bgij, cij -> bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h d (x y) -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "torch.split(qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW), [self.qk_planes, self.qk_planes, self.v_planes], dim=2)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "sve",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,cij->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "stacked_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sv, sve]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.branch_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "groups * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "InChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch_planes * 2",
                            "BinOp"
                        ],
                        [
                            "int(InChannels / lesa.df_channel_shrink[n_idx])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "TarPlanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ReaPlanes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "lesa.df_kernel_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "groups": {
                    "value": "lesa.df_group[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "TarPlanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ReaPlanes",
                            "variable"
                        ]
                    ]
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "self.rel_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.fmap_size * 2 - 1, self.pe_dim) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.rel_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.fmap_size * 2 - 1, self.pe_dim) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.branch_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "lesa.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.branch_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.branch_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "InChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch_planes * 2",
                            "BinOp"
                        ],
                        [
                            "int(InChannels / lesa.df_channel_shrink[n_idx])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(InChannels / lesa.df_channel_shrink[n_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "lesa.df_kernel_size[n_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(lesa.df_kernel_size[n_idx] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "lesa.df_group[n_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "int(InChannels / lesa.df_channel_shrink[n_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "self.pe_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "kernel_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_238": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.flatten_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_242": {
                "variable": {
                    "value": "(q_embedding, k_embedding, v_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.relative, 1, self.flatten_index).view(self.qk_planes * 2 + self.v_planes, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.qk_planes, self.qk_planes, self.v_planes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_247": {
                "variable": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b h d (x y) -> b h x y d', x=h, y=w)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b h x y d -> b h y x d')",
                            "Call"
                        ],
                        [
                            "torch.split(qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW), [self.qk_planes, self.qk_planes, self.v_planes], dim=2)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_248": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(qkv.reshape(N, self.groups, self.qk_planes * 2 + self.v_planes, HW), [self.qk_planes, self.qk_planes, self.v_planes], dim=2)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[qk, qr, kr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_184": {
                "*size": {
                    "value": "self.fmap_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.pe_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_187": {
                "*size": {
                    "value": "self.fmap_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.pe_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "[stacked_similarity, qr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/resnet.py": {
        "torch": {
            "randn_287": {
                "variable": {
                    "value": "rand_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_180": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_290": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet50()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "ResNet(cfg, block, layers, **kwargs)",
                            "Call"
                        ],
                        [
                            "_resnet('resnet50', cfg, Bottleneck, [3, 4, 6, 3], pretrained, progress, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "unsqueeze_43": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_44": {
                "variable": {
                    "value": "onehot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_50": {
                "input": {
                    "value": "torch.sum(-target * F.log_softmax(pred, dim=-1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "-target * F.log_softmax(pred, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "{'net': model.state_dict(), 'optim': optimizer.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "{'net': model.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(pth))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ],
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_124": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(pth))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_153": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(pth))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ],
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_155": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(pth))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "{'net': model.state_dict(), 'optim': optimizer.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "{'net': model.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dirs, '{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_163": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_50": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataParallel_251": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.build_model(args, cfg=config)",
                            "Call"
                        ],
                        [
                            "lib.build_model(args, cfg=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_237": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_265": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_183": {
                "variable": {
                    "value": "rand_index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}