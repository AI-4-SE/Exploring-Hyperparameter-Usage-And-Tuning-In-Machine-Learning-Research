{
    "crossmodalretrieval_featuremaps.py": {
        "sklearn": {
            "normalize_271": {
                "variable": {
                    "value": "productvectnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(product, axis=2)",
                            "Call"
                        ],
                        [
                            "np.sum(videoweighted, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_273": {
                "variable": {
                    "value": "productvectnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(audio_features, axis=2)",
                            "Call"
                        ],
                        [
                            "np.sum(audioweighted, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_122": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape1[0], datashape1[1], datashape1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape2[0], datashape2[1], datashape2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_171": {
                "variable": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acousticlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits1",
                            "variable"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_177": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_195": {
                "variable": {
                    "value": "logits_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_201": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_163": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_178": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_178": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "crossmodalretrieval_featuremaps_old.py": {
        "sklearn": {
            "normalize_274": {
                "variable": {
                    "value": "productvectnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(product, axis=2)",
                            "Call"
                        ],
                        [
                            "np.sum(videoweighted, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_276": {
                "variable": {
                    "value": "productvectnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(audio_features, axis=2)",
                            "Call"
                        ],
                        [
                            "np.sum(audioweighted, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_124": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape1[0], datashape1[1], datashape1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape2[0], datashape2[1], datashape2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 14]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "person",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_174": {
                "variable": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acousticlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits1",
                            "variable"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "visual_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_180": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_198": {
                "variable": {
                    "value": "logits_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_181": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_181": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "knn.py": {
        "sklearn": {
            "KNeighborsClassifier_137": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "bestk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "k",
                            "variable"
                        ]
                    ]
                }
            },
            "KNeighborsClassifier_101": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_neighbors",
                            "variable"
                        ],
                        [
                            "n_neighbors",
                            "variable"
                        ]
                    ]
                }
            },
            "KNeighborsClassifier_122": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_neighbors",
                            "variable"
                        ],
                        [
                            "n_neighbors",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/trainer.py": {
        "sklearn": {
            "confusion_matrix_361": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((label, label1), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((pred, pred1), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_50": {
                "variable": {
                    "value": "self.cross_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cross_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_total_loss_55": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_61": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_66": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_variables_to_restore(exclude=to_exclude)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.model.output, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variables_initializer_99": {
                "variable": {
                    "value": "optimizer_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[optimizer.get_slot(var, name) for name in optimizer.get_slot_names() for var in self.model.train_vars if var is not None]",
                            "ListComp"
                        ],
                        [
                            "self._get_optimizer_variables(self.optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape[0], self.shape[1], self.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.model.output, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_67": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_166": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(next_batch[3], multiples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape[0], self.shape[1], self.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_333": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "self.model.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(next_batch[3], multiples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape[0], self.shape[1], self.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "self.model.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_166": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_step_176": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_222": {
                "value": {
                    "value": "[tf.Summary.Value(tag='valid_loss', simple_value=total_loss), tf.Summary.Value(tag='valid_accuracy', simple_value=total_accuracy)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_309": {
                "input": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.nr_frames]",
                            "List"
                        ],
                        [
                            "[1, FLAGS.sample_length * _FRAMES_PER_SECOND]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_333": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_317": {
                "input": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.nr_frames]",
                            "List"
                        ],
                        [
                            "[1, FLAGS.sample_length * _FRAMES_PER_SECOND]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_167": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_333": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_step_204": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer_andres.py": {
        "sklearn": {
            "confusion_matrix_360": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "logits_transfer",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_transfer / temperature_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "transferweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits_transfer, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_63": {
                "variable": {
                    "value": "self.cross_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_2.output",
                            "Attribute"
                        ]
                    ]
                },
                "weights": {
                    "value": "1.0 - self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scope": {
                    "value": "cross_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_69": {
                "variable": {
                    "value": "self.dist_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "transferweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(logits_transfer, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_2.output",
                            "Attribute"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "dist_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_total_loss_75": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_81": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_85": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_86": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_variables_to_restore(exclude=to_exclude)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "acoustic_tr_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.transfer_shape[0], self.transfer_shape[1], self.transfer_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "acoustic_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_2[0], self.shape_2[1], self.shape_2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_48": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "logits_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_transfer.output",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(logits_transfer / temperature_value)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_128": {
                "variable": {
                    "value": "optimizer_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[optimizer.get_slot(var, name) for name in optimizer.get_slot_names() for var in self.train_vars if var is not None]",
                            "ListComp"
                        ],
                        [
                            "self._get_optimizer_variables(self.optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_180": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_338": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_89": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_180": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_step_192": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_242": {
                "value": {
                    "value": "[tf.Summary.Value(tag='valid_loss', simple_value=total_loss), tf.Summary.Value(tag='valid_accuracy', simple_value=total_accuracy)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_338": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_181": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_338": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_step_224": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "computeTUTfeatures.py": {
        "tensorflow": {
            "placeholder_76": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape[0], datashape[1], datashape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.network['hear_net/fc2']",
                            "Subscript"
                        ],
                        [
                            "nn_ops.relu(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_58": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_67": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_99": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_110": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables(model.scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_100": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_100": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "convert_data.py": {
        "tensorflow": {
            "Feature_116": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_120": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_116": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_120": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_250": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classes': _int64_feature(classes), 'location': _int64_feature(location)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FeatureLists_251": {
                "variable": {
                    "value": "feature_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_list": {
                    "value": "feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SequenceExample_252": {
                "variable": {
                    "value": "sequence_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature=feature)",
                            "Call"
                        ]
                    ]
                },
                "feature_lists": {
                    "value": "feature_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.FeatureLists(feature_list=feature_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_210": {
                "path": {
                    "value": "out_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/Data_{:0>3d}.tfrecord'.format(out_data_dir, idx + 1)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "tf.python_io.TFRecordOptions(compression_type=tf.python_io.TFRecordCompressionType.GZIP)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordOptions_210": {
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FeatureList_237": {
                "feature": {
                    "value": "[_bytes_feature(audio_image.data) for audio_image in audio_images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FeatureList_242": {
                "feature": {
                    "value": "[_bytes_feature(audio_sample.data) for audio_sample in audio_data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FeatureList_247": {
                "feature": {
                    "value": "[_bytes_feature(video_image.data) for video_image in video_images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/actions_data.py": {
        "tensorflow": {
            "convert_to_tensor_62": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_132": {
                "variable": {
                    "value": "global_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(min_value), axis=0), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_140": {
                "variable": {
                    "value": "global_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(max_value), axis=0), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "threshold_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000.0",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, _NUMBER_OF_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_162": {
                "variable": {
                    "value": "global_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_170": {
                "variable": {
                    "value": "global_standard_deviation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(std), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_234": {
                "variable": {
                    "value": "(parsed_context_features, parsed_sequence_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "sequence_example_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classes': tf.FixedLenFeature([], tf.int64), 'location': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_238": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "location",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['location']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_287": {
                "variable": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.total_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.number_of_crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_288": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.number_of_crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_293": {
                "variable": {
                    "value": "cropped_files",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda o: tf.slice(files, tf.convert_to_tensor([o]), [self.sample_length])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(shapes), dtype=sizes.dtype, maxval=sizes.dtype.max, seed=3) % limit",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "files.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_302": {
                "variable": {
                    "value": "action_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(tf.gather(action, tf.range(self.sample_length, delta=self.sample_length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "_NUM_ACTIONS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "one_hot_304": {
                "variable": {
                    "value": "location_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(tf.gather(location, tf.range(self.sample_length, delta=self.sample_length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "_NUM_LOCATIONS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "61",
                            "int"
                        ]
                    ]
                }
            },
            "constant_338": {
                "variable": {
                    "value": "n_to_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.nr_frames]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_340": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample_mask(num_frames, n_to_sample)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.expand_dims(indexes, 1), updates, tf.expand_dims(num_frames, 0))",
                            "Call"
                        ],
                        [
                            "tf.equal(mask, compare)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_345": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(video_images)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_346": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linspace(0.0, tf.to_float(end), sample_size[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_349": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_350": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(indexes, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(sample_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.expand_dims(num_frames, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "compare",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_frames]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_354": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample_mask(num_frames, n_to_sample)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.expand_dims(indexes, 1), updates, tf.expand_dims(num_frames, 0))",
                            "Call"
                        ],
                        [
                            "tf.equal(mask, compare)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "compare",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([num_frames], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_360": {
                "variable": {
                    "value": "audio_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self._build_wav_py_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[audio_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_386": {
                "variable": {
                    "value": "audio_images_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(audio_images, self.threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_393": {
                "variable": {
                    "value": "audio_images_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_images, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.global_max, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_401": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.global_max, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_409": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_standard_deviation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_423": {
                "variable": {
                    "value": "processed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "prepare_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_429": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_442": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_444": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_448": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_449": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_451": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_469": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_471": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_472": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_473": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_475": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_479": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_480": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_506": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stft_515": {
                "variable": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "audio_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(self._build_wav_py_function, [audio_samples], tf.float32)",
                            "Call"
                        ],
                        [
                            "librosa.core.resample(audio_data, audio_data.shape[0] / self.sample_length, self.sample_rate)",
                            "Call"
                        ],
                        [
                            "audio_wav / abs(max(audio_wav.min(), audio_wav.max(), key=abs))",
                            "BinOp"
                        ],
                        [
                            "audio_wav * 256.0",
                            "BinOp"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "self.frame_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "self.frame_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "self.fft_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_518": {
                "variable": {
                    "value": "magnitude_spectrograms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.abs(audio_stfts)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "audio_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "audio_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_245": {
                "variable": {
                    "value": "audio_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_247": {
                "variable": {
                    "value": "audio_image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['audio/image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_249": {
                "variable": {
                    "value": "audio_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, audio_height, audio_width, audio_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_image_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['audio/image'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "audio_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, audio_height, audio_width, audio_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_251": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_up_down_252": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_258": {
                "variable": {
                    "value": "num_mics",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_data/mics']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_259": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_data/samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_261": {
                "variable": {
                    "value": "audio_sample_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['audio/data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "audio_sample_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_sample_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['audio/data'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "audio_sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_270": {
                "variable": {
                    "value": "video_image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['video/image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "video_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_273": {
                "variable": {
                    "value": "video_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_274": {
                "variable": {
                    "value": "video_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "video_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, video_height, video_width, video_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_image_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['video/image'], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "video_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, video_height, video_width, video_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "reshaped_audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 36, 48, _NUMBER_OF_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "reshaped_audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "reshaped_audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, _NUMBER_OF_SAMPLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "reshaped_audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "reshaped_video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 224, 298, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "reshaped_video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_510": {
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(image, num_channels, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(min_value), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(max_value), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_163": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_171": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(std), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbatch_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_200": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_201": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_303": {
                "input": {
                    "value": "tf.gather(action, tf.range(self.sample_length, delta=self.sample_length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_305": {
                "input": {
                    "value": "tf.gather(location, tf.range(self.sample_length, delta=self.sample_length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_337": {
                "input": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_346": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.to_float(end)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "sample_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "input": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.linspace(0.0, tf.to_float(end), sample_size[0]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_351": {
                "input": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(video_images)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_386": {
                "x": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_393": {
                "x": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_394": {
                "x": {
                    "value": "self.global_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_401": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_402": {
                "x": {
                    "value": "self.global_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_409": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_475": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_518": {
                "x": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.signal.stft(audio_wav, frame_length=self.frame_length, frame_step=self.frame_step, fft_length=self.fft_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbatch_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_84": {
                "filenames": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "GZIP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_290": {
                "input": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.total_length, dtype=tf.int32, shape=[self.number_of_crops])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_293": {
                "input_": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.convert_to_tensor([o])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.sample_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_303": {
                "params": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(parsed_context_features['classes'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.sample_length, delta=self.sample_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_305": {
                "params": {
                    "value": "location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(parsed_context_features['location'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.sample_length, delta=self.sample_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_347": {
                "x": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(num_frames, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "tf.convert_to_tensor(min_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "tf.convert_to_tensor(max_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "tf.convert_to_tensor(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "tf.convert_to_tensor(std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_206": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_207": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_208": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_211": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_216": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_217": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_220": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_225": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_226": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_227": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_230": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_293": {
                "value": {
                    "value": "[o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_303": {
                "delta": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_305": {
                "delta": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_164": {
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_mean.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_172": {
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_std_dev.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_134": {
                "value": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_min.npy'.format(stats_dir)).clip(None, threshold_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_142": {
                "value": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_max.npy'.format(stats_dir)).clip(None, threshold_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/actions_data_old.py": {
        "tensorflow": {
            "convert_to_tensor_64": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_133": {
                "variable": {
                    "value": "global_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(min_value), axis=0), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_141": {
                "variable": {
                    "value": "global_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(max_value), axis=0), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "threshold_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000.0",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_FRAMES_PER_SECOND * self.sample_length, 36, 48, _NUMBER_OF_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_163": {
                "variable": {
                    "value": "global_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_171": {
                "variable": {
                    "value": "global_standard_deviation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(std), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_236": {
                "variable": {
                    "value": "(parsed_context_features, parsed_sequence_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "sequence_example_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'action': tf.FixedLenFeature([], tf.int64), 'location': tf.FixedLenFeature([], tf.int64), 'subject': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_240": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['action']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "location",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['location']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "variable": {
                    "value": "subject",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['subject']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_290": {
                "variable": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.total_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.number_of_crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_291": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.number_of_crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_296": {
                "variable": {
                    "value": "cropped_files",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda o: tf.slice(files, tf.convert_to_tensor([o]), [self.sample_length])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(shapes), dtype=sizes.dtype, maxval=sizes.dtype.max, seed=3) % limit",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "files.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_305": {
                "variable": {
                    "value": "action_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(tf.gather(action, tf.range(self.sample_length, delta=self.sample_length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "_NUM_ACTIONS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "14",
                            "int"
                        ]
                    ]
                }
            },
            "one_hot_307": {
                "variable": {
                    "value": "location_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(tf.gather(location, tf.range(self.sample_length, delta=self.sample_length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "_NUM_LOCATIONS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "one_hot_309": {
                "variable": {
                    "value": "subject_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(tf.gather(subject, tf.range(self.sample_length, delta=self.sample_length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "_NUM_SUBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "int"
                        ]
                    ]
                }
            },
            "constant_343": {
                "variable": {
                    "value": "n_to_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.nr_frames]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_345": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample_mask(num_frames, n_to_sample)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.expand_dims(indexes, 1), updates, tf.expand_dims(num_frames, 0))",
                            "Call"
                        ],
                        [
                            "tf.equal(mask, compare)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_350": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(video_images)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_351": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linspace(0.0, tf.to_float(end), sample_size[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_354": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(indexes, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(sample_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.expand_dims(num_frames, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_358": {
                "variable": {
                    "value": "compare",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_frames]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_359": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample_mask(num_frames, n_to_sample)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.expand_dims(indexes, 1), updates, tf.expand_dims(num_frames, 0))",
                            "Call"
                        ],
                        [
                            "tf.equal(mask, compare)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "compare",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([num_frames], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_365": {
                "variable": {
                    "value": "audio_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self._build_wav_py_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[audio_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_391": {
                "variable": {
                    "value": "audio_images_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(audio_images, self.threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_398": {
                "variable": {
                    "value": "audio_images_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_images, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.global_max, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_407": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.global_max, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_415": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_standard_deviation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_430": {
                "variable": {
                    "value": "processed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "prepare_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_449": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_451": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_455": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_456": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_458": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_476": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_478": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_479": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_480": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_482": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_486": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_487": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_513": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "self._mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stft_523": {
                "variable": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "audio_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(self._build_wav_py_function, [audio_samples], tf.float32)",
                            "Call"
                        ],
                        [
                            "librosa.core.resample(audio_data, audio_data.shape[0] / self.sample_length, self.sample_rate)",
                            "Call"
                        ],
                        [
                            "audio_wav / abs(max(audio_wav.min(), audio_wav.max(), key=abs))",
                            "BinOp"
                        ],
                        [
                            "audio_wav * 256.0",
                            "BinOp"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "self.frame_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "self.frame_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "self.fft_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_526": {
                "variable": {
                    "value": "magnitude_spectrograms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.abs(audio_stfts)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_246": {
                "variable": {
                    "value": "audio_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "variable": {
                    "value": "audio_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_248": {
                "variable": {
                    "value": "audio_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_image/depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_250": {
                "variable": {
                    "value": "audio_image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['audio/image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "audio_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, audio_height, audio_width, audio_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_image_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['audio/image'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "audio_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, audio_height, audio_width, audio_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_254": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_up_down_255": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_261": {
                "variable": {
                    "value": "num_mics",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_data/mics']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_262": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['audio_data/samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_264": {
                "variable": {
                    "value": "audio_sample_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['audio/data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_266": {
                "variable": {
                    "value": "audio_sample_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_sample_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['audio/data'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "audio_sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_273": {
                "variable": {
                    "value": "video_image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_sequence_features['video/image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_275": {
                "variable": {
                    "value": "video_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_276": {
                "variable": {
                    "value": "video_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_277": {
                "variable": {
                    "value": "video_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "parsed_context_features['video/depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "video_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, video_height, video_width, video_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_image_decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_sequence_features['video/image'], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "video_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([-1, video_height, video_width, video_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "reshaped_audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 36, 48, _NUMBER_OF_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "reshaped_audio_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "reshaped_audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, _NUMBER_OF_SAMPLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "reshaped_audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "reshaped_video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 224, 298, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "reshaped_video_images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_517": {
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(image, num_channels, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(min_value), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(max_value), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(std), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbatch_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_201": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_202": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_203": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_306": {
                "input": {
                    "value": "tf.gather(action, tf.range(self.sample_length, delta=self.sample_length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_308": {
                "input": {
                    "value": "tf.gather(location, tf.range(self.sample_length, delta=self.sample_length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_310": {
                "input": {
                    "value": "tf.gather(subject, tf.range(self.sample_length, delta=self.sample_length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "video_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(video_image_decoded, video_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_351": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.to_float(end)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "sample_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_355": {
                "input": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.linspace(0.0, tf.to_float(end), sample_size[0]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_356": {
                "input": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(video_images)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_391": {
                "x": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_398": {
                "x": {
                    "value": "audio_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_image_decoded, audio_image_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.image.flip_up_down(audio_images)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_399": {
                "x": {
                    "value": "self.global_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_407": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_408": {
                "x": {
                    "value": "self.global_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_415": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(audio_sample_decoded, audio_sample_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.global_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_482": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_526": {
                "x": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.signal.stft(audio_wav, frame_length=self.frame_length, frame_step=self.frame_step, fft_length=self.fft_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbatch_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_86": {
                "filenames": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "GZIP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_293": {
                "input": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.total_length, dtype=tf.int32, shape=[self.number_of_crops])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_296": {
                "input_": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.convert_to_tensor([o])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.sample_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_306": {
                "params": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(parsed_context_features['action'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.sample_length, delta=self.sample_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_308": {
                "params": {
                    "value": "location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(parsed_context_features['location'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.sample_length, delta=self.sample_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_310": {
                "params": {
                    "value": "subject",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(parsed_context_features['subject'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.sample_length, delta=self.sample_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_352": {
                "x": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(num_frames, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_135": {
                "input": {
                    "value": "tf.convert_to_tensor(min_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "input": {
                    "value": "tf.convert_to_tensor(max_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "input": {
                    "value": "tf.convert_to_tensor(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "tf.convert_to_tensor(std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_208": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_209": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_210": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_213": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_218": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_219": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_222": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_227": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_228": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_229": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_232": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_296": {
                "value": {
                    "value": "[o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_306": {
                "delta": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_308": {
                "delta": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_310": {
                "delta": {
                    "value": "self.sample_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_165": {
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_mean.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_173": {
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_std_dev.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_135": {
                "value": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_min.npy'.format(stats_dir)).clip(None, threshold_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_143": {
                "value": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_max.npy'.format(stats_dir)).clip(None, threshold_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/tut_data.py": {
        "tensorflow": {
            "TFRecordDataset_66": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "cropped_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cropped_audio_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(audio, [min_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_127": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(one_hot, [self.number_of_crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.tile(one_hot, [crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, self.num_classes, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.number_of_crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(one_hot, [self.number_of_crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.tile(one_hot, [crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, self.num_classes, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "cropped_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cropped_audio_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(audio, [min_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_148": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(one_hot, [self.number_of_crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.tile(one_hot, [crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, self.num_classes, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[crops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(one_hot, [self.number_of_crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.tile(one_hot, [crops])",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot, [-1, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, self.num_classes, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_156": {
                "variable": {
                    "value": "audio_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'label': tf.FixedLenFeature([], tf.string), 'audio_raw': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_157": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "audio_features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_158": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "audio_features['audio_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(audio_features['label'], tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "cropped_audio_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(audio_features['audio_raw'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[min_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_165": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stft_171": {
                "variable": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "audio_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "frame_length": {
                    "value": "self.frame_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "self.frame_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "self.fft_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "variable": {
                    "value": "magnitude_spectrograms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.abs(audio_stfts)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_181": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.global_max, self.global_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_189": {
                "variable": {
                    "value": "audio_samples_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(audio_samples, self.global_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_standard_deviation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_51": {
                "variable": {
                    "value": "self.global_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_59": {
                "variable": {
                    "value": "self.global_standard_deviation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input=tf.expand_dims(input=tf.convert_to_tensor(std), axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[200, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unbatch_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_106": {
                "path": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_paths",
                            "Attribute"
                        ]
                    ]
                }
            },
            "FixedLenFeature_154": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_155": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_174": {
                "x": {
                    "value": "audio_stfts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.signal.stft(audio_wav, frame_length=self.frame_length, frame_step=self.frame_step, fft_length=self.fft_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_181": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_182": {
                "x": {
                    "value": "self.global_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_189": {
                "x": {
                    "value": "audio_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_124": {
                "input_": {
                    "value": "audio_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[tf.cast(index[i], dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[tf.cast(segment, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_145": {
                "input_": {
                    "value": "audio_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[tf.cast(index[i], dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[tf.cast(segment, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(mean), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "tf.expand_dims(input=tf.convert_to_tensor(std), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_124": {
                "x": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(self.sample_length * self.sample_rate).astype('int')",
                            "Call"
                        ],
                        [
                            "np.floor(self.sample_length * self.sample_rate).astype('int')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_145": {
                "x": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(self.sample_length * self.sample_rate).astype('int')",
                            "Call"
                        ],
                        [
                            "np.floor(self.sample_length * self.sample_rate).astype('int')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "tf.convert_to_tensor(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "tf.convert_to_tensor(std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_53": {
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_mean.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_61": {
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('{}/global_std_dev.npy'.format(stats_dir))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "extract_features_one.py": {
        "tensorflow": {
            "placeholder_108": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape[0], datashape[1], datashape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 14]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.network['embedding']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.network[8]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "model.network['hear_net/fc2']",
                            "Subscript"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_89": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_174": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_variables(model.scope)",
                            "Call"
                        ],
                        [
                            "slim.get_model_variables(model.scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.network['embedding']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.network[8]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "model.network['hear_net/fc2']",
                            "Subscript"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * 12, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.network['embedding']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.network[8]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "model.network['hear_net/fc2']",
                            "Subscript"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * 12, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_175": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.network['embedding']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.network[8]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(logits, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ],
                        [
                            "model.network['hear_net/fc2']",
                            "Subscript"
                        ],
                        [
                            "model.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * 12, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "GPUOptions_175": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "extract_features_product.py": {
        "tensorflow": {
            "placeholder_141": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape1[0], datashape1[1], datashape1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape2[0], datashape2[1], datashape2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "variable": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "innerdot * visuallogits",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_205": {
                "variable": {
                    "value": "productvectnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(product, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_206": {
                "variable": {
                    "value": "productvectnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(acousticlogits_reshape, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_191": {
                "variable": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acousticlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits1",
                            "variable"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_213": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_230": {
                "variable": {
                    "value": "logits_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_236": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_183": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_214": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_214": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "extract_features_product_old.py": {
        "tensorflow": {
            "placeholder_141": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape1[0], datashape1[1], datashape1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape2[0], datashape2[1], datashape2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 14]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "person",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "variable": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "innerdot * visuallogits",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_204": {
                "variable": {
                    "value": "productvectnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(product, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_205": {
                "variable": {
                    "value": "productvectnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(acousticlogits_reshape, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_193": {
                "variable": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acousticlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits1",
                            "variable"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_196": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_212": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_229": {
                "variable": {
                    "value": "logits_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_235": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_213": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_213": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "logger/logger.py": {
        "tensorflow": {
            "FileWriter_11": {
                "variable": {
                    "value": "self.__file_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.__log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_32": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.__summary_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_14": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_17": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_20": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "max_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "audio_23": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "sample_rate": {
                    "value": "sample_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "22050",
                            "Method Argument"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "max_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "run_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_96": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_127": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_211": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_174": {
                "filename": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ],
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_175": {
                "dirname": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ],
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_230": {
                "filename": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ],
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_231": {
                "dirname": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ],
                        [
                            "'{}/{}'.format(FLAGS.checkpoint_dir, FLAGS.exp_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/audition.py": {
        "tensorflow": {
            "placeholder_69": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "inputs_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.num_frames, self.height, self.width, self.channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base.buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.height, self.width, self.channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hear_net'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "hear_net",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[11, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_51": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_53": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hear_net'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "DualCamNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.num_frames, self.height, self.width, self.channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv3d_142": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.height, self.width, self.channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_146": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_149": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hear_net'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "DualCamNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base.buildReLU(conv3, 'conv3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 128, [11, 1], [1, 1], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [5, 1], [1, 1], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 256, [3, 1], [1, 1], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.layers.max_pool2d(net, [5, 1], [5, 1], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, [1, 1], padding='VALID', scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 1024, 1, scope='conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, shape=(-1, self.num_frames, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv3d(net, self.channels, [7, 1, 1], scope='conv1', padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, shape=(-1, self.height, self.width, self.channels))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [5, 5], scope='conv2', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv3', padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, 9, 12, scope='fc1', padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc1/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc1/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/base.py": {
        "tensorflow": {
            "softmax_123": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kD, kH, kW, nInputPlane, nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "biases_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kH, kW, nInputPlane, nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "biases_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nInputPlane, nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ],
                        [
                            "tf.truncated_normal_initializer(0.0, stddev=0.01) if weights is None else tf.constant_initializer(weights)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nOutputPlane]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "biases_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ],
                        [
                            "tf.constant_initializer(0.0) if biases is None else tf.constant_initializer(biases)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nInputPlane]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squared_difference_99": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(logits, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.nn.softmax(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_112": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.nn.softmax(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy - entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p * tf.log(p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_136": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_137": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(logits, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_146": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(logits, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_168": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.config.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kH, kW, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, dH, dW, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "norm",
                    "type": "str",
                    "possible_values": []
                },
                "beta_initializer": {
                    "value": "betaInit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer() if beta is None else tf.constant_initializer(beta)",
                            "IfExp"
                        ]
                    ]
                },
                "gamma_initializer": {
                    "value": "gammaInit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_initializer() if gamma is None else tf.constant_initializer(gamma)",
                            "IfExp"
                        ]
                    ]
                },
                "moving_mean_initializer": {
                    "value": "meanInit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer() if mean is None else tf.constant_initializer(mean)",
                            "IfExp"
                        ]
                    ]
                },
                "moving_variance_initializer": {
                    "value": "varianceInit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_initializer() if variance is None else tf.constant_initializer(variance)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_75": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_83": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_loss_101": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy - entropy)",
                            "Call"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.LOSSES",
                            "Method Argument"
                        ],
                        [
                            "tf.GraphKeys.LOSSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_loss_114": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy - entropy)",
                            "Call"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.LOSSES",
                            "Method Argument"
                        ],
                        [
                            "tf.GraphKeys.LOSSES",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "cross_entropy + entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_135": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(logits, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'full'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'conv'",
                            "Method Argument"
                        ],
                        [
                            "'cross_loss'",
                            "Method Argument"
                        ],
                        [
                            "'l2_loss'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_stable'",
                            "Method Argument"
                        ],
                        [
                            "'kl_loss_unstable'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ],
                        [
                            "'accuracy'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(logits, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_177": {
                "variable": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_178": {
                "variable": {
                    "value": "self.increment_cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cur_epoch_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_184": {
                "variable": {
                    "value": "self.global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_9": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_9": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_10": {
                "value": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_13": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [padD, padD], [padH, padH], [padW, padW], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_14": {
                "input": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [padD, padD], [padH, padH], [padW, padW], [0, 0]], 'CONSTANT') if padding == 'VALID' else x",
                            "IfExp"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padH, padH], [padW, padW], [0, 0]], 'CONSTANT') if padding == 'VALID' else x",
                            "IfExp"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[kD, kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, dD, dH, dW, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_23": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_26": {
                "value": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_29": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [padH, padH], [padW, padW], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [padD, padD], [padH, padH], [padW, padW], [0, 0]], 'CONSTANT') if padding == 'VALID' else x",
                            "IfExp"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [padH, padH], [padW, padW], [0, 0]], 'CONSTANT') if padding == 'VALID' else x",
                            "IfExp"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[kD, kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, dH, dW, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_60": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_61": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nInputPlane])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[kD, kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[kH, kW, nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[nInputPlane, nOutputPlane], initializer=weights_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_91": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "p * tf.log(q)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "logits": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "logits": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_127": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_126": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/dualcamnet.py": {
        "tensorflow": {
            "placeholder_572": {
                "variable": {
                    "value": "acoustic_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 36, 48, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_573": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_574": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "gap1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv3, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_379": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_382": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_432": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_435": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_529": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_594": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_597": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_602": {
                "variable": {
                    "value": "pool2_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, name_scope='conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_frames, 18, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_606": {
                "variable": {
                    "value": "relu3_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv3, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 18, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_649": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_652": {
                "variable": {
                    "value": "relu1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv1, 'conv1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_657": {
                "variable": {
                    "value": "pool2_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, name_scope='conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu2, 2, 2, 2, 2, 'conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_frames, 18, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_661": {
                "variable": {
                    "value": "relu3_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv3, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv3, 'conv3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 18, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_666": {
                "variable": {
                    "value": "pool4_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildMaxPooling(relu4, 2, 2, 2, 2, 'conv4')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu4, 2, 2, 2, 2, 'conv4')",
                            "Call"
                        ],
                        [
                            "buildMaxPooling(relu4, 2, 2, 2, 2, 'conv4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_frames, 9, 12, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_670": {
                "variable": {
                    "value": "relu4a_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu4a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv4a, 'conv5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 9, 12, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_709": {
                "variable": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_715": {
                "variable": {
                    "value": "relu2_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buildReLU(conv2, 'conv1')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ],
                        [
                            "buildReLU(conv2, 'conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 36, 48, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_524": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_592": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_647": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_707": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'DualCamNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamSimpleNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassGapNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV2'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV3'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV4'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNetV5'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ],
                        [
                            "'DualCamClassNet'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/resnet18_v1.py": {
        "tensorflow": {
            "conv2d_116": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(inputs, depth, 3, stride, rate=rate, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(residual, depth, [3, 3], stride=1, activation_fn=None, scope='conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_204": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, 128, [3, 4], stride=1, padding='valid', scope='conv_map')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keepdims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_202": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, 128, [3, 4], stride=1, padding='valid', scope='conv_map')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keepdims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_221": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, 128, [3, 4], stride=1, padding='valid', scope='conv_map')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keepdims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_210": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, 128, [3, 4], stride=1, padding='valid', scope='conv_map')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keepdims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, 128, [3, 4], stride=1, padding='valid', scope='conv_map')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keepdims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_utils.py": {
        "tensorflow": {
            "reshape_131": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, tf.stack([-1, nr_frames, spatial_x, spatial_y, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, nr_frames, spatial_x, spatial_y, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_138": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(channels, channels)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(value, 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(value, 0)",
                            "Call"
                        ],
                        [
                            "np.stack([np.zeros((1, 1, channels, channels)), value, np.zeros((1, 1, channels, channels))], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv3d(inputs, channels, [3, 1, 1], stride=1, rate=1, padding='SAME', scope=scope, weights_initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feats, [-1, spatial_x, spatial_y, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spatial_x, spatial_y, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_120": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, tf.stack([-1, nr_frames, spatial_x, spatial_y, channels]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_131": {
                "values": {
                    "value": "[-1, nr_frames, spatial_x, spatial_y, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/shared.py": {
        "tensorflow": {
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'shared_net'",
                            "Method Argument"
                        ],
                        [
                            "'shared_net'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "netsqueeze1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 1000, 1, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 128, 1, activation_fn=None, normalizer_fn=None, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'shared_net'",
                            "Method Argument"
                        ],
                        [
                            "'shared_net'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base.build2DConvolution(relu2, 1000, num_classes, 1, 1, 1, 1, 0, 0, 'fc3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc3/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 1000, 1, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 128, 1, activation_fn=None, normalizer_fn=None, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_25": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 1000, 1, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 128, 1, activation_fn=None, normalizer_fn=None, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc2/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "net11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(inputs, 1000, 1, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d(net, 128, 1, activation_fn=None, normalizer_fn=None, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "net22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(net, 128, 1, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(net, 128, 1, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc2/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(net11, num_classes, 1, activation_fn=None, normalizer_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc3/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_16": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_17": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/vision.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(output, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "spectrogramStatistic.py": {
        "tensorflow": {
            "placeholder_74": {
                "variable": {
                    "value": "global_min_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "global_max_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "global_sum_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "global_sum_squared_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "batch_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_min(next_batch[0], axis=(0, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_80": {
                "variable": {
                    "value": "global_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([global_min_curr, batch_min])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "batch_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(next_batch[0], axis=(0, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_83": {
                "variable": {
                    "value": "global_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([global_max_curr, batch_max])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "batch_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(next_batch[0], axis=(0, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_86": {
                "variable": {
                    "value": "global_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_sum_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(num_channels,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_sum(next_batch[0], axis=(0, 1, 2)), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_88": {
                "variable": {
                    "value": "batch_sum_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(next_batch[0]), axis=(0, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_89": {
                "variable": {
                    "value": "global_sum_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_sum_squared_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float64, shape=(num_channels,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_sum_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_sum(tf.square(next_batch[0]), axis=(0, 1, 2)), dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_56": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_min_79": {
                "input_tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_80": {
                "values": {
                    "value": "[global_min_curr, batch_min]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_82": {
                "input_tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[global_max_curr, batch_max]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "tf.square(next_batch[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_93": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_93": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_93": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "testing2.py": {
        "tensorflow": {
            "placeholder_122": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape1[0], datashape1[1], datashape1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[modalities[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, datashape2[0], datashape2[1], datashape2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "variable": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "innerdot * visuallogits",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "variable": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_186": {
                "variable": {
                    "value": "productvectnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(product, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_187": {
                "variable": {
                    "value": "productvectnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "audioweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(acousticlogits_reshape, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_172": {
                "variable": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acousticlogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits1",
                            "variable"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "acousticlogits_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(acousticlogits_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(acousticlogits_multiple, [-1, 12, 16, num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(acousticlogits_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(acousticlogits_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_194": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_211": {
                "variable": {
                    "value": "logits_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_217": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list + var_list2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_150": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model2.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "tensor": {
                    "value": "acousticlogits_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2.output",
                            "Attribute"
                        ],
                        [
                            "model1.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(acousticlogits, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, FLAGS.nr_frames, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.nr_frames, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "ConfigProto_195": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_195": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer_audio.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "variable": {
                    "value": "self.scenario",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "variable": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.model_1.output, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_56": {
                "variable": {
                    "value": "logits_2_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model_2.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_2_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self.model_2.output, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "logits_transfer_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits_transfer, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "transferweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_transfer_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(logits_transfer, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_66": {
                "variable": {
                    "value": "self.transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "transferweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logits_transfer_reshape, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "logits_audio_infl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "variable": {
                    "value": "logits_video_infl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(self.model_1.output, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "video_repl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(logits_1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(logits_1)[0], 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "innerdot * video_repl",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_80": {
                "variable": {
                    "value": "audio_repl_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(logits_2_reshape, [1, 2]), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(logits_1)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_82": {
                "variable": {
                    "value": "self.productvectnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(product, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_83": {
                "variable": {
                    "value": "self.productvectnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "audio_repl_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.reduce_sum(logits_2_reshape, [1, 2]), 1), [1, tf.shape(logits_1)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cond_85": {
                "variable": {
                    "value": "(self.tripletloss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.epoch > 3",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.mix_data_hard(self.productvectnorm, self.productvectnorm2, self.labels, self.scenario, FLAGS.margin, 0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.mix_all(self.productvectnorm, self.productvectnorm2, self.labels, self.scenario, FLAGS.margin, 0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_93": {
                "variable": {
                    "value": "self.audio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.model_2.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_94": {
                "variable": {
                    "value": "(self.tripletlossacoustic, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.epoch > 3",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.mix_data_hard(self.audio, self.transfer, self.labels, self.scenario, FLAGS.margin, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.mix_all(self.audio, self.transfer, self.labels, self.scenario, FLAGS.margin, 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "create_global_step_103": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_108": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_124": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_variables_to_restore(exclude=to_exclude)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_336": {
                "variable": {
                    "value": "dot_product0",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "dot_product1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "dot_productab",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_342": {
                "variable": {
                    "value": "square_norm0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings0, tf.transpose(embeddings0))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_343": {
                "variable": {
                    "value": "square_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings1, tf.transpose(embeddings1))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_350": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_378": {
                "variable": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_379": {
                "variable": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(scenario, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(scenario, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_382": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_392": {
                "variable": {
                    "value": "maskneg0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_393": {
                "variable": {
                    "value": "maskneg1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_394": {
                "variable": {
                    "value": "maskneg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "maskneg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(labels_equal)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maskneg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(scenario_equal)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_405": {
                "variable": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_406": {
                "variable": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(scenario, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(scenario, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_408": {
                "variable": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_409": {
                "variable": {
                    "value": "i_equal_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(scenario_equal, label_equal)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_410": {
                "variable": {
                    "value": "i_equal_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(scenario_equal, label_equal)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_412": {
                "variable": {
                    "value": "valid_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_equal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(same_video, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_not(i_equal_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_430": {
                "variable": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_positive)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_432": {
                "variable": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_positive)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_434": {
                "variable": {
                    "value": "hardest_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(mask_anchor_positive, pairwise_dist)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pairwise_dist, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_437": {
                "variable": {
                    "value": "mask_anchor_negative",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_negative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_negative)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_439": {
                "variable": {
                    "value": "max_anchor_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_443": {
                "variable": {
                    "value": "hardest_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "anchor_negative_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_dist + max_anchor_negative_dist * (1.0 - mask_anchor_negative)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(pairwise_dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_446": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hardest_positive_dist - hardest_negative_dist + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_449": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_450": {
                "variable": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(triplet_loss, 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_451": {
                "variable": {
                    "value": "num_positive_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_452": {
                "variable": {
                    "value": "num_valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_455": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_481": {
                "variable": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_482": {
                "variable": {
                    "value": "anchor_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "self._pairwise_distances(data0, data1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_493": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_494": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_497": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_500": {
                "variable": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(triplet_loss, 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_501": {
                "variable": {
                    "value": "num_positive_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_502": {
                "variable": {
                    "value": "num_valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_553": {
                "variable": {
                    "value": "acoustic_tr_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.transfer_shape[0], self.transfer_shape[1], self.transfer_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_555": {
                "variable": {
                    "value": "video_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_1[0], self.shape_1[1], self.shape_1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_556": {
                "variable": {
                    "value": "acoustic_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_2[0], self.shape_2[1], self.shape_2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_559": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(distances, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_358": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_424": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(data0 - data1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_480": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(data0 - data1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "self.model_1.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "logits_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_transfer.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_74": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(self.model_1.output, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "input": {
                    "value": "tf.reduce_sum(logits_2_reshape, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_110": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_155": {
                "variable": {
                    "value": "optimizer_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[optimizer.get_slot(var, name) for name in optimizer.get_slot_names() for var in self.train_vars if var is not None]",
                            "ListComp"
                        ],
                        [
                            "self._get_optimizer_variables(self.optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_211": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_336": {
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_337": {
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_338": {
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_347": {
                "input": {
                    "value": "square_norm0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag_part(dot_product0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_378": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_379": {
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_405": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_406": {
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_412": {
                "x": {
                    "value": "i_equal_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(same_video, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_450": {
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_500": {
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_506": {
                "input_tensor": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_571": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_355": {
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_424": {
                "x": {
                    "value": "data0 - data1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_480": {
                "x": {
                    "value": "data0 - data1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(self.model_1.output, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(self.model_1.output, shape=expanded_shape), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_211": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_step_223": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_271": {
                "value": {
                    "value": "[tf.Summary.Value(tag='valid_loss', simple_value=total_loss), tf.Summary.Value(tag='valid_accuracy', simple_value=total_accuracy)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_571": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_212": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_571": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_step_253": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer_three.py": {
        "tensorflow": {
            "placeholder_36": {
                "variable": {
                    "value": "self.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_45": {
                "variable": {
                    "value": "self.scenario",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "logits_audio_infl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(logits_2_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "variable": {
                    "value": "logits_video_infl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits_1",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_83": {
                "variable": {
                    "value": "video_repl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(logits_1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(logits_1)[0], 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "innerdot * video_repl",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_89": {
                "variable": {
                    "value": "audio_repl_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(logits_2_reshape, [1, 2]), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(logits_1)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_91": {
                "variable": {
                    "value": "self.productvectnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "videoweighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(product, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_92": {
                "variable": {
                    "value": "self.productvectnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "audio_repl_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.reduce_sum(logits_2_reshape, [1, 2]), 1), [1, tf.shape(logits_1)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cond_96": {
                "variable": {
                    "value": "(self.tripletloss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.epoch > 3",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.mix_data_hard(self.productvectnorm, self.productvectnorm2, self.labels, self.scenario, FLAGS.margin)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.mix_all(self.productvectnorm, self.productvectnorm2, self.labels, self.scenario, FLAGS.margin)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "create_global_step_107": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_112": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_variables_to_restore(exclude=to_exclude)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_339": {
                "variable": {
                    "value": "dot_product0",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "dot_product1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "variable": {
                    "value": "dot_productab",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(embeddings1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_345": {
                "variable": {
                    "value": "square_norm0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings0, tf.transpose(embeddings0))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_346": {
                "variable": {
                    "value": "square_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings1, tf.transpose(embeddings1))",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_353": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_381": {
                "variable": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_382": {
                "variable": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(scenario, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(scenario, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_385": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_395": {
                "variable": {
                    "value": "maskneg0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_396": {
                "variable": {
                    "value": "maskneg1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_397": {
                "variable": {
                    "value": "maskneg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "maskneg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(labels_equal)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maskneg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(scenario_equal)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_408": {
                "variable": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_409": {
                "variable": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(scenario, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(scenario, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_411": {
                "variable": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scenario_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.expand_dims(scenario, 0), tf.expand_dims(scenario, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labels, 0), tf.expand_dims(labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_412": {
                "variable": {
                    "value": "i_equal_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(scenario_equal, label_equal)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_413": {
                "variable": {
                    "value": "i_equal_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "same_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(scenario_equal, label_equal)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_415": {
                "variable": {
                    "value": "valid_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_equal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(same_video, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_not(i_equal_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_424": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(data0 - data1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_430": {
                "variable": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_positive)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_432": {
                "variable": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_positive)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_434": {
                "variable": {
                    "value": "hardest_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(mask_anchor_positive, pairwise_dist)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pairwise_dist, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_437": {
                "variable": {
                    "value": "mask_anchor_negative",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_anchor_negative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(mask_anchor_negative)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_439": {
                "variable": {
                    "value": "max_anchor_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_443": {
                "variable": {
                    "value": "hardest_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "anchor_negative_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_dist + max_anchor_negative_dist * (1.0 - mask_anchor_negative)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(pairwise_dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_446": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hardest_positive_dist - hardest_negative_dist + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_449": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_450": {
                "variable": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(triplet_loss, 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_451": {
                "variable": {
                    "value": "num_positive_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_452": {
                "variable": {
                    "value": "num_valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_455": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_477": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(data0 - data1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_479": {
                "variable": {
                    "value": "anchor_positive_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_480": {
                "variable": {
                    "value": "anchor_negative_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(data0 - data1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_491": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_492": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_495": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_498": {
                "variable": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(triplet_loss, 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_499": {
                "variable": {
                    "value": "num_positive_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(triplet_loss, 1e-16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_500": {
                "variable": {
                    "value": "num_valid_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(distances, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(scenario_equal, labels_equal)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "self._get_triplet_mask(labels, scenario)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_564": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_565": {
                "variable": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 61]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "self.logits_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.model_1.output, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "self.logits_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits_1_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logits_2_multiple, shape=expanded_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "logits_2_multiple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_2.output",
                            "Attribute"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 12 * 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_2_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_2.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(logits_2, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12, 16, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(logits_2_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_358": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(distances, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_361": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_552": {
                "variable": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_1[0], self.shape_1[1], self.shape_1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_559": {
                "variable": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_2[0], self.shape_2[1], self.shape_2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_47": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits_1",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "tf.reduce_sum(logits_2_reshape, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_114": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_159": {
                "variable": {
                    "value": "optimizer_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[optimizer.get_slot(var, name) for name in optimizer.get_slot_names() for var in self.train_vars if var is not None]",
                            "ListComp"
                        ],
                        [
                            "self._get_optimizer_variables(self.optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_214": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=True, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_339": {
                "a": {
                    "value": "embeddings0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_340": {
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_341": {
                "a": {
                    "value": "embeddings1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "input": {
                    "value": "square_norm0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag_part(dot_product0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_381": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_382": {
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_408": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[3], shape=[-1, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_409": {
                "input": {
                    "value": "scenario",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_batch[4], shape=[-1, 61])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_415": {
                "x": {
                    "value": "i_equal_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(same_video, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_424": {
                "x": {
                    "value": "data0 - data1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_450": {
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_477": {
                "x": {
                    "value": "data0 - data1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_498": {
                "x": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_504": {
                "input_tensor": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(hardest_positive_dist - hardest_negative_dist + margin, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "anchor_positive_dist - anchor_negative_dist + margin",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask, triplet_loss)",
                            "Call"
                        ],
                        [
                            "tf.maximum(triplet_loss, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(triplet_loss) / (num_positive_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_554": {
                "variable": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_1[0], self.shape_1[1], self.shape_1[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_561": {
                "variable": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.shape_2[0], self.shape_2[1], self.shape_2[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_574": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "self.model_1.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "logits_1_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_1.output",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "logits_2_multiple",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_2.output",
                            "Attribute"
                        ],
                        [
                            "tf.tile(logits_2, [1, 12 * 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.nr_frames, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ],
                        [
                            "[-1, FLAGS.sample_length * _FRAMES_PER_SECOND, 12, 16, self.num_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "logits_2_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(logits_2_multiple, shape=expanded_shape), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_2_multiple, [-1, 12, 16, self.num_classes])",
                            "Call"
                        ],
                        [
                            "nn_ops.relu(logits_2_reshape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_115": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_358": {
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(square_norm0, 0) - 2.0 * dot_productab + tf.expand_dims(square_norm1, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(distances, 0.0)",
                            "Call"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits_1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits_1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_214": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_step_226": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_274": {
                "value": {
                    "value": "[tf.Summary.Value(tag='valid_loss', simple_value=total_loss), tf.Summary.Value(tag='valid_accuracy', simple_value=total_accuracy)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_574": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_215": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_574": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_step_256": {
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}