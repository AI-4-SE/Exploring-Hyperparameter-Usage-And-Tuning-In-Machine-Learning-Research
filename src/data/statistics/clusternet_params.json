{
    "experiments_inductive.py": {
        "sklearn": {
            "roc_auc_score_354": {
                "variable": {
                    "value": "test_auc_i",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_eval[i].long().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "nn.Sigmoid()(preds_test_eval).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_59": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(K, args.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_cluster.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_337": {
                "variable": {
                    "value": "optimizer_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_ts.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_498": {
                "variable": {
                    "value": "optimizer_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_193": {
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.K",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_295": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.arange(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "to_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist * args.kcentertemp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_278": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "'{}_{}_test_dist.pt'.format(args.dataset, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "'{}_{}_{:.2f}_train_dist.pt'.format(args.dataset, i, train_pct)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "dist_all_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_all_dists(bin_adj_all[i], 100)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_{}_test_dist.pt'.format(args.dataset, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "dist_train_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_all_dists(bin_adj_train[i], 100)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_{}_{:.2f}_train_dist.pt'.format(args.dataset, i, train_pct)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_395": {
                "input": {
                    "value": "1.0 / degrees",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_459": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "greedy_modularity_communities(preds, K)",
                            "Call"
                        ],
                        [
                            "partition(preds, K)",
                            "Call"
                        ],
                        [
                            "baseline_spectral(mod_pred, K)",
                            "Call"
                        ],
                        [
                            "torch.softmax(100 * r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(100 * r, dim=1)",
                            "Call"
                        ],
                        [
                            "greedy_modularity_communities(preds, K)",
                            "Call"
                        ],
                        [
                            "partition(preds, K)",
                            "Call"
                        ],
                        [
                            "baseline_spectral(mod_pred, K)",
                            "Call"
                        ],
                        [
                            "model(features[i], adj[i])",
                            "Call"
                        ],
                        [
                            "torch.softmax(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(100 * r, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_571": {
                "input": {
                    "value": "1.0 / degrees",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_243": {
                "input": {
                    "value": "4 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_461": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments_singlegraph.py": {
        "sklearn": {
            "roc_auc_score_314": {
                "variable": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_test_eval.long().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "nn.Sigmoid()(preds_test_eval).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_146": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(K, args.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_cluster.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_298": {
                "variable": {
                    "value": "optimizer_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_ts.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.arange(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "to_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_384": {
                "variable": {
                    "value": "optimizer_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_146": {
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.K",
                            "Attribute"
                        ],
                        [
                            "args.K",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "dist_all",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_test_dist.pt'.format(args.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_192": {
                "variable": {
                    "value": "dist_train",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}_train_dist.pt'.format(args.dataset, train_pct)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_263": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist * args.kcentertemp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_274": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_350": {
                "input": {
                    "value": "1.0 / degrees",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_356": {
                "variable": {
                    "value": "dist_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_twostage_dist.pt'.format(args.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_396": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "args.clustertemp * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_406": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "greedy_modularity_communities(preds, K)",
                            "Call"
                        ],
                        [
                            "partition(preds, K)",
                            "Call"
                        ],
                        [
                            "baseline_spectral(mod_pred, K)",
                            "Call"
                        ],
                        [
                            "greedy_modularity_communities(preds, K)",
                            "Call"
                        ],
                        [
                            "partition(preds, K)",
                            "Call"
                        ],
                        [
                            "baseline_spectral(mod_pred, K)",
                            "Call"
                        ],
                        [
                            "greedy_modularity_communities(preds, K)",
                            "Call"
                        ],
                        [
                            "partition(preds, K)",
                            "Call"
                        ],
                        [
                            "baseline_spectral(mod_pred, K)",
                            "Call"
                        ],
                        [
                            "torch.softmax(100 * r, dim=1)",
                            "Call"
                        ],
                        [
                            "model_gcn(features_test, adj_all)",
                            "Call"
                        ],
                        [
                            "torch.softmax(args.clustertemp * r, dim=1)",
                            "Call"
                        ],
                        [
                            "model_gcn(features_train, adj_train)",
                            "Call"
                        ],
                        [
                            "torch.softmax(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(100 * r, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_419": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_461": {
                "input": {
                    "value": "1.0 / degrees",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_484": {
                "input": {
                    "value": "1.0 / degrees",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "dist_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('{}_test_dist.pt'.format(args.dataset))",
                            "Call"
                        ],
                        [
                            "make_all_dists(bin_adj_all, 100)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_test_dist.pt'.format(args.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "dist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('{}_{}_train_dist.pt'.format(args.dataset, train_pct))",
                            "Call"
                        ],
                        [
                            "make_all_dists(bin_adj_train, 100)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_{}_train_dist.pt'.format(args.dataset, train_pct)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_424": {
                "variable": {
                    "value": "loss_test_only",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_369": {
                "obj": {
                    "value": "dist_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('{}_twostage_dist.pt'.format(args.dataset))",
                            "Call"
                        ],
                        [
                            "dist_ts.float()",
                            "Call"
                        ],
                        [
                            "make_dists_igraph(preds)",
                            "Call"
                        ],
                        [
                            "make_all_dists(preds, 100)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_twostage_dist.pt'.format(args.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "input": {
                    "value": "4 * x_best",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "sklearn": {
            "check_random_state_35": {
                "seed": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softmax_56": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_temp * dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()(x).flatten()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.cluster.k_means_._k_init(data_np, k, norm, sklearn.utils.check_random_state(None))",
                            "Call"
                        ],
                        [
                            "torch.tensor(init, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_temp * dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.distmult",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(nout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_74": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcstart(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()(x).flatten()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcstart(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()(x).flatten()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.distmult",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(nout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_153": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_30": {
                "input": {
                    "value": "1.0 / torch.norm(data, p=2, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gc(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()(x).flatten()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gc(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gcstart(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(gc(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcend(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()(x).flatten()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_53": {
                "input": {
                    "value": "1 / cluster_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_73": {
                "*size": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_152": {
                "*size": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_30": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(1.0 / torch.norm(data, p=2, dim=1)) @ data",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modularity.py": {
        "sklearn": {
            "k_means_29": {
                "X": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "variable"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(G.nodes())",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_14": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_20": {
                "*size": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_20": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kcenter.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_adj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(dists)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_16": {
                "variable": {
                    "value": "(dist, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(bin_adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "off_one",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist[:, 1:], dmax_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.temp * vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_36": {
                "input": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dmax + (self.m * probs).sum(dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(self.temp * vals, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "*size": {
                    "value": "dist.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumprod_31": {
                "input": {
                    "value": "1 - x_sort",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss_functions.py": {
        "torch": {
            "softmax_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist * args.kcentertemp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_4": {
                "*size": {
                    "value": "bin_adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "bin_adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_4": {
                "n": {
                    "value": "bin_adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_11": {
                "input": {
                    "value": "4 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "eye_25": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(edges.max()) + 1",
                            "BinOp"
                        ],
                        [
                            "bin_adj_train.shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "all_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edges.shape[0] * (num_samples + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(all_edges.shape[0])",
                            "Call"
                        ],
                        [
                            "np.zeros(idx_features_labels.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt('data/{}/{}{}.cites'.format(dataset, dataset, version), dtype=np.int)",
                            "Call"
                        ],
                        [
                            "edges.detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(list(map(idx_map.get, edges_unordered.flatten())), dtype=np.int32).reshape(edges_unordered.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}