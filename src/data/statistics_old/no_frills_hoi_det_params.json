{
    "exp/hico_eval/compute_map.py": {
        "sklearn": {}
    },
    "exp/hoi_classifier/data/features_dataset.py": {
        "torch": {}
    },
    "exp/hoi_classifier/eval.py": {
        "torch": {
            "SequentialSampler_28": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Features(data_const)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_77": {
                "f": {
                    "value": "model.const.hoi_classifier.model_pth",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "exp/hoi_classifier/models/hoi_classifier_model.py": {
        "torch": {}
    },
    "exp/hoi_classifier/models/scatter_verbs_to_hois.py": {
        "torch": {
            "zeros_42": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "num_hois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.hoi_dict)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "exp/hoi_classifier/models/verb_given_boxes_and_object_label.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "transformed_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, log_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "in_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transformed_box_feats, object_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_43": {
                "variable": {
                    "value": "log_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(feat) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "exp/hoi_classifier/models/verb_given_human_pose.py": {
        "torch": {
            "log_43": {
                "variable": {
                    "value": "log_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(feat) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "transformed_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, log_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "pose_feats",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(absolute_pose, relative_pose)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "in_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transformed_box_feats, object_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "exp/hoi_classifier/models/verb_given_object_appearance.py": {
        "torch": {}
    },
    "exp/hoi_classifier/train.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "itertools.chain(model.hoi_classifier.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "exp_const.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_28": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_113": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_117": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RandomSampler_33": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Features(data_const_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "model.hoi_classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "hoi_classifier_pth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(exp_const.model_dir, f'hoi_classifier_{step}')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_61": {
                "input": {
                    "value": "hoi_prob * hoi_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "exp/hoi_classifier/vis/top_boxes_per_hoi.py": {
        "torch": {}
    },
    "utils/losses.py": {
        "torch": {
            "mean_16": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-(1.0 - p_t) ** self.gamma * torch.log(p_t + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_14": {
                "input": {
                    "value": "p_t + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model.py": {
        "torch": {}
    },
    "utils/pytorch_layers.py": {
        "torch": {
            "ModuleList_62": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "linear",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_91": {
                "variable": {
                    "value": "bn",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "const['drop_prob']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}