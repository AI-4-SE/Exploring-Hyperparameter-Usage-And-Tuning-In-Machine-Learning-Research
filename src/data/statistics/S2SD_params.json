{
    "evaluation/evaluate.py": {
        "sklearn": {
            "normalize_49": {
                "variable": {
                    "value": "com",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.mean(embeddings[loc], axis=0).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/__init__.py": {
        "sklearn": {
            "normalize_117": {
                "variable": {
                    "value": "features_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_145": {
                "variable": {
                    "value": "centroids_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faiss.vector_float_to_array(kmeans.centroids).reshape(n_classes, features.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_176": {
                "X": {
                    "value": "features_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(features, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features_cosine).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "X": {
                    "value": "features_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(features, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features_cosine).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_cache_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "features_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(features, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features_cosine).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/c_nmi.py": {
        "sklearn": {
            "normalized_mutual_info_score_9": {
                "variable": {
                    "value": "NMI",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "computed_cluster_labels_cosine.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "target_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/dists.py": {
        "sklearn": {
            "normalize_38": {
                "variable": {
                    "value": "com",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.mean(features[loc], axis=0).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_45": {
                "variable": {
                    "value": "com",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(features[loc], dim=0).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "coms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_47": {
                "input": {
                    "value": "torch.cat(coms, dim=0).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "features[loc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/nmi.py": {
        "sklearn": {
            "normalized_mutual_info_score_9": {
                "variable": {
                    "value": "NMI",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "computed_cluster_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "target_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/rho_spectrum.py": {
        "sklearn": {
            "TruncatedSVD_22": {
                "variable": {
                    "value": "svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.embed_dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "svd_19": {
                "variable": {
                    "value": "(_, s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/visualize_tsne.py": {
        "sklearn": {
            "TSNE_96": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "perplex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40.0",
                            "Method Argument"
                        ],
                        [
                            "40.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_158": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "dataloaders[evaluation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['evaluation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "dataloaders[testing]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['testing']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_150": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_152": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_165": {
                "f": {
                    "value": "path_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'/export/home/tmilbich/PycharmProjects/Deep_Metric_Learning_Research_PyTorch/Training_Results/cub200/MixManifold_interpolate_ProxyAnchor_Eucl_s0/checkpoint_Test_discriminative_e_recall@1.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "architectures/bninception.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.model.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_53": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.last_linear(y)",
                            "Call"
                        ],
                        [
                            "F.normalize(z, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lp_pool2d_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.features(x)",
                            "Call"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "lp_pool2d_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.features(x)",
                            "Call"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/googlenet.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.model.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/resnet50.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.model.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.layer_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.model.layer1, self.model.layer2, self.model.layer3, self.model.layer4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_33": {
                "variable": {
                    "value": "self.pool_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.last_linear(y)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(z, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_34": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/distance.py": {
        "torch": {
            "exp_55": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_55": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/diva_shared_distance_an.py": {
        "torch": {
            "exp_44": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/diva_shared_distance_apn.py": {
        "torch": {
            "exp_45": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/easypositive.py": {
        "torch": {
            "exp_44": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/epdn.py": {
        "torch": {
            "exp_44": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/ephn.py": {
        "torch": {
            "mm_45": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/epshn.py": {
        "torch": {
            "mm_42": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/intra_random.py": {
        "torch": {}
    },
    "batchminer/lifted.py": {
        "torch": {}
    },
    "batchminer/npair.py": {
        "torch": {}
    },
    "batchminer/parametric.py": {
        "torch": {
            "mm_59": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/random.py": {
        "torch": {}
    },
    "batchminer/random_distance.py": {
        "torch": {
            "exp_46": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/rho_distance.py": {
        "torch": {
            "exp_58": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/semihard.py": {
        "torch": {
            "mm_44": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/softhard.py": {
        "torch": {
            "mm_51": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/adversarial_separation.py": {
        "torch": {
            "ModuleDict_33": {
                "variable": {
                    "value": "self.regressors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.regressors[direction]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.embed_dim, self.proj_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_51": {
                "input": {
                    "value": "grad_reverse(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "(adj_feature_dict[target] * torch.nn.functional.normalize(self.regressors[direction](adj_feature_dict[source]), dim=-1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "self.proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_56": {
                "input": {
                    "value": "self.regressors[direction](adj_feature_dict[source])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/angular.py": {
        "torch": {
            "mean_41": {
                "variable": {
                    "value": "angular_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.sum(torch.exp(inner_sum_ang), dim=1) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "npair_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.sum(torch.exp(inner_sum_npair.clamp(max=50, min=-50)), dim=1) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "torch.sum(torch.exp(inner_sum_ang), dim=1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "torch.sum(torch.exp(inner_sum_npair.clamp(max=50, min=-50)), dim=1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "torch.norm(batch, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "torch.exp(inner_sum_ang)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "torch.exp(inner_sum_npair.clamp(max=50, min=-50))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "inner_sum_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_term1 - is_term2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_46": {
                "input": {
                    "value": "inner_sum_npair.clamp(max=50, min=-50)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/arcface.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.class_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.n_classes, opt.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "class_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.class_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "pick",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.par.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "acos_48": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_target_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_similarity[pick]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_49": {
                "variable": {
                    "value": "marginal_target_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + self.angular_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/contrastive.py": {
        "torch": {
            "mean_34": {
                "variable": {
                    "value": "pos_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(nn.PairwiseDistance(p=2)(batch[anchors, :], batch[positives, :]) - self.pos_margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_35": {
                "variable": {
                    "value": "neg_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.neg_margin - nn.PairwiseDistance(p=2)(batch[anchors, :], batch[negatives, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "nn.PairwiseDistance(p=2)(batch[anchors, :], batch[positives, :]) - self.pos_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_35": {
                "input": {
                    "value": "self.neg_margin - nn.PairwiseDistance(p=2)(batch[anchors, :], batch[negatives, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PairwiseDistance_34": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PairwiseDistance_35": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/histogram.py": {
        "torch": {
            "linspace_26": {
                "variable": {
                    "value": "self.support_torch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.nbins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "self.support_torch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_47": {
                "variable": {
                    "value": "sim_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(similarity.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_72": {
                "variable": {
                    "value": "hist_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(hist_pos_rep.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist_neg_sim * hist_pos_cdf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "indsa",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(assigned_bin_values == self.support - self.bin_width) & idxs.detach().cpu().numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "indsb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(assigned_bin_values == self.support) & idxs.detach().cpu().numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "hist_pos_rep.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "similarity.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/lifted.py": {
        "torch": {
            "logsumexp_34": {
                "variable": {
                    "value": "pos_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.PairwiseDistance(p=2)(anchor[:, :, None], positive_set.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_35": {
                "variable": {
                    "value": "neg_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - nn.PairwiseDistance(p=2)(anchor[:, :, None], negative_set.permute(0, 2, 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "torch.norm(batch, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "pos_term + neg_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_38": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.stack(loss)) + self.l2_weight * torch.mean(torch.norm(batch, p=2, dim=1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PairwiseDistance_34": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_38": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PairwiseDistance_35": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/margin.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(opt.n_classes) * opt.loss_margin_beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_ap - beta + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta - d_an + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "pair_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pos_loss > 0.0) + (neg_loss > 0.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.beta[labels[triplet[0]]] for triplet in sampled_triplets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_52": {
                "tensors": {
                    "value": "d_an",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "opt.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/multisimilarity.py": {
        "torch": {
            "mean_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_53": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.stack(loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_41": {
                "input": {
                    "value": "anchor_pos_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity[i][pos_idxs]",
                            "Subscript"
                        ],
                        [
                            "anchor_pos_sim[pos_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_42": {
                "input": {
                    "value": "anchor_neg_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity[i][neg_idxs]",
                            "Subscript"
                        ],
                        [
                            "anchor_neg_sim[neg_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_48": {
                "input": {
                    "value": "1 + torch.sum(torch.exp(-self.pos_weight * (anchor_pos_sim - self.thresh)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "1 + torch.sum(torch.exp(self.neg_weight * (anchor_neg_sim - self.thresh)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "pos_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels == labels[i]",
                            "Compare"
                        ],
                        [
                            "anchor_pos_sim - self.margin < torch.max(anchor_neg_sim)",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_48": {
                "input": {
                    "value": "torch.exp(-self.pos_weight * (anchor_pos_sim - self.thresh))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.exp(self.neg_weight * (anchor_neg_sim - self.thresh))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_48": {
                "input": {
                    "value": "-self.pos_weight * (anchor_pos_sim - self.thresh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "self.neg_weight * (anchor_neg_sim - self.thresh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/npair.py": {
        "torch": {
            "mean_41": {
                "input": {
                    "value": "torch.log(torch.sum(torch.exp(inner_sum), dim=1) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "torch.sum(torch.exp(inner_sum), dim=1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_42": {
                "input": {
                    "value": "torch.norm(batch, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_42": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch / 4",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "torch.exp(inner_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "inner_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a_embs[:, None, :].bmm((n_embs - p_embs[:, None, :]).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "inner_sum.view(inner_sum.shape[0], inner_sum.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "criteria/proxynca.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.proxies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_proxies, self.embed_dim) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "self.class_idxs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_proxies",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "pos_proxies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proxies[pos_label:pos_label + 1, :] for pos_label in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "neg_proxies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([self.class_idxs[:class_label], self.class_idxs[class_label + 1:]]) for class_label in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "neg_proxies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proxies[neg_labels, :] for neg_labels in neg_proxies]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "dist_to_neg_proxies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch[:, None, :] - neg_proxies).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "dist_to_pos_proxies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch[:, None, :] - pos_proxies).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_52": {
                "variable": {
                    "value": "negative_log_proxy_nca_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_to_pos_proxies[:, 0] + torch.logsumexp(-dist_to_neg_proxies, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 * torch.nn.functional.normalize(batch, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_43": {
                "input": {
                    "value": "self.proxies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "self.num_proxies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[self.class_idxs[:class_label], self.class_idxs[class_label + 1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_52": {
                "input": {
                    "value": "-dist_to_neg_proxies",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/quadruplet.py": {
        "torch": {
            "relu_28": {
                "input": {
                    "value": "torch.norm(anchor - positive, p=2, dim=-1) - torch.norm(anchor - negative, p=2, dim=-1) + self.margin_alpha_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "torch.norm(anchor - positive, p=2, dim=-1) - torch.norm(negative - fourth_negative, p=2, dim=-1) + self.margin_alpha_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_46": {
                "input": {
                    "value": "quadruplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quadruplet_distance(batch[anchors, :], batch[positives, :], batch[negatives, :], batch[fourth_negatives, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_28": {
                "input": {
                    "value": "anchor - negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_31": {
                "input": {
                    "value": "negative - fourth_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/s2sd.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.target_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Linear(f_dim, t_dim), nn.ReLU(), nn.Linear(t_dim, t_dim)) for t_dim in opt.loss_s2sd_target_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.target_criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_133": {
                "variable": {
                    "value": "log_p_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "p_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_107": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_net(avg_batch_features.view(bs, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_119": {
                "variable": {
                    "value": "n_avg_batch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_batch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.AdaptiveAvgPool2d(1)(batch_features).view(bs, -1) + nn.AdaptiveMaxPool2d(1)(batch_features).view(bs, -1)",
                            "BinOp"
                        ],
                        [
                            "avg_batch_features.view(bs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "input": {
                    "value": "thing",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.Linear(f_dim, t_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_114": {
                "input": {
                    "value": "torch.stack(target_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_135": {
                "input": {
                    "value": "log_p_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(A / self.T, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(B / self.T, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "t_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.loss_s2sd_target_dims",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "t_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.loss_s2sd_target_dims",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_114": {
                "tensors": {
                    "value": "target_losses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_99": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_99": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/snr.py": {
        "torch": {
            "mean_38": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.sum(batch[anchors, :], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "snr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_snr - neg_snr + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "var_35": {
                "input": {
                    "value": "batch[anchors, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_36": {
                "input": {
                    "value": "batch[anchors, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_38": {
                "input": {
                    "value": "torch.sum(batch[anchors, :], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "snr_loss > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "batch[anchors, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/softmax.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.class_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.n_classes, opt.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_34": {
                "variable": {
                    "value": "class_mapped_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.nn.functional.normalize(self.class_map, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_34": {
                "input": {
                    "value": "self.class_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "criteria/softtriplet.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "self.reg_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_classes * self.n_centroids, self.n_classes * self.n_centroids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.intra_class_centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.embed_dim, self.n_classes * self.n_centroids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_53": {
                "variable": {
                    "value": "intra_class_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.intra_class_centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "per_class_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_weight_over_centroids * similarities_to_centroids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "margin_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "per_class_embed.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_56": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "torch.sqrt(2.00001 - 2 * inter_centroid_similarity[self.reg_indices])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "2.00001 - 2 * inter_centroid_similarity[self.reg_indices]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/triplet.py": {
        "torch": {
            "stack_30": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.triplet_distance(batch[triplet[0], :], batch[triplet[1], :], batch[triplet[2], :]) for triplet in sampled_triplets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_25": {
                "input": {
                    "value": "(anchor - positive).pow(2).sum() - (anchor - negative).pow(2).sum() + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self.triplet_distance(batch[triplet[0], :], batch[triplet[1], :], batch[triplet[2], :]) for triplet in sampled_triplets])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasampler/class_random_sampler.py": {
        "torch": {}
    },
    "datasampler/d2_coreset_sampler.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "low_dim_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bigbatch.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.low_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasampler/disthist_batchmatch_sampler.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "low_dim_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bigbatch.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.low_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasampler/fid_batchmatch_sampler.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "low_dim_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bigbatch.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.low_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasampler/greedy_coreset_sampler.py": {
        "torch": {
            "cat_89": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "low_dim_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bigbatch.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.low_proj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasampler/random_sampler.py": {
        "torch": {}
    },
    "datasampler/samplers.py": {
        "torch": {
            "mm_104": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_110": {
                "variable": {
                    "value": "coreset_anchor_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_135": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist - torch.max(dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "new_search_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coreset_anchor_dists.unsqueeze(-1), sample_anchor_dists]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coreset_anchor_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(dist_matrix, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.min(new_search_dists, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A).clamp(min=0.5)",
                            "Call"
                        ],
                        [
                            "(2.0 - float(dim)) * torch.log(dist) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dist.pow(2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(dist - torch.max(dist))",
                            "Call"
                        ],
                        [
                            "dist / torch.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "dist.flatten().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_122": {
                "input": {
                    "value": "new_search_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([coreset_anchor_dists.unsqueeze(-1), sample_anchor_dists], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "1.0 - 0.25 * dist.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A).clamp(min=0.5)",
                            "Call"
                        ],
                        [
                            "(2.0 - float(dim)) * torch.log(dist) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dist.pow(2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(dist - torch.max(dist))",
                            "Call"
                        ],
                        [
                            "dist / torch.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "dist.flatten().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.image_list[idx][-1] for idx in subset]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/basic_dataset_scaffold.py": {
        "torch": {}
    },
    "evaluation/__init__.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'opt': save_opt, 'progress': progress_saver, 'aux': aux}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "dataloaders[evaluation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['evaluation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "dataloaders[testing]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['testing']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "dataloaders[training]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['training']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsamplers.select(opt.data_sampler, opt, datasets['training'].image_dict, datasets['training'].image_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_171": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(to_optim)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(to_optim, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "opt.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "dataloaders[validation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['validation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "to_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': opt.lr, 'weight_decay': opt.decay}]",
                            "List"
                        ],
                        [
                            "[{'params': all_but_fc_params, 'lr': opt.lr, 'weight_decay': opt.decay}, {'params': fc_params, 'lr': opt.fc_lr, 'weight_decay': opt.decay}]",
                            "List"
                        ]
                    ]
                }
            },
            "SGD_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "to_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': opt.lr, 'weight_decay': opt.decay}]",
                            "List"
                        ],
                        [
                            "[{'params': all_but_fc_params, 'lr': opt.lr, 'weight_decay': opt.decay}, {'params': fc_params, 'lr': opt.fc_lr, 'weight_decay': opt.decay}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/c_f1.py": {
        "torch": {}
    },
    "metrics/c_mAP_1000.py": {
        "torch": {}
    },
    "metrics/c_mAP_c.py": {
        "torch": {}
    },
    "metrics/c_mAP_lim.py": {
        "torch": {}
    },
    "metrics/f1.py": {
        "torch": {}
    },
    "metrics/mAP.py": {
        "torch": {}
    },
    "metrics/mAP_1000.py": {
        "torch": {}
    },
    "metrics/mAP_c.py": {
        "torch": {}
    },
    "metrics/mAP_lim.py": {
        "torch": {}
    },
    "utilities/misc.py": {
        "torch": {
            "DataParallel_37": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "output_device": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}