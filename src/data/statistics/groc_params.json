{
    "adaptive_io.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_35": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[idx_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.cluster_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_101": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_111": {
                "variable": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(-1, self.d_proj)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_112": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_142": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_63": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](idx_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_proj.weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_proj.bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_173": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_proj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_proj",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {}
    },
    "evaluate.py": {
        "torch": {
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "lse_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d1.view(batch_size, vocab_size, 1) + np.log(weight), d2.view(batch_size, vocab_size, 1) + np.log(1 - weight))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_145": {
                "variable": {
                    "value": "batch_row_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "unigram_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, V)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logsumexp_110": {
                "input": {
                    "value": "lse_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((d1.view(batch_size, vocab_size, 1) + np.log(weight), d2.view(batch_size, vocab_size, 1) + np.log(1 - weight)), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "f'cuda:{device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "f'cuda:{device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "f'cuda:{device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5((corpus_path.strip('/') + '-test').encode()).hexdigest())",
                            "Call"
                        ],
                        [
                            "'corpus.{}.data'.format(hashlib.md5(corpus_path.strip('/').encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_178": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_179": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_80": {
                "device": {
                    "value": "int(args.cuda_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.test_data, use_unk=use_unk)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5((corpus_path.strip('/') + '-test').encode()).hexdigest())",
                            "Call"
                        ],
                        [
                            "'corpus.{}.data'.format(hashlib.md5(corpus_path.strip('/').encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_161": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-hidden.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "cache_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-cache-targets.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_189": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_165": {
                "variable": {
                    "value": "cache_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-cache.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "cache_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2, cache_targets.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "(1, V)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.init_hidden(batch_size)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save, 'recover-hidden.pt'))",
                            "Call"
                        ],
                        [
                            "repackage_hidden(hidden)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-hidden.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "cache_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c[0].view(1, -1) for c in cache]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "cache_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([c[0].view(1, -1) for c in cache], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([c[0].view(1, -1) for c in cache], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-cache-targets.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "batched_cache_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([c[1].view(batch_size, -1, 1) for c in cache], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save, 'recover-cache.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "cache_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c[0].view(1, -1) for c in cache]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "batched_cache_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c[1].view(batch_size, -1, 1) for c in cache]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_219": {
                "variable": {
                    "value": "cache_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batched_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "batched_cache_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([c[1].view(batch_size, -1, 1) for c in cache], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "cache_vocab_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(output, weight.t())",
                            "Call"
                        ],
                        [
                            "lexp.log()",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "locked_dropout.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_208": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_310": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:%d' % args.cuda_device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(corpus_path.strip('/').encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_390": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_392": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_394": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_216": {
                "device": {
                    "value": "int(args.cuda_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_217": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus_load(args.data)",
                            "Call"
                        ],
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.data, use_unk=use_unk)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(corpus_path.strip('/').encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_316": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_349": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__360": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_438": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ModuleList_243": {
                "variable": {
                    "value": "self._prefix_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._prefix_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self._output_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self._jdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "H.joint_dropout if self.use_dropout else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self._char_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "262",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self._char_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self._char_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self._lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_143": {
                "variable": {
                    "value": "new_lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.bias_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_252": {
                "variable": {
                    "value": "self._bias_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "H.bias_drop if self.use_dropout else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_277": {
                "variable": {
                    "value": "new_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_ntoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(newdict.idx2word)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "new_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_ntoken",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(newdict.idx2word)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_95": {
                "variable": {
                    "value": "self._definition_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "H.hdepth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self._comb_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.emsize * H.nforms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "new_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embedding, convolved]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, cur_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_392": {
                "data": {
                    "value": "np.arange(num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cur_emb, rel_emb, def_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, cur_res]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_65": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_66": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_68": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "in_channels": {
                    "value": "H.char_emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "def_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "H.hdepth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "defsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.def_arr.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "rel_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "H.hdepth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "relsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_arr.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_104": {
                "variable": {
                    "value": "self._lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self._cnnsoftmax_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.cnncorr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self._cnnsoftmax_M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.cnncorr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "new_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "new_decoder.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._lookup.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_241": {
                "*args": {
                    "value": "H.emsize if l == 0 else H.nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self._decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H.emsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, cur_res]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cur_emb, def_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "H.joint_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H.joint_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cur_emb, rel_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_626": {
                "start": {
                    "value": "self.H.ntoken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_120": {
                "start": {
                    "value": "len(ex_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_119": {
                "*size": {
                    "value": "len(ex_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'finetune_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.CrossEntropyLoss()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(path, 'finetune_criterion.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'finetune_optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.CrossEntropyLoss()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(path, 'criterion.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_101": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}