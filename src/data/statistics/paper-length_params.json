{
    "set1_default.py": {
        "sklearn": {
            "TfidfVectorizer_136": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CountVectorizer_137": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "HashingVectorizer_138": {
                "variable": {
                    "value": "hash",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FeatureUnion_139": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer_list": {
                    "value": "[('tfidf', tfidf), ('count', count), ('hash', hash)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MLPRegressor_142": {
                "variable": {
                    "value": "mlp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_143": {
                "variable": {
                    "value": "lr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_144": {
                "variable": {
                    "value": "svr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Pipeline_171": {
                "variable": {
                    "value": "pipe_model",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('vect', vect), ('model', model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_177": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(s['plength']) for s in test_list]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_177": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(s['plength']) for s in test_list]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_177": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(s['plength']) for s in test_list]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "set2_dense.py": {
        "sklearn": {
            "mean_squared_error_253": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_253": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_253": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "set_seed_37": {
                "seed": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Tokenizer_172": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_185": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in train_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_train)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_train, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequences_186": {
                "variable": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in val_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_val)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_val, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequences_187": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in test_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_test)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_test, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_236": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(t.word_index) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMB_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "weights": {
                    "value": "[embedding_matrix]",
                    "type": "List",
                    "possible_values": []
                },
                "input_length": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_239": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_240": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "set2_ncnn.py": {
        "sklearn": {
            "mean_squared_error_274": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_274": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_274": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array([int(s['plength']) for s in test_list])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "set_seed_39": {
                "seed": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Tokenizer_174": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_187": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in train_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_train)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_train, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequences_188": {
                "variable": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in val_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_val)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_val, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequences_189": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['keywords'] + ' ' + x['title'] + ' ' + x['abstract'] for x in test_list]",
                            "ListComp"
                        ],
                        [
                            "t.texts_to_sequences(X_test)",
                            "Call"
                        ],
                        [
                            "pad_sequences(X_test, maxlen=max_length, padding='post', value=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_237": {
                "variable": {
                    "value": "sequence_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_238": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(t.word_index) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMB_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "weights": {
                    "value": "[embedding_matrix]",
                    "type": "List",
                    "possible_values": []
                },
                "input_length": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concatenate_257": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_263": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "sequence_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(max_length,), dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1)(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1D_243": {
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_249": {
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_252": {
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_259": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_260": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "set3_grid.py": {
        "sklearn": {
            "TfidfVectorizer_153": {
                "variable": {
                    "value": "vect",
                    "type": "variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SVR_205": {
                "variable": {
                    "value": "svr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_206": {
                "variable": {
                    "value": "lr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPRegressor_207": {
                "variable": {
                    "value": "mlp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_208": {
                "variable": {
                    "value": "rf_model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_209": {
                "variable": {
                    "value": "gb_model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Pipeline_239": {
                "variable": {
                    "value": "pipe_model",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('union', ColumnTransformer([('keywords', vect, 0), ('title', vect, 1), ('abstract', vect, 2), ('venue', vect, 3)], remainder='passthrough')), ('reg', model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_253": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipe_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([('union', ColumnTransformer([('keywords', vect, 0), ('title', vect, 1), ('abstract', vect, 2), ('venue', vect, 3)], remainder='passthrough')), ('reg', model)])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "pgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{**vect_grid, **model_grid}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pre_dispatch": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ColumnTransformer_240": {
                "transformers": {
                    "value": "[('keywords', vect, 0), ('title', vect, 1), ('abstract', vect, 2), ('venue', vect, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "remainder": {
                    "value": "passthrough",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_261": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_261": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_261": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipe_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_263": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_263": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_263": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[4000:5000]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}