{
    "out_of_distribution_test/rlkit/samplers/util.py": {
        "sklearn": {
            "GaussianProcessRegressor_541": {
                "variable": {
                    "value": "gp_human0",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_545": {
                "variable": {
                    "value": "gp_human1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantKernel_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RBF_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/samplers/util_gp.py": {
        "sklearn": {
            "GaussianProcessRegressor_541": {
                "variable": {
                    "value": "gp_human0",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_545": {
                "variable": {
                    "value": "gp_human1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantKernel_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RBF_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/samplers/util.py": {
        "sklearn": {
            "GaussianProcessRegressor_541": {
                "variable": {
                    "value": "gp_human0",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_545": {
                "variable": {
                    "value": "gp_human1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantKernel_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RBF_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/samplers/util_gp.py": {
        "sklearn": {
            "GaussianProcessRegressor_541": {
                "variable": {
                    "value": "gp_human0",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_545": {
                "variable": {
                    "value": "gp_human1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GPy.kern.RBF(input_dim=2, variance=1.0, lengthscale=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 + ConstantKernel() * RBF()",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantKernel_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RBF_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gen_GP.py": {
        "torch": {}
    },
    "launch_experiment.py": {
        "torch": {
            "load_84": {
                "f": {
                    "value": "os.path.join(path, 'context_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "os.path.join(path, 'qf1.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "os.path.join(path, 'qf2.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "os.path.join(path, 'vf.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "os.path.join(path, 'target_vf.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "os.path.join(path, 'policy.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/gen_GP_mismatch.py": {
        "torch": {}
    },
    "out_of_distribution_test/mismatch.py": {
        "torch": {
            "load_101": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'context_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'policy.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/plot_trajectories.py": {
        "torch": {
            "load_105": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'context_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'policy.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/core/logger.py": {
        "torch": {
            "save_256": {
                "obj": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/core.py": {
        "torch": {}
    },
    "out_of_distribution_test/rlkit/torch/data_management/normalizer.py": {
        "torch": {
            "clamp_23": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/distributions.py": {
        "torch": {
            "Normal_97": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "normal_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_117": {
                "input": {
                    "value": "1 - value * value + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_141": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_63": {
                "mean": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_72": {
                "mean": {
                    "value": "expand(self.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "expand(self.std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_114": {
                "input": {
                    "value": "(1 + value) / (1 - value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_139": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_132": {
                "loc": {
                    "value": "ptu.zeros(self.normal_mean.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.normal_std.size())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/modules.py": {
        "torch": {
            "SmoothL1Loss_11": {
                "variable": {
                    "value": "self.huber_loss_delta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.scale_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.center_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/networks.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_155": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/pytorch_util.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if _use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_121": {
                "mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/sac/agent.py": {
        "torch": {
            "clamp_14": {
                "variable": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_25": {
                "variable": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_117": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ptu.zeros(self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "kl_div_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(kl_divs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "task_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "task_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "[z.repeat(b, 1) for z in task_z]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(task_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, task_z.detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.reciprocal(sigmas_squared)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "mus / sigmas_squared",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o, a, r, no]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o, a, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.context, data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_130": {
                "variable": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params[..., self.latent_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "self.z_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p[0] for p in z_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p[1] for p in z_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "self.z_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_encoder(context)",
                            "Call"
                        ],
                        [
                            "params.view(context.size(0), -1, self.context_encoder.output_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[d.rsample() for d in posteriors]",
                            "ListComp"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reciprocal_15": {
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_118": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma_squared * torch.sum(mus / sigmas_squared, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(mus, dim=0)",
                            "Call"
                        ],
                        [
                            "-0.5 * n1 / n2",
                            "BinOp"
                        ],
                        [
                            "ptu.zeros(num_tasks, self.latent_dim)",
                            "Call"
                        ],
                        [
                            "params[..., :self.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_120": {
                "tensors": {
                    "value": "kl_divs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.distributions.kl.kl_divergence(post, prior) for post in posteriors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_118": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.ones(num_tasks, self.latent_dim)",
                            "Call"
                        ],
                        [
                            "ptu.zeros(num_tasks, self.latent_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_141": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_118": {
                "input": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_141": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_131": {
                "input": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sum(torch.reciprocal(sigmas_squared), dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(sigmas_squared, dim=0)",
                            "Call"
                        ],
                        [
                            "-0.5 * 1 / n2",
                            "BinOp"
                        ],
                        [
                            "F.softplus(params[..., self.latent_dim:])",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_141": {
                "input": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/sac/policies.py": {
        "torch": {
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.last_fc_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "LOG_SIG_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "LOG_SIG_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_94": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_104": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "out_of_distribution_test/rlkit/torch/sac/sac.py": {
        "torch": {
            "MSELoss_58": {
                "variable": {
                    "value": "self.qf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "self.vf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.vib_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "self.l2_reg_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_177": {
                "variable": {
                    "value": "min_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qf1(obs, actions, task_z.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "(q2_pred - q_target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/core/logger.py": {
        "torch": {
            "save_256": {
                "obj": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/core.py": {
        "torch": {}
    },
    "rlkit/torch/data_management/normalizer.py": {
        "torch": {
            "clamp_23": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/distributions.py": {
        "torch": {
            "Normal_97": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "normal_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_117": {
                "input": {
                    "value": "1 - value * value + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_141": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_63": {
                "mean": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_72": {
                "mean": {
                    "value": "expand(self.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "expand(self.std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_114": {
                "input": {
                    "value": "(1 + value) / (1 - value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_139": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Variable(Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_132": {
                "loc": {
                    "value": "ptu.zeros(self.normal_mean.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.normal_std.size())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/modules.py": {
        "torch": {
            "SmoothL1Loss_11": {
                "variable": {
                    "value": "self.huber_loss_delta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.scale_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.center_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/networks.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_155": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/pytorch_util.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if _use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_121": {
                "mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/sac/agent.py": {
        "torch": {
            "clamp_14": {
                "variable": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_25": {
                "variable": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_117": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ptu.zeros(self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "kl_div_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(kl_divs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "task_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "task_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ],
                        [
                            "[z.repeat(b, 1) for z in task_z]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(task_z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, task_z.detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.reciprocal(sigmas_squared)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "mus / sigmas_squared",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o, a, r, no]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o, a, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.context, data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_130": {
                "variable": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params[..., self.latent_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "self.z_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p[0] for p in z_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p[1] for p in z_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "self.z_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_encoder(context)",
                            "Call"
                        ],
                        [
                            "params.view(context.size(0), -1, self.context_encoder.output_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[d.rsample() for d in posteriors]",
                            "ListComp"
                        ],
                        [
                            "self.z",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reciprocal_15": {
                "input": {
                    "value": "sigmas_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(sigmas_squared, min=1e-07)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_118": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma_squared * torch.sum(mus / sigmas_squared, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(mus, dim=0)",
                            "Call"
                        ],
                        [
                            "-0.5 * n1 / n2",
                            "BinOp"
                        ],
                        [
                            "ptu.zeros(num_tasks, self.latent_dim)",
                            "Call"
                        ],
                        [
                            "params[..., :self.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_120": {
                "tensors": {
                    "value": "kl_divs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.distributions.kl.kl_divergence(post, prior) for post in posteriors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_118": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.ones(num_tasks, self.latent_dim)",
                            "Call"
                        ],
                        [
                            "ptu.zeros(num_tasks, self.latent_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_141": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_118": {
                "input": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_141": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_131": {
                "input": {
                    "value": "sigma_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sum(torch.reciprocal(sigmas_squared), dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(sigmas_squared, dim=0)",
                            "Call"
                        ],
                        [
                            "-0.5 * 1 / n2",
                            "BinOp"
                        ],
                        [
                            "F.softplus(params[..., self.latent_dim:])",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_141": {
                "input": {
                    "value": "self.z_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/sac/policies.py": {
        "torch": {
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.last_fc_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "LOG_SIG_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "LOG_SIG_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_94": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_104": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/sac/sac.py": {
        "torch": {
            "MSELoss_58": {
                "variable": {
                    "value": "self.qf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "self.vf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.vib_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "self.l2_reg_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_177": {
                "variable": {
                    "value": "min_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qf1(obs, actions, task_z.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "(q2_pred - q_target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test_navigation.py": {
        "torch": {
            "load_102": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'context_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "os.path.join(path_to_exp, 'policy.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}