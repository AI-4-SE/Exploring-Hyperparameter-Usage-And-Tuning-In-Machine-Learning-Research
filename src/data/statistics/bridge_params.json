{
    "semantic_retrieve.py": {
        "sklearn": {
            "cosine_similarity_154": {
                "variable": {
                    "value": "pos_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "origin_pos_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(origin_pos_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(origin_pos_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_pos_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bank_pos_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(bank_pos_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_155": {
                "variable": {
                    "value": "dep_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "origin_dep_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(origin_dep_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(origin_dep_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_dep_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bank_dep_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(bank_dep_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_156": {
                "variable": {
                    "value": "wrd_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "origin_wrd_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_word_embedding(origin_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ],
                        [
                            "get_word_embedding(origin_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_wrd_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_word_embedding(bank_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ],
                        [
                            "get_word_embedding(bank_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_305": {
                "variable": {
                    "value": "pos_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "sentence_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(sentence_pos_emb)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_pos_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bank_pos_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(bank_pos_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_306": {
                "variable": {
                    "value": "dep_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "sentence_dep_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(sentence_dep_emb)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_dep_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bank_dep_embs > 0).astype('float32')",
                            "Call"
                        ],
                        [
                            "(bank_dep_embs > 0).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_307": {
                "variable": {
                    "value": "wrd_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "sentence_wrd_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(sentence_wrd_emb)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "bank_wrd_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_word_embedding(bank_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ],
                        [
                            "get_word_embedding(bank_word_dict, word2id_dict, word2vec).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "train_bridge.py": {
        "sklearn": {},
        "torch": {
            "NLLLoss_340": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_345": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(self.testset)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "variable": {
                    "value": "dev_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(self.valset)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "prod_73": {
                "variable": {
                    "value": "n_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(p.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_404": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_405": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_440": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_441": {
                "type": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_269": {
                "variable": {
                    "value": "t_aspect_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_aspect_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(t_aspect_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_271": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "opinion_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "sentiment_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_144": {
                "variable": {
                    "value": "aspect_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aspect_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(aspect_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "domain_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(domain_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "opinion_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "sentiment_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_67": {
                "device": {
                    "value": "opt.device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "-1 * torch.log(t_aspect_outputs) * t_aspect_y.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_150": {
                "input": {
                    "value": "-1 * torch.log(aspect_outputs) * aspect_y.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "-1 * torch.log(domain_outputs) * domain_y.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_273": {
                "input": {
                    "value": "t_aspect_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(t_aspect_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_150": {
                "input": {
                    "value": "aspect_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(aspect_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_152": {
                "input": {
                    "value": "domain_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(domain_outputs, 1e-05, 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers/GraphConvolution.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(text.float(), self.weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers/attention.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.w_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.w_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(qx, kt)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.div(qkt, math.sqrt(self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "F.tanh(torch.matmul(kq, self.weight))",
                            "Call"
                        ],
                        [
                            "torch.bmm(qw, kt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(qx, kt)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.div(qkt, math.sqrt(self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "F.tanh(torch.matmul(kq, self.weight))",
                            "Call"
                        ],
                        [
                            "torch.bmm(qw, kt)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_k(k).view(mb_size, k_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "kx.permute(2, 0, 1, 3).contiguous().view(-1, k_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(output, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(q_len, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(q, dim=1)",
                            "Call"
                        ],
                        [
                            "self.q.expand(mb_size, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(k, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_68": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_q(q).view(mb_size, q_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "qx.permute(2, 0, 1, 3).contiguous().view(-1, q_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_71": {
                "variable": {
                    "value": "qkt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_q(q).view(mb_size, q_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "qx.permute(2, 0, 1, 3).contiguous().view(-1, q_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_72": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qkt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(qx, kt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "math.sqrt(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_87": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(score, kx)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.shape[0]",
                            "Subscript"
                        ],
                        [
                            "k.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "kxx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_k(k).view(mb_size, k_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "kx.permute(2, 0, 1, 3).contiguous().view(-1, k_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "qxx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_q(q).view(mb_size, q_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "qx.permute(2, 0, 1, 3).contiguous().view(-1, q_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "kq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kxx, qxx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(kq, self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "qw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_q(q).view(mb_size, q_len, self.n_head, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "qx.permute(2, 0, 1, 3).contiguous().view(-1, q_len, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(qx, self.weight)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "kt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "kx.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "input": {
                    "value": "kq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((kxx, qxx), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/decnn_conv.py": {
        "torch": {
            "Conv1d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((self.conv1(inputs), self.conv2(inputs)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "(self.conv1(inputs), self.conv2(inputs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/dynamic_rnn.py": {
        "torch": {
            "pack_padded_sequence_65": {
                "variable": {
                    "value": "x_emb_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[x_sort_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_len[x_sort_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(ht, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ht, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_42": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(ht, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ht, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RNN_46": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_60": {
                "input": {
                    "value": "-x_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_61": {
                "input": {
                    "value": "x_sort_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(-x_len)[1].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_87": {
                "input": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/point_wise_feed_forward.py": {
        "torch": {
            "Conv1d_15": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_inner_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_inner_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "layers/squeeze_embedding.py": {
        "torch": {
            "pack_padded_sequence_32": {
                "variable": {
                    "value": "x_emb_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[x_sort_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_len[x_sort_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_emb_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_len, batch_first=self.batch_first)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_27": {
                "input": {
                    "value": "-x_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_28": {
                "input": {
                    "value": "x_sort_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(-x_len)[1].long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/decnn_base.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "global_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "global_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(global_emb, dtype=torch.float32).to(self.opt.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.emb_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.dep_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.emb_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.aspect_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt.class_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.domain_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opt.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_prob_per",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lmprobs.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lm_emb_per",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_emb(lmwords)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "prob_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aspect_classifier(enhanced_conv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_105": {
                "variable": {
                    "value": "score_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(score)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "sumx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(torch.exp(score), mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "concat_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[main_emb, auxi_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.gate_syn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * opt.emb_dim, 2 * opt.emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.gate_sem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * opt.emb_dim, 2 * opt.emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.gate_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * opt.emb_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "(summary, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "enhanced_conv.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "prob_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.domain_classifier(reverse_summary)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "2 * opt.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * opt.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "2 * opt.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * opt.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "4 * opt.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[self.pos_emb(pos), self.dep_emb(dep)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "enhanced_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gate_global * enhanced_emb_syn, (1 - gate_global) * enhanced_emb_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[enhanced_emb_syn, enhanced_emb_sem]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "rand_214": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "y.view(-1, prob_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_221": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_216": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}