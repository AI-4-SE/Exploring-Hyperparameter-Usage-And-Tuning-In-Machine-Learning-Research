{
    "script/build_pixel_and_feat_hdf5.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "resnet_extractor",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_raw[key][start_idx:start_idx + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "script/build_pixel_hdf5.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "resnet_extractor",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/attentions.py": {
        "torch": {
            "softmax_39": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_41": {
                "variable": {
                    "value": "s_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,isf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_42": {
                "variable": {
                    "value": "t_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,itf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, s_ctx, t_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_82": {
                "variable": {
                    "value": "diff_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,istk->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, diff_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_123": {
                "variable": {
                    "value": "s_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,isf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_124": {
                "variable": {
                    "value": "t_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,itf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_126": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, s_ctx, t_ctx, query * s_ctx, query * t_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_175": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst, isk, itk->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, pad_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "trg",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trg, pad_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_218": {
                "variable": {
                    "value": "s_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,isf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_219": {
                "variable": {
                    "value": "t_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,itf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_221": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, s_ctx, t_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_258": {
                "variable": {
                    "value": "rel_key",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_key.unsqueeze(1) + t_key.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_261": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_263": {
                "variable": {
                    "value": "rel_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,istk->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_265": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, rel_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "s_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,isf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_318": {
                "variable": {
                    "value": "t_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,itf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_320": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, s_ctx, t_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_360": {
                "variable": {
                    "value": "rel_key",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_key.unsqueeze(1) + t_key.unsqueeze(2)) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_363": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_367": {
                "variable": {
                    "value": "rel_value",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_value.unsqueeze(1) + t_value.unsqueeze(2)) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_368": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,istk->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_370": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_410": {
                "variable": {
                    "value": "rel_key",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_key.unsqueeze(1) + t_key.unsqueeze(2)) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_413": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_417": {
                "variable": {
                    "value": "rel_value",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(s_value.unsqueeze(1) + t_value.unsqueeze(2)) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_418": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,istk->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_420": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_439": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "s_key",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_key, pad_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "t_key",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_key, pad_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_465": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(b, l, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_467": {
                "variable": {
                    "value": "s_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,isf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_468": {
                "variable": {
                    "value": "t_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijst,itf->ijf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, diff_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s + 1, t + 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,istk->ijst', q, rel_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk,isk,itk->ijst', q, s_key, t_key) / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight.view(b, l, -1), dim=-1).view(b, l, s, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_470": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, s_ctx, t_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_37": {
                "equation": {
                    "value": "ijk,isk,itk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_78": {
                "equation": {
                    "value": "ijk,istk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_119": {
                "equation": {
                    "value": "ijk,isk,itk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_169": {
                "equation": {
                    "value": "ijk,isk,itk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_214": {
                "equation": {
                    "value": "ijk,isk,itk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_259": {
                "equation": {
                    "value": "ijk,istk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_311": {
                "equation": {
                    "value": "ijk,istk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_361": {
                "equation": {
                    "value": "ijk,istk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_411": {
                "equation": {
                    "value": "ijk,istk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_439": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_458": {
                "*size": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_462": {
                "equation": {
                    "value": "ijk,isk,itk->ijst",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ],
                        [
                            "self.query_linear(query)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data.py": {
        "torch": {
            "from_numpy_140": {
                "variable": {
                    "value": "inst",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(self.max_length, np.int64) * self.tok.pad_id",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "leng",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(inst)",
                            "Call"
                        ],
                        [
                            "2 + length",
                            "BinOp"
                        ],
                        [
                            "self.max_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "img0",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.img0_pixels[img_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.img1_pixels[img_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "img0",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.img0_feats[img_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.img1_feats[img_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/decoders.py": {
        "torch": {
            "Embedding_19": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_67": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_69": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_118": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.attention_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[OneAttention(hidden_size, hidden_size) for _ in range(self.heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_177": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_179": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_186": {
                "variable": {
                    "value": "self.attention_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[OneAttention(hidden_size, hidden_size) for _ in range(self.heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_243": {
                "variable": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijd,ikd->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q_fc(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(torch.cat((x, r), -1))",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijd,ikd->ijk', q, k)",
                            "Call"
                        ],
                        [
                            "logit / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_248": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logit, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, ctx, query * ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "(x, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/encoders.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearAct(output_dim * 2, output_dim, 'relu')",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ijd,ikd->ijk', src_value, trg_key) / math.sqrt(self.output_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "src_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(score, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trg_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc1(trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_35": {
                "equation": {
                    "value": "ijd,ikd->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "src_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc1(src)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "(src_value, src_value - src_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/listener.py": {
        "torch": {
            "BCEWithLogitsLoss_34": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "h_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "softmax_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.tok.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_124": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax_loss(input=logits[:, :-1, :].contiguous().view(-1, speaker.tok.vocab_size), target=inst[:, 1:].contiguous().view(-1))",
                            "Call"
                        ],
                        [
                            "loss.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "loss.sum(1) / (inst != speaker.tok.pad_id).cuda().sum(1).float()",
                            "BinOp"
                        ],
                        [
                            "torch.exp(loss)",
                            "Call"
                        ],
                        [
                            "self.speaker_score(self.true_speaker, src, trg, inst, leng, train=False)",
                            "Call"
                        ],
                        [
                            "self.bce_loss(input=logit, target=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_253": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "self.score_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.output, '%s.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__64": {
                "parameters": {
                    "value": "self.score_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch_ds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TorchDataset(dataset, task, max_length=args.max_input, img0_transform=img_transform, img1_transform=img_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ctx_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_dim + ctx_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_37": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_46": {
                "variable": {
                    "value": "weighted_context",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_feat, trg_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_105": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_155": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_157": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.q_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.k_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.v_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_dim + dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(q * k).sum(-1) / math.sqrt(self.dim)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_288": {
                "variable": {
                    "value": "att_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ],
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ],
                        [
                            "F.softmax(l, -1)",
                            "Call"
                        ],
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ],
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ],
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ],
                        [
                            "self.resnet_extractor.parameters()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v_layer(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_318": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_433": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_434": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_435": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_441": {
                "variable": {
                    "value": "self.attention_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[OneAttention(hidden_size, hidden_size) for _ in range(self.heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_489": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_490": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_491": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_497": {
                "variable": {
                    "value": "self.attention_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerAttention(hidden_size, ctx_size, hidden_size, merge_info=True).cuda() for _ in range(self.heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ],
                        [
                            "args.hid_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_553": {
                "variable": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijd,ikd->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q_layer(query)",
                            "Call"
                        ],
                        [
                            "q.view(batch_size, -1, 1, self.dim)",
                            "Call"
                        ],
                        [
                            "self.q_fc(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_557": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijd,ikd->ijk', q, k)",
                            "Call"
                        ],
                        [
                            "logit / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.classify(x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.classify(x).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_558": {
                "variable": {
                    "value": "ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logit, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, ctx, query * ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_584": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_608": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearAct(dim, dim // 2, 'relu', bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_620": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn",
                            "Name"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijd,ikd->ijk', q, k)",
                            "Call"
                        ],
                        [
                            "logit / math.sqrt(self.hid_dim)",
                            "BinOp"
                        ],
                        [
                            "self.fc(x).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.classify(x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.classify(x).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_635": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_640": {
                "variable": {
                    "value": "self.feat_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.feat_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_641": {
                "variable": {
                    "value": "self.feat_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.feat_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_647": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_648": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_649": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_658": {
                "variable": {
                    "value": "self.post_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_662": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearAct(hidden_size * 3, hidden_size, 'tanh')",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_696": {
                "variable": {
                    "value": "h0",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_703": {
                "variable": {
                    "value": "inst_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, inst.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_728": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_hid, trg_hid, inst_hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_746": {
                "variable": {
                    "value": "self.resnet_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_751": {
                "variable": {
                    "value": "self.feat_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.feat_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_752": {
                "variable": {
                    "value": "self.feat_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.feat_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_758": {
                "variable": {
                    "value": "self.w_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_759": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_760": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearAct(hidden_size * 3, hidden_size, 'tanh')",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_797": {
                "variable": {
                    "value": "h0",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_805": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_feat, trg_feat, inst_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "h_tilde",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_context, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "self.feat_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(os.path.join(DATA_ROOT, args.dataset, 'feat_mean.npy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "self.feat_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(os.path.join(DATA_ROOT, args.dataset, 'feat_std.npy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_621": {
                "equation": {
                    "value": "ij,ijk->ik",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logit, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_291": {
                "input": {
                    "value": "self.out_layer(torch.cat((att_vec, query), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_585": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_587": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_589": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(att_vec, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/param.py": {
        "torch": {}
    },
    "src/speaker.py": {
        "torch": {
            "CrossEntropyLoss_71": {
                "variable": {
                    "value": "self.softmax_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.tok.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(insts[:, 1:] != self.tok.pad_id).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "batch_reward",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward_func(uidXsents)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(batch_reward).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "h_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "h_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inst.size(0)",
                            "Call"
                        ],
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "args.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "word",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(batch_size, np.int64) * self.tok.bos_id",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(word).view(-1, 1).cuda()",
                            "Call"
                        ],
                        [
                            "m.sample()",
                            "Call"
                        ],
                        [
                            "word.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_262": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_358": {
                "variable": {
                    "value": "enc_state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path + '_enc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_359": {
                "variable": {
                    "value": "dec_state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "dec_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path + '_dec.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_351": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "encoder_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.output, '%s_enc.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_352": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "decoder_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.output, '%s_dec.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "baseline",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "max_reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reward_func(uidXsents)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "baseline",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_272": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_275": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__99": {
                "parameters": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_297": {
                "tensors": {
                    "value": "entropies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_298": {
                "tensors": {
                    "value": "hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fan_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fan_out",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_14": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}