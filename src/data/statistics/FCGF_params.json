{
    "util/visualization.py": {
        "sklearn": {
            "TSNE_44": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones((len(coords), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "np.array(pcd.points)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/data_loaders.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(xyz_batch0, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(xyz_batch1, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(trans_batch, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(matching_inds_batch, 0).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_666": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(phase, transform=t.Compose(transforms), random_scale=use_random_scale, random_rotation=use_random_rotation, config=config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase != 'test'",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_pair_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_496": {
                "variable": {
                    "value": "xyz0_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data0['pcd']",
                            "Subscript"
                        ],
                        [
                            "scale * xyz0",
                            "BinOp"
                        ],
                        [
                            "self.apply_transform(xyz0, T0)",
                            "Call"
                        ],
                        [
                            "np.array(pcd0.points)",
                            "Call"
                        ],
                        [
                            "xyzr0[:, :3]",
                            "Subscript"
                        ],
                        [
                            "self.apply_transform(xyz0, T0)",
                            "Call"
                        ],
                        [
                            "scale * xyz0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_497": {
                "variable": {
                    "value": "xyz1_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data1['pcd']",
                            "Subscript"
                        ],
                        [
                            "scale * xyz1",
                            "BinOp"
                        ],
                        [
                            "self.apply_transform(xyz1, T1)",
                            "Call"
                        ],
                        [
                            "np.array(pcd1.points)",
                            "Call"
                        ],
                        [
                            "xyzr1[:, :3]",
                            "Subscript"
                        ],
                        [
                            "self.apply_transform(xyz1, T1)",
                            "Call"
                        ],
                        [
                            "scale * xyz1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_523": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_train0",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_train1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_526": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz0_th / self.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_527": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz1_th / self.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "np.array(matching_inds[batch_id]) + curr_start_inds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_520": {
                "*size": {
                    "value": "(npts0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_521": {
                "*size": {
                    "value": "(npts1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/eval.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_dist.detach().unsqueeze(1).cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat(inds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/metrics.py": {
        "torch": {
            "clamp_16": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt((xyz0_est - xyz0_gth).pow(2).sum(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "max_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_24": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(A.unsqueeze(1) - B.unsqueeze(0)).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "input": {
                    "value": "(xyz0_est - xyz0_gth).pow(2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "input": {
                    "value": "D2 + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "(A.unsqueeze(1) - B.unsqueeze(0)).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_8": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.sigmoid(output) > 0.5).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/trainer.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ExponentialLR_79": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.exp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_443": {
                "variable": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.isin(neg_keys0, pos_keys, assume_unique=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_445": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.isin(neg_keys1, pos_keys, assume_unique=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_447": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(posF0 - posF1).pow(2).sum(1) - self.pos_thresh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_448": {
                "variable": {
                    "value": "neg_loss0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.neg_thresh - D01min[mask0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_448": {
                "variable": {
                    "value": "neg_loss0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_449": {
                "variable": {
                    "value": "neg_loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.neg_thresh - D10min[mask1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_449": {
                "variable": {
                    "value": "neg_loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_558": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(posF0 - posF1).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_572": {
                "variable": {
                    "value": "rand_pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(F0[anchors] - F1[positives]).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_573": {
                "variable": {
                    "value": "rand_neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(F0[anchors] - F1[negatives]).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_575": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_pos_dist + self.neg_thresh - rand_neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_575": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_701": {
                "variable": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.isin(neg_keys0, pos_keys, assume_unique=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_703": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.logical_not(np.isin(neg_keys1, pos_keys, assume_unique=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_705": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(posF0 - posF1).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_719": {
                "variable": {
                    "value": "rand_pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(F0[anchors] - F1[positives]).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_720": {
                "variable": {
                    "value": "rand_neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(F0[anchors] - F1[negatives]).pow(2).sum(1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_722": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([rand_pos_dist + self.neg_thresh - rand_neg_dist, pos_dist[mask0] + self.neg_thresh - D01min[mask0], pos_dist[mask1] + self.neg_thresh - D10min[mask1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_722": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(config.resume)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'config': self.config, 'best_val': self.best_val, 'best_val_epoch': self.best_val_epoch, 'best_val_metric': self.best_val_metric}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'{filename}.pth')",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_104": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "neg_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neg_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(np.random.rand(int(N_neg), 2) * np.array([[N0, N1]])).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "self.generate_rand_negative_pairs(pos_pairs, max(N0, N1), N0, N1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(neg_pairs).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_261": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.neg_thresh - ((neg0 - neg1).pow(2).sum(1) + 0.0001).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_261": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_569": {
                "ndarray": {
                    "value": "rand_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(np.isin(rand_neg_keys, pos_keys, assume_unique=False))",
                            "Call"
                        ],
                        [
                            "np.logical_not(np.isin(rand_neg_keys, pos_keys, assume_unique=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_716": {
                "ndarray": {
                    "value": "rand_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(np.isin(rand_neg_keys, pos_keys, assume_unique=False))",
                            "Call"
                        ],
                        [
                            "np.logical_not(np.isin(rand_neg_keys, pos_keys, assume_unique=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_723": {
                "tensors": {
                    "value": "[rand_pos_dist + self.neg_thresh - rand_neg_dist, pos_dist[mask0] + self.neg_thresh - D01min[mask0], pos_dist[mask1] + self.neg_thresh - D10min[mask1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/transforms.py": {
        "torch": {
            "randn_like_29": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats + (torch.randn_like(feats) * self.sigma + self.mu)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/residual_block.py": {
        "torch": {}
    },
    "model/resunet.py": {
        "torch": {
            "norm_189": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/simpleunet.py": {
        "torch": {
            "norm_128": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_297": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_501": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/benchmark_3dmatch.py": {
        "torch": {
            "device_230": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.with_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_kitti.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.save_dir + '/checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "T_ransac",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ransac_result.transformation.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/misc.py": {
        "torch": {
            "tensor_88": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(feats)",
                            "Call"
                        ],
                        [
                            "feats[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(feats, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(xyz / voxel_size)",
                            "Call"
                        ],
                        [
                            "ME.utils.batched_coordinates([coords])",
                            "Call"
                        ],
                        [
                            "torch.tensor(coords, dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/transform_estimation.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_7": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_8": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_19": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_20": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_31": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_32": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "A0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inverse_81": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.t().mm(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_92": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_96": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pts0.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_52": {
                "input": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(R @ torch.t(pts)) + T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(A0, A1, A2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "(pts1[:, 0] - pts0[:, 0], pts1[:, 1] - pts0[:, 1], pts1[:, 2] - pts0[:, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_86": {
                "input": {
                    "value": "pts0 - pts1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}