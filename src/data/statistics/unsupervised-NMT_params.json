{
    "cnn_text_discriminator.py": {
        "tensorflow": {
            "get_variable_scope_39": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [input_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_50": {
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, 0, scope='transform_lin_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, 0, scope='transform_s_lin_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in tf.global_variables() if self.scope in param.name]",
                            "ListComp"
                        ],
                        [
                            "[param for param in tf.trainable_variables() if self.scope in param.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_310": {
                "variable": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddingtable', initializer=tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_x, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_312": {
                "variable": {
                    "value": "sentence_embed_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_328": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_337": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dis_dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_keep_prob",
                            "variable"
                        ],
                        [
                            "[self.dis_dropout_keep_prob] * len(devices)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "xw_plus_b_339": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_highway, drop_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_highway, dis_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "ypred_for_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_342": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_343": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_345": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(input_y_trans, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_346": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_350": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_387": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_389": {
                "variable": {
                    "value": "accu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_414": {
                "variable": {
                    "value": "clip_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*clip_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'conv_maxpool-%s' % filter_size",
                            "BinOp"
                        ],
                        [
                            "'conv_maxpool-%s' % filter_size",
                            "BinOp"
                        ],
                        [
                            "'bn'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'cnn_layer'",
                            "Method Argument"
                        ],
                        [
                            "'text_discnn'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_155": {
                "variable": {
                    "value": "self.ptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_201": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in tf.global_variables() if self.scope in param.name]",
                            "ListComp"
                        ],
                        [
                            "[param for param in tf.trainable_variables() if self.scope in param.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.max_len, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_222": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_223": {
                "variable": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_306": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_308": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_324": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_351": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_352": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_sen",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_102": {
                "variable": {
                    "value": "bias_add",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_sen, W, stride, padding, name='conv')",
                            "Call"
                        ],
                        [
                            "cnn_layer(filter_size, self.dim_word, num_filter, scope=scope, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "cnn_layer(filter_size, self.dim_word, num_filter, scope=scope, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_158": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "variable": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [self.max_len, None], name='input_x')",
                            "Call"
                        ],
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_243": {
                "variable": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.num_classes, None], name='input_y')",
                            "Call"
                        ],
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ],
                        [
                            "input_y",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_251": {
                "variable": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddingtable', initializer=tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_x, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_252": {
                "variable": {
                    "value": "sentence_embed_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_271": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_highway, drop_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_highway, dis_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_272": {
                "variable": {
                    "value": "ypred_for_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_273": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_274": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_276": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(input_y_trans, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_277": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_291": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_345": {
                "input": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_346": {
                "x": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_353": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_360": {
                "variable": {
                    "value": "self.dis_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.max_len, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_361": {
                "variable": {
                    "value": "self.dis_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_362": {
                "variable": {
                    "value": "self.dis_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_364": {
                "variable": {
                    "value": "dis_input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.dis_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_365": {
                "variable": {
                    "value": "dis_input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.dis_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "self.dis_ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(devices)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "self.scope or 'cnn_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "self_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_161": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "self.scope or 'disCNN'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "global_variables_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_variable_initialized_200": {
                "variable": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_239": {
                "device_name": {
                    "value": "'/gpu:%d' % int(gpu_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_249": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_261": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_292": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_293": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_359": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_412": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_s",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_value(var, -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "self_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "conv_batch_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_164": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_187": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_245": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_276": {
                "input": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_277": {
                "x": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_412": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_s",
                            "variable"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_185": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_374": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(train_it)",
                            "Call"
                        ],
                        [
                            "zip(range(self.gpu_num), x_data_list, y_data_list)",
                            "Call"
                        ],
                        [
                            "x.tolist()",
                            "Call"
                        ],
                        [
                            "dis_length_prepare(x, y, self.num_classes, self.max_len)",
                            "Call"
                        ],
                        [
                            "disTrain",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_378": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_87": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, dim_word, 1, num_filter]",
                            "List"
                        ],
                        [
                            "[filter_size, self.dim_word, 1, num_filter]",
                            "List"
                        ],
                        [
                            "[filter_size, self.dim_word, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_187": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_188": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_42": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_train.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_25": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_27": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_samples.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_20": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "cast_1112": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(encoder_output)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "FLOAT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "to_float_1118": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.train.learning_rate_warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1119": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(global_step)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_1129": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 512 ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_550": {
                "variable": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_584": {
                "variable": {
                    "value": "encoder_shared",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "self.config.vari_emb_scale * encoder_output_vari + (1 - self.config.vari_emb_scale) * encoder_output",
                            "BinOp"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=attention_bias_ignore_padding(encoder_padding), total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_598": {
                "variable": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(enc_output), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_652": {
                "variable": {
                    "value": "initial_y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_653": {
                "variable": {
                    "value": "initial_i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_654": {
                "variable": {
                    "value": "(_, sample_result, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda a, _1, _2: a < max_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "recurrency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recurrency",
                            "Call"
                        ],
                        [
                            "recurrency",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(initial_i, initial_y, encoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(initial_i.get_shape(), initial_y.get_shape(), encoder_output.get_shape())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_694": {
                "variable": {
                    "value": "init_given_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "given_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[:, :given_num_pl]",
                            "Subscript"
                        ],
                        [
                            "given_y",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - given_num_pl]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_695": {
                "variable": {
                    "value": "(_, roll_sample, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda a, _1, _2: a < max_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "recurrency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recurrency",
                            "Call"
                        ],
                        [
                            "recurrency",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(given_num_pl, init_given_y, encoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(given_num_pl.get_shape(), init_given_y.get_shape(), encoder_output.get_shape())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_953": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_954": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_955": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1126": {
                "values": {
                    "value": "(tf.ones_like(input[:, :1]) * pad, input[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1186": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1187": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_21": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.src_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.dst_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.reward_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.given_num_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "given_num_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.src_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.dst_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.reward_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.given_num_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "given_num_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_357": {
                "variable": {
                    "value": "self.acc_aa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_aa_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_358": {
                "variable": {
                    "value": "self.acc_bb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_bb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "self.acc_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "self.acc_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_362": {
                "variable": {
                    "value": "self.loss_aa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_aa_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_363": {
                "variable": {
                    "value": "self.loss_bb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_364": {
                "variable": {
                    "value": "self.loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_365": {
                "variable": {
                    "value": "self.loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_367": {
                "variable": {
                    "value": "self.gan_loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gan_loss_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "self.gan_loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gan_loss_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_380": {
                "variable": {
                    "value": "self.generate_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "generate_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "self.generate_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "generate_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_382": {
                "variable": {
                    "value": "self.roll_generate_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "roll_generate_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "self.roll_generate_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "roll_generate_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_405": {
                "variable": {
                    "value": "(grads_aa, self.grads_norm_aa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_aa]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_410": {
                "variable": {
                    "value": "(grads_bb, self.grads_norm_bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_bb]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_416": {
                "variable": {
                    "value": "(grads_ab, self.grads_norm_ab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_ab]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_421": {
                "variable": {
                    "value": "(grads_ba, self.grads_norm_ba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_ba]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_426": {
                "variable": {
                    "value": "(gan_grads_ab, self.gan_grads_norm_ab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in gan_grads_and_vars_ab]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_431": {
                "variable": {
                    "value": "(gan_grads_ba, self.gan_grads_norm_ba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in gan_grads_and_vars_ba]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_469": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_574": {
                "variable": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "self.config.vari_emb_scale * encoder_output_vari + (1 - self.config.vari_emb_scale) * encoder_output",
                            "BinOp"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=attention_bias_ignore_padding(encoder_padding), total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.residual_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_612": {
                "variable": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "decoder_output + add_timing_signal_1d(decoder_output)",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(decoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_share, 'dec_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(cur_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(given_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=None, bias=self_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=enc_output, bias=encoder_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_vanilla_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, conv_hidden_relu(inputs=decoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.residual_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_642": {
                "variable": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_643": {
                "variable": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_644": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_645": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_int32_646": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_647": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_y[:, :i], next_sample]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_648": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([cur_y[:, :i], next_sample], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - 1 - i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([given_y[:, :given_num], next_sample_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - given_num - 1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - 1 - i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_683": {
                "variable": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_684": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_685": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(next_probs)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_686": {
                "variable": {
                    "value": "next_sample_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_687": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[given_y[:, :given_num], next_sample_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_688": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([cur_y[:, :i], next_sample], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - 1 - i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([given_y[:, :given_num], next_sample_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - given_num - 1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - given_num - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_736": {
                "input": {
                    "value": "1.0 - tf.to_float(encoder_padding)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_825": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding_for_gate + enc_out_for_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_980": {
                "variable": {
                    "value": "last_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(last_logits, dimension=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_981": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "last_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output[:, -1], vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_982": {
                "variable": {
                    "value": "(last_k_scores, last_k_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(last_logits)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.config.test.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_int32_983": {
                "variable": {
                    "value": "last_k_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_k_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(z, k=self.config.test.beam_size, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(last_k_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_996": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(Y, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_997": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_998": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(Y, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_999": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1011": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1012": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(logits, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1013": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(logits, [-1, vocab_size]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, [l_shape[0], l_shape[1], l_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[l_shape[0], l_shape[1], l_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1014": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_1033": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(logits, dimension=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1034": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(Y, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1042": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.pow(enc_output, 2), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1067": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1073": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_1074": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1097": {
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1111": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_1120": {
                "x": {
                    "value": "(global_step + 1.0) * warmup_steps ** (-1.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(global_step + 1.0) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1133": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1149": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1165": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1184": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_450": {
                "name": {
                    "value": "acc_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_451": {
                "name": {
                    "value": "acc_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_452": {
                "name": {
                    "value": "acc_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_453": {
                "name": {
                    "value": "acc_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_455": {
                "name": {
                    "value": "loss_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_456": {
                "name": {
                    "value": "loss_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_457": {
                "name": {
                    "value": "loss_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_458": {
                "name": {
                    "value": "loss_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_462": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_464": {
                "name": {
                    "value": "grads_norm_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_465": {
                "name": {
                    "value": "grads_norm_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_466": {
                "name": {
                    "value": "grads_norm_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_467": {
                "name": {
                    "value": "grads_norm_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_509": {
                "variable": {
                    "value": "self.src_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_510": {
                "variable": {
                    "value": "self.dst_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_545": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_546": {
                "variable": {
                    "value": "self.k_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "k_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_547": {
                "variable": {
                    "value": "self.k_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "k_scores_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_572": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_598": {
                "input_tensor": {
                    "value": "tf.abs(enc_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_628": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "self.config.vari_emb_scale * encoder_output_vari + (1 - self.config.vari_emb_scale) * encoder_output",
                            "BinOp"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=attention_bias_ignore_padding(encoder_padding), total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_664": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "self.config.vari_emb_scale * encoder_output_vari + (1 - self.config.vari_emb_scale) * encoder_output",
                            "BinOp"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=attention_bias_ignore_padding(encoder_padding), total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_707": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_745": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_795": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_803": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_978": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_994": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1010": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1031": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_1129": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "512 ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1137": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1143": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1153": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1159": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1169": {
                "variable": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1171": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_1172": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([shape, [vocab_size]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1177": {
                "variable": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1178": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_1179": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([shape, [vocab_size]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config.train.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_52": {
                "variable": {
                    "value": "self.gan_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.train.gan_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_508": {
                "device_name": {
                    "value": "self.sync_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_525": {
                "variable": {
                    "value": "self.encoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_585": {
                "input": {
                    "value": "encoder_shared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_output, axis=1)",
                            "Call"
                        ],
                        [
                            "encoder_shared + tf.random_normal(shape=tf.shape(encoder_shared), mean=0.0, stddev=1.0, dtype=tf.float32, name=scope + 'normal_random')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_598": {
                "x": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_736": {
                "x": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(input_x, 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.reduce_sum(tf.abs(enc_output), axis=-1), 0.0)",
                            "Call"
                        ],
                        [
                            "input_padding",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_scope_801": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_808": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_813": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_814": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size], initializer=tf.random_normal_initializer(0.0, 512 ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [input_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_820": {
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "res + bias",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_960": {
                "checkpoint_dir": {
                    "value": "self.config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arg_max_980": {
                "input": {
                    "value": "last_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output[:, -1], vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_996": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1012": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arg_max_1033": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_1034": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1035": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1040": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1042": {
                "input_tensor": {
                    "value": "tf.pow(enc_output, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1126": {
                "input": {
                    "value": "input[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_1135": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1141": {
                "name_or_scope": {
                    "value": "src_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1151": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1157": {
                "name_or_scope": {
                    "value": "dst_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1167": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1174": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "self.sync_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_54": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_122": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cache[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_125": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "daisy_chain_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "daisy_chain_getter",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_265": {
                "variable": {
                    "value": "whole_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_616": {
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "decoder_output + add_timing_signal_1d(decoder_output)",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(decoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_share, 'dec_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(cur_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(given_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=None, bias=self_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=enc_output, bias=encoder_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_vanilla_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, conv_hidden_relu(inputs=decoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_712": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_751": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_812": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_816": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_1016": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.reshape(Y, [-1]), vocab_size, 1.0, 0.0) * tf.reshape(probs, [-1, vocab_size]), 1) * tf.reshape(reward, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1042": {
                "x": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1168": {
                "input": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1172": {
                "values": {
                    "value": "[shape, [vocab_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1176": {
                "input": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1179": {
                "values": {
                    "value": "[shape, [vocab_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_151": {
                "device_name": {
                    "value": "device_setter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "balanced_device_setter",
                            "variable"
                        ]
                    ]
                }
            },
            "device_520": {
                "device_name": {
                    "value": "lambda op: self.choose_device(op, device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_532": {
                "device_name": {
                    "value": "lambda op: self.choose_device(op, device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_float_1035": {
                "x": {
                    "value": "tf.equal(preds, Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_60": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1017": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.reshape(Y, [-1]), vocab_size, 1.0, 0.0) * tf.reshape(probs, [-1, vocab_size])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1019": {
                "tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_1035": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_output(dec_b_out, vocab_size, scope=scope_out, reuse=i > 0 or None)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.arg_max(logits, dimension=-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_1017": {
                "indices": {
                    "value": "tf.reshape(Y, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_1018": {
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(logits, [-1, vocab_size]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, [l_shape[0], l_shape[1], l_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1017": {
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "share_function.py": {
        "tensorflow": {
            "get_variable_scope_340": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_355": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_371": {
                "variable": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_397": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_398": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_407": {
                "variable": {
                    "value": "(grad, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_426": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_427": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'tableLookup'",
                            "Method Argument"
                        ],
                        [
                            "'ff'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_349": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'tableLookup'",
                            "Method Argument"
                        ],
                        [
                            "'ff'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inputShape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_374": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [input_size, output_size], initializer=tf.constant_initializer(W_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, inputShape[1], output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.add(output, bias)",
                            "Call"
                        ],
                        [
                            "activation(output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inputShape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_377": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [input_size, output_size], initializer=tf.constant_initializer(W_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_379": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, inputShape[1], output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.add(output, bias)",
                            "Call"
                        ],
                        [
                            "activation(output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', output_size, initializer=tf.constant_initializer(bias_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_393": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_422": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_346": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(embeddings_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_361": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(W_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_369": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_436": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disTrain",
                            "variable"
                        ],
                        [
                            "gen_train",
                            "variable"
                        ],
                        [
                            "gen_force_train",
                            "variable"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((n_samples, maxlen)).astype('int32')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_344": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_359": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_364": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_346": {
                "value": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_weight(vocab_size, embedding_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_361": {
                "value": {
                    "value": "W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_weight(input_size, output_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_364": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((output_size,)).astype(precision)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensor2tensor/avg_checkpoints.py": {
        "tensorflow": {
            "list_variables_60": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_57": {
                "msg": {
                    "value": "Reading variables and averaging checkpoints:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_checkpoint_66": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "info_94": {
                "msg": {
                    "value": "Averaged checkpoints saved in %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_39": {
                "filename": {
                    "value": "path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_40": {
                "filename": {
                    "value": "path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "%s ",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "info_71": {
                "msg": {
                    "value": "Read from checkpoint %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_76": {
                "name": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_values[v].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtypes[name]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_79": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_80": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(placeholders, assign_ops, six.iteritems(var_values))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensor2tensor/common_attention.py": {
        "tensorflow": {
            "to_float_57": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_66": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_144": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-1], [n, -1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-2], [-1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_288": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_291": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_293": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_113": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [prepad, postpad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_175": {
                "x": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "a": {
                    "value": "split_last_dimension(x, num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows, q_cols, m_rows, m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_297": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows * m_rows, q_cols * m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_299": {
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth, 1, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_336": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_62": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_109": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_160": {
                "input_": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5))) * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_start[:]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_size[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_174": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_187": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_196": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_210": {
                "x": {
                    "value": "memory_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_228": {
                "values": {
                    "value": "[tf.shape(x)[:-1], [n, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_245": {
                "values": {
                    "value": "[tf.shape(x)[:-2], [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_339": {
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query_antecedent, memory_antecedent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_385": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth * 2 + total_value_depth, 1, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(memory_antecedent, total_key_depth + total_value_depth, 1, name='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[total_key_depth, total_key_depth, total_value_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_396": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth * 2 + total_value_depth, 1, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(memory_antecedent, total_key_depth + total_value_depth, 1, name='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[total_key_depth, total_value_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_61": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_65": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_65": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_108": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "name": {
                    "value": "name + '_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, depth ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_63": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_66": {
                "x1": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_116": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_116": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_normal_initializer_158": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "depth ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_228": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_245": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensor2tensor/common_layers.py": {
        "tensorflow": {
            "reduce_mean_44": {
                "variable": {
                    "value": "saturation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(tf.abs(x) - saturation_limit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "saturation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(tf.abs(x) - saturation_limit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_56": {
                "variable": {
                    "value": "inv_base",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(min_value) / float(max_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.contrib.framework.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_79": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[299, 299, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_91": {
                "variable": {
                    "value": "xshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[xshape[0], xshape[1] * xshape[2], xshape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_274": {
                "variable": {
                    "value": "inputs._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[static_shape[0], None, None, static_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_339": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_347": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[x, epsilon, scale, bias]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[dy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_899": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_938": {
                "variable": {
                    "value": "padded_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_timing_signal(length, min_timescale, max_timescale, num_timescales)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, depth - 2 * num_timescales]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_1073": {
                "variable": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(x > 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_1279": {
                "variable": {
                    "value": "eos_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_1280": {
                "variable": {
                    "value": "sentence_num",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.equal(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_1281": {
                "variable": {
                    "value": "in_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.mod(sentence_num, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1286": {
                "variable": {
                    "value": "nonboilerplate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sentence_num_plus_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(sentence_num_plus_one, [[0, 0], [2, 0], [0, 0], [0, 0]])[:, :-2, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1287": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(nonboilerplate, in_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "x_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - x_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_68": {
                "variable": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[1] * tf.shape(x)[2] * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_82": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_83": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_85": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_108": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ],
                        [
                            "eu.ConvertGradientToTensor(embedding_var)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('targets_embedding', [targets_vocab_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_242": {
                "variable": {
                    "value": "cond_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(2 * (kernel_size[1] // 2) * dilation_rate[1])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_247": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [height_padding, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ],
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_278": {
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : conv2d_kernel((kernel_size[0], 1), 'small')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : conv2d_kernel(kernel_size, 'std')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_289": {
                "input": {
                    "value": "conv(tf.expand_dims(inputs, 2), filters, (kernel_size, 1), **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_365": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_513": {
                "variable": {
                    "value": "inputs._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[static_shape[0], None, None, static_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_607": {
                "variable": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ],
                        [
                            "eu.ConvertGradientToTensor(embedding_var)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('targets_embedding', [targets_vocab_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.space_to_depth(targets, block_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(targets, [targets_shape[0], targets_shape[1] // block_size, 1, channels * block_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_609": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_610": {
                "variable": {
                    "value": "flat_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, factor, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_620": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_block(tf.concat([flat_x, shifted_targets], axis=3), hidden_size, dilations_and_kernels, padding='LEFT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_634": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_722": {
                "variable": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_723": {
                "variable": {
                    "value": "source_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_724": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[target_shape[0], target_shape[1] * target_shape[2], target_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[source_shape[0], source_shape[1] * source_shape[2], source_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_730": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_734": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_737": {
                "variable": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_905": {
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_965": {
                "input": {
                    "value": "tf.matrix_band_part(tf.ones([target_length, source_length]), -1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1020": {
                "variable": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, source_length, num_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1022": {
                "variable": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, num_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1025": {
                "variable": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1026": {
                "variable": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1029": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1036": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1053": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1054": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source_attention)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, target_length, attention_size])",
                            "Call"
                        ],
                        [
                            "_maybe_transform(output, output_size, transform_output, 'attention_output')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1055": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source_attention)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, target_length, attention_size])",
                            "Call"
                        ],
                        [
                            "_maybe_transform(output, output_size, transform_output, 'attention_output')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, attention_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_1137": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "do_conv(reset * x, 'candidate', 0.0, padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_1157": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_norm(gates, 4 * filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1186": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "do_conv(reset * x, 'candidate', 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1196": {
                "variable": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.transpose(base_filter)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1197": {
                "input": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.transpose(base_filter), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(shift_filter, 0), 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_1198": {
                "variable": {
                    "value": "x_shifted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.transpose(base_filter), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(shift_filter, 0), 3)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_1213": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[axis]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[axis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_1229": {
                "variable": {
                    "value": "paddings1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "padding_list(length_diff1, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1230": {
                "variable": {
                    "value": "paddings2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "padding_list(length_diff2, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1231": {
                "variable": {
                    "value": "res_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(padding_list(length_diff1, x), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_1232": {
                "variable": {
                    "value": "res_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(padding_list(length_diff2, y), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1254": {
                "x": {
                    "value": "tf.not_equal(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_1259": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1333": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[-1]",
                            "Subscript"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - label_smoothing",
                            "BinOp"
                        ],
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "low_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_1338": {
                "variable": {
                    "value": "xentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "saturating_sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(0.0, 1.2 * y - 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "features": {
                    "value": "tf.abs(x) - saturation_limit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_46": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(x_shifted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "features": {
                    "value": "tf.abs(x) - saturation_limit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(x, -1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_58": {
                "x": {
                    "value": "float(max_step) - step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "standardize_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, x)",
                            "Call"
                        ],
                        [
                            "emb_x * multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], static_shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_stride2_multistep",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "deconv_stride2_multistep",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_198": {
                "variable": {
                    "value": "cur_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_279": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "separable_conv2d_327": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_339": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_340": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_379": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "noam_norm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_434": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_488": {
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_505": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [height_padding, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_515": {
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.pool(inputs, window_size_small, pooling_type, padding, strides=strides_small)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.nn.pool(inputs, window_size, pooling_type, padding, strides=strides)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_532": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_block_downsample",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_584": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decompress_batch_seqcnn",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, targets]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "space_to_depth_596": {
                "variable": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_599": {
                "variable": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[targets_shape[0], targets_shape[1] // block_size, 1, channels * block_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_605": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "targets_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[targets_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_613": {
                "input": {
                    "value": "shifted_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])[:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([pad_value, x], axis=1)[:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([pad_value, x], axis=1)[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "shift_left(flat_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "depth_to_space_627": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_629": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_638": {
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "targets_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_672": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "moe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_721": {
                "name": {
                    "value": "simple_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rsqrt_731": {
                "x": {
                    "value": "tf.to_float(tf.shape(target)[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "tensor": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_759": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multiscale_conv_sum",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_837": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_with_pools",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_902": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_904": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_934": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_935": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_939": {
                "tensor": {
                    "value": "padded_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(signal, [[0, 0], [0, depth - 2 * num_timescales]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_953": {
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1002": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1033": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('mask') if 'mask' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1039": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, num_heads, target_length, source_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1041": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_1042": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_1046": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1047": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, source_length, 3, (num_heads + extra_heads) // 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_1050": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1073": {
                "x": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_1074": {
                "x": {
                    "value": "1.0 - frac + math.exp(-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1087": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_hidden_relu",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1090": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1101": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(inputs, hidden_size, kernel_size, activation=tf.nn.relu, name='conv1', **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1.0 - dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1108": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(h, output_size, (1, 1), name='conv2', **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ret, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.logical_and(nonboilerplate, in_target))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1133": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_gru",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1149": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_lstm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1182": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "diagonal_conv_gru",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_1190": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(do_conv(reset * x, 'candidate', 0.0, padding))",
                            "Call"
                        ],
                        [
                            "tf.tanh(do_conv(reset * x, 'candidate', 0.0))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(candidate, 1.0 - dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_1210": {
                "name": {
                    "value": "pad_to_same_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1245": {
                "name": {
                    "value": "pad_with_zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_1254": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1279": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_1281": {
                "x1": {
                    "value": "sentence_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(eos_mask, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1284": {
                "tensor": {
                    "value": "sentence_num_plus_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [2, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_1287": {
                "x": {
                    "value": "nonboilerplate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(sentence_num_plus_one, shifted)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.mod(sentence_num, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1313": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1314": {
                "name": {
                    "value": "padded_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1325": {
                "name": {
                    "value": "smoothing_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.2 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_46": {
                "features": {
                    "value": "x_shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, shift_filter, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_56": {
                "x": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_69": {
                "x": {
                    "value": "tf.sqrt(x_variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rsqrt(num_pixels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, x)",
                            "Call"
                        ],
                        [
                            "emb_x * multiplier",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_122": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_124": {
                "values": {
                    "value": "[pad_value, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_131": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "values": {
                    "value": "[pad_value, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "thicker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(cur, output_filters * 2, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv1d' + str(i))",
                            "Call"
                        ],
                        [
                            "conv(cur, output_filters * 4, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv2d' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[cur_shape[0], cur_shape[1] * 2, 1, output_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_215": {
                "input": {
                    "value": "thicker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(cur, output_filters * 2, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv1d' + str(i))",
                            "Call"
                        ],
                        [
                            "conv(cur, output_filters * 4, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv2d' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_222": {
                "variable": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cur)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda idx=i: deconv1d(cur, idx)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda idx=i: deconv2d(cur, idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_243": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_290": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(parts, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_382": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "ndims - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_383": {
                "x": {
                    "value": "tf.to_float(shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_500": {
                "variable": {
                    "value": "cond_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(2 * (window_size[1] // 2))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_516": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_592": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_615": {
                "values": {
                    "value": "[flat_x, shifted_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_731": {
                "x": {
                    "value": "tf.shape(target)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_733": {
                "input": {
                    "value": "tf.squeeze(bias, axis=[2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_736": {
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(attention, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_776": {
                "inputs": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_845": {
                "inputs": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sin_905": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_905": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_953": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_966": {
                "shape": {
                    "value": "[target_length, source_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1003": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1004": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1005": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_1051": {
                "name": {
                    "value": "local_attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_1103": {
                "name": {
                    "value": "hidden_density_logit",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "relu_density_logit(h, list(range(inputs.shape.ndims - 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1159": {
                "x": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_1159": {
                "x": {
                    "value": "new_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(g[0]) * x + tf.sigmoid(g[1]) * tf.tanh(g[3])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1211": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1212": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_1320": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_fn(pad_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1327": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1334": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "x_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - x_mean), axis=[1, 2, 3], keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_69": {
                "x": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.shape(x)[1] * tf.shape(x)[2] * 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_243": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_244": {
                "value": {
                    "value": "2 * (kernel_size[1] // 2) * dilation_rate[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_279": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_309": {
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "abs_sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "separability if separability > 0 else -1 * separability",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_initializer_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_370": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_383": {
                "x": {
                    "value": "shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_400": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.residual_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pool_517": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "window_shape": {
                    "value": "window_size_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(window_size[0], 1)",
                            "Tuple"
                        ]
                    ]
                },
                "pooling_type": {
                    "value": "pooling_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(strides[0], 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "pool_520": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "window_shape": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                },
                "pooling_type": {
                    "value": "pooling_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_733": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('layer_norm_bias', [filters], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_736": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_903": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_1129": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_start",
                            "Method Argument"
                        ],
                        [
                            "bias_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_1158": {
                "x": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_1158": {
                "x": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_1178": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_start",
                            "Method Argument"
                        ],
                        [
                            "bias_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1227": {
                "shape": {
                    "value": "[tf.rank(arg) - 3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_223": {
                "x": {
                    "value": "tf.shape(cur)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_243": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "'part_%d' % split_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_320": {
                "values": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_439": {
                "features": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_439": {
                "features": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_501": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_516": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_621": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_622": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_623": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_731": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_1037": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1225": {
                "shape": {
                    "value": "[tf.rank(arg) - 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_1330": {
                "x": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - label_smoothing",
                            "BinOp"
                        ],
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1331": {
                "x": {
                    "value": "low_confidence + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_501": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_502": {
                "value": {
                    "value": "2 * (window_size[1] // 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_630": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1330": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_313": {
                "input": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split in enumerate(tf.split(inputs, abs_sep, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters // separability",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "separable_conv2d_317": {
                "input": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split in enumerate(tf.split(inputs, abs_sep, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "filters // abs_sep",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_1227": {
                "input": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_1225": {
                "input": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tensor2tensor/expert_utils.py": {
        "tensorflow": {
            "unstack_352": {
                "variable": {
                    "value": "(batch, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_354": {
                "variable": {
                    "value": "ret_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(indices, [-1]) + tf.div(tf.range(batch * k), k) * n",
                            "BinOp"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "batch * n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "noisy_top_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_top_values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_408": {
                "variable": {
                    "value": "threshold_if_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(top_values_flat, threshold_positions_if_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_410": {
                "variable": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noisy_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_values",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "threshold_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.gather(top_values_flat, threshold_positions_if_in), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_414": {
                "variable": {
                    "value": "threshold_if_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(top_values_flat, threshold_positions_if_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_421": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(noisy_values, threshold_if_in)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "prob_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_NormalDistributionCDF(clean_values - threshold_if_in, noise_stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prob_if_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_NormalDistributionCDF(clean_values - threshold_if_out, noise_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_466": {
                "variable": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(load, [tf.shape(load)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_1231": {
                "variable": {
                    "value": "sampled_log_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sampled_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(features, sampled_params, transpose_b=True) - sampler.log_expected_count(sampled_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SampledLogDenominator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_1233": {
                "variable": {
                    "value": "sampled_classes_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.fill(tf.shape(sampled_classes), float('-inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "sampled_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(sampler.sample)",
                            "Call"
                        ],
                        [
                            "sampled_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_1238": {
                "variable": {
                    "value": "combined_log_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([sampled_log_denominator, target_log_denominator])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_1283": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(SampledSoftmaxLoss, features, sampler, num_classes, target_classes, target_params, sampled_classes, sampled_params)",
                            "Call"
                        ],
                        [
                            "data_parallelism(tf.multiply, ret, target_weights)",
                            "Call"
                        ],
                        [
                            "data_parallelism(tf.reduce_sum, ret)",
                            "Call"
                        ],
                        [
                            "tf.add_n(ret)",
                            "Call"
                        ],
                        [
                            "tf.identity(v._ref())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Parallel(self._expert_devices, tf.concat, TransposeListOfLists(dispatched), 0)",
                            "Call"
                        ],
                        [
                            "Parallel(self._expert_devices, ConvertGradientToTensor, ret)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_356": {
                "tensor": {
                    "value": "ret_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(tf.reshape(values, [-1]), indices_flat, batch * n)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_481": {
                "input_tensor": {
                    "value": "tf.to_float(gates > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_504": {
                "variable": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_526": {
                "variable": {
                    "value": "self._w_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_gate' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hp.input_size, hp.num_experts]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_833": {
                "variable": {
                    "value": "primary_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Parallel(datashard_devices, tf.reduce_sum, primary_gates, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_835": {
                "variable": {
                    "value": "primary_smooth_load",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "primary_smooth_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(datashard_devices, self._primary_gating.Eval, xs, train, [summaries] + [False] * (num_datashards - 1))",
                            "Call"
                        ],
                        [
                            "tf.add_n(primary_smooth_load)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_836": {
                "variable": {
                    "value": "primary_true_load",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Parallel(datashard_devices, _GatesToLoad, primary_gates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_864": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "secondary_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(expert_devices, [m.Eval for m in self._secondary_moe], secondary_input, train, primary_expert_to_gates, [summaries] + [False] * (n1 - 1), primary_expert_to_identifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_915": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.transpose(gates) > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_916": {
                "variable": {
                    "value": "(self._expert_index, self._batch_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(tf.transpose(gates) > 0))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_917": {
                "variable": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_int32(gates > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_918": {
                "variable": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(self._gates, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._batch_index * num_experts + self._expert_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_934": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(inp, self._batch_index)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_957": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvertGradientToTensor(tf.concat(expert_out, 0))",
                            "Call"
                        ],
                        [
                            "stitched * tf.expand_dims(self._nonzero_gates, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.shape(self._gates)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_1039": {
                "variable": {
                    "value": "expert_part_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.stack([self._dispatchers[d].part_sizes for d in xrange(self._num_datashards)])",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "self._num_experts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_1118": {
                "variable": {
                    "value": "self._part_sizes_by_expert",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.stack(part_sizes_by_datashard)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_352": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_353": {
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_401": {
                "input": {
                    "value": "clean_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_402": {
                "input": {
                    "value": "noisy_top_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_top_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_409": {
                "params": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(noisy_top_values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "threshold_positions_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch) * m + k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_412": {
                "x": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(noisy_values, threshold_if_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_415": {
                "params": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(noisy_top_values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "threshold_positions_if_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "threshold_positions_if_in - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_439": {
                "x": {
                    "value": "tf.size(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_440": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_441": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_466": {
                "tensor": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(load)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_467": {
                "input_tensor": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(load, [tf.shape(load)[0], -1]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_481": {
                "x": {
                    "value": "gates > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "top_k_498": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(indices), num=2)",
                            "Call"
                        ],
                        [
                            "six.iteritems(kwargs)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_508": {
                "values": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_508": {
                "x": {
                    "value": "tf.stack(indices, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_531": {
                "variable": {
                    "value": "self._w_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_noise' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hp.input_size, hp.num_experts]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_551": {
                "variable": {
                    "value": "clean_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_565": {
                "variable": {
                    "value": "top_k_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "top_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MyTopK(logits, min(hp.k + 1, hp.num_experts))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, hp.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_566": {
                "variable": {
                    "value": "top_k_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MyTopK(logits, min(hp.k + 1, hp.num_experts))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, hp.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_567": {
                "variable": {
                    "value": "top_k_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "top_k_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(top_logits, [0, 0], [-1, hp.k])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_935": {
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(inp, self._batch_index)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_968": {
                "value": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1227": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "sampled_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParallelEmbeddingLookup(params, sampled_classes, data_parallelism)",
                            "Call"
                        ],
                        [
                            "sampled_params",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_1229": {
                "input_tensor": {
                    "value": "target_params * features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_1234": {
                "dims": {
                    "value": "tf.shape(sampled_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1237": {
                "params": {
                    "value": "sampled_classes_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(tf.fill(tf.shape(sampled_classes), float('-inf')), sampled_classes, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_classes",
                            "Method Argument"
                        ],
                        [
                            "target_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_1239": {
                "values": {
                    "value": "[sampled_log_denominator, target_log_denominator]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_150": {
                "value": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_353": {
                "x": {
                    "value": "tf.range(batch * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(indices), num=2)",
                            "Call"
                        ],
                        [
                            "six.iteritems(kwargs)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_375": {
                "x": {
                    "value": "x / (math.sqrt(2) * stddev + 1e-20)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_439": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_441": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_442": {
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x) / float_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_468": {
                "input_tensor": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(load, [tf.shape(load)[0], -1]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_503": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_507": {
                "indices": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_549": {
                "name_or_scope": {
                    "value": "NoisyTopKGating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_553": {
                "variable": {
                    "value": "raw_noise_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_573": {
                "variable": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_663": {
                "input": {
                    "value": "per_example_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_675": {
                "input_tensor": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_865": {
                "values": {
                    "value": "secondary_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(expert_devices, [m.Eval for m in self._secondary_moe], secondary_input, train, primary_expert_to_gates, [summaries] + [False] * (n1 - 1), primary_expert_to_identifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_865": {
                "input": {
                    "value": "primary_smooth_load / (primary_true_load + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_915": {
                "condition": {
                    "value": "tf.transpose(gates) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_int32_917": {
                "x": {
                    "value": "gates > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_919": {
                "tensor": {
                    "value": "self._gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_954": {
                "values": {
                    "value": "expert_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expert_out",
                            "Method Argument"
                        ],
                        [
                            "expert_out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_956": {
                "input": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1040": {
                "values": {
                    "value": "[self._dispatchers[d].part_sizes for d in xrange(self._num_datashards)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_1114": {
                "data": {
                    "value": "tf.ones_like(gates)",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1119": {
                "values": {
                    "value": "part_sizes_by_datashard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(_PartSizes, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_partition_1123": {
                "data": {
                    "value": "tf.range(tf.size(gates))",
                    "type": "Call",
                    "possible_values": []
                },
                "partitions": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1234": {
                "input": {
                    "value": "sampled_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(sampler.sample)",
                            "Call"
                        ],
                        [
                            "sampled_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "name": {
                    "value": "'%s_layer_%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_sizes[layer:layer + 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_258": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cache[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_261": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_276": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_287": {
                "name": {
                    "value": "'parallel_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_579": {
                "name": {
                    "value": "importance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(gates, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_580": {
                "name": {
                    "value": "load",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_958": {
                "input": {
                    "value": "self._gates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_1052": {
                "device_name": {
                    "value": "self._datashard_devices[d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_1115": {
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_275": {
                "device_name": {
                    "value": "self._caching_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 and self._reuse else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "caching_device": {
                    "value": "self._caching_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DaisyChainGetter",
                            "variable"
                        ],
                        [
                            "CachingGetter",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "shape_466": {
                "input": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_555": {
                "x": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_560": {
                "name": {
                    "value": "noisy_logits",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "noisy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_logits + tf.random_normal(tf.shape(clean_logits)) * noise_stddev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_561": {
                "name": {
                    "value": "noise_stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "noise_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.nn.softplus(raw_noise_stddev) + hp.noise_epsilon) * tf.to_float(train)",
                            "BinOp"
                        ],
                        [
                            "noise_stddev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_579": {
                "input_tensor": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_752": {
                "device_name": {
                    "value": "expert_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_762": {
                "device_name": {
                    "value": "expert_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_915": {
                "a": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_1124": {
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_293": {
                "device_name": {
                    "value": "self._devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_554": {
                "features": {
                    "value": "raw_noise_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self._w_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_557": {
                "input": {
                    "value": "clean_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self._w_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1055": {
                "values": {
                    "value": "expert_output_parts_t[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "text_discriminator_pretrain.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_22": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_28": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_29": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_32": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_38": {
                "checkpoint_dir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_unsupervised.py": {
        "tensorflow": {
            "ConfigProto_29": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_35": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_38": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "src_embed_a",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_aembedding/src_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "src_embed_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_bembedding/src_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "dst_embed_a",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_aembedding/dst_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "dst_embed_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_bembedding/dst_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_45": {
                "checkpoint_dir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/cnn_text_discriminator.py": {
        "tensorflow": {
            "get_variable_scope_38": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [input_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_49": {
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, 0, scope='transform_lin_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, 0, scope='transform_s_lin_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_209": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in tf.global_variables() if self.scope in param.name]",
                            "ListComp"
                        ],
                        [
                            "[param for param in tf.trainable_variables() if self.scope in param.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_315": {
                "variable": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddingtable', initializer=tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_x, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_317": {
                "variable": {
                    "value": "sentence_embed_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_333": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_342": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dis_dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_keep_prob",
                            "variable"
                        ],
                        [
                            "[self.dis_dropout_keep_prob] * len(devices)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "xw_plus_b_344": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_highway, drop_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_highway, dis_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "variable": {
                    "value": "ypred_for_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_347": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_348": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_350": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(input_y_trans, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_351": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_355": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_392": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_394": {
                "variable": {
                    "value": "accu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_419": {
                "variable": {
                    "value": "clip_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*clip_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'conv_maxpool-%s' % filter_size",
                            "BinOp"
                        ],
                        [
                            "'conv_maxpool-%s' % filter_size",
                            "BinOp"
                        ],
                        [
                            "'bn'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'cnn_layer'",
                            "Method Argument"
                        ],
                        [
                            "'text_discnn'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_159": {
                "variable": {
                    "value": "self.ptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_206": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in tf.global_variables() if self.scope in param.name]",
                            "ListComp"
                        ],
                        [
                            "[param for param in tf.trainable_variables() if self.scope in param.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.max_len, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_313": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_329": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_356": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_357": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_sen",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_101": {
                "variable": {
                    "value": "bias_add",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_sen, W, stride, padding, name='conv')",
                            "Call"
                        ],
                        [
                            "cnn_layer(filter_size, self.dim_word, num_filter, scope=scope, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "cnn_layer(filter_size, self.dim_word, num_filter, scope=scope, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_162": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [self.max_len, None], name='input_x')",
                            "Call"
                        ],
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.num_classes, None], name='input_y')",
                            "Call"
                        ],
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ],
                        [
                            "input_y",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_256": {
                "variable": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddingtable', initializer=tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embeddingtable')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_x_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_x, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "sentence_embed_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embeddingtable, input_x_trans)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_270": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=pooled_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_273": {
                "variable": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_inputs(gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_276": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_highway, drop_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_highway, dis_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_277": {
                "variable": {
                    "value": "ypred_for_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_278": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_279": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(h_drop, W, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_281": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "tf.argmax(scores, 1, name='prediction')",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(input_y_trans, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_296": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_350": {
                "input": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_351": {
                "x": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_358": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_365": {
                "variable": {
                    "value": "self.dis_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.max_len, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "self.dis_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_367": {
                "variable": {
                    "value": "self.dis_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_369": {
                "variable": {
                    "value": "dis_input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.dis_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_370": {
                "variable": {
                    "value": "dis_input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.dis_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "self.dis_ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(devices)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "self.scope or 'cnn_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_165": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "self.scope or 'disCNN'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "global_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_variable_initialized_205": {
                "variable": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_244": {
                "device_name": {
                    "value": "'/gpu:%d' % int(gpu_device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_252": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_253": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_266": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "conv.conv_op(sentence_embed_expanded, strides, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_297": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_298": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', initializer=tf.constant(0.1, shape=[self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_364": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_417": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_s",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_value(var, -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "self_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "conv_batch_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_168": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "embeddingtable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddingtable",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size_s, self.dim_word], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "model_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_281": {
                "input": {
                    "value": "input_y_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_y, [1, 0])",
                            "Call"
                        ],
                        [
                            "input_y",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(predictions, tf.argmax(input_y_trans, 1))",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_299": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=scores, labels=input_y_trans)",
                            "Call"
                        ],
                        [
                            "self.build_model(reuse_var=reuse_var, gpu_device=gpu_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_417": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_s",
                            "variable"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_83": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_190": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_379": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(train_it)",
                            "Call"
                        ],
                        [
                            "zip(range(self.gpu_num), x_data_list, y_data_list)",
                            "Call"
                        ],
                        [
                            "x.tolist()",
                            "Call"
                        ],
                        [
                            "dis_length_prepare(x, y, self.num_classes, self.max_len)",
                            "Call"
                        ],
                        [
                            "disTrain",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_383": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_86": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, dim_word, 1, num_filter]",
                            "List"
                        ],
                        [
                            "[filter_size, self.dim_word, 1, num_filter]",
                            "List"
                        ],
                        [
                            "[filter_size, self.dim_word, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_192": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_193": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/evaluate.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_42": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_43": {
                "checkpoint_dir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/gan_train.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_25": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_27": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/generate_samples.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_20": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/model.py": {
        "tensorflow": {
            "cast_1116": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(encoder_output)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "FLOAT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "to_float_1122": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.train.learning_rate_warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1123": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(global_step)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_1133": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 512 ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_551": {
                "variable": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_587": {
                "variable": {
                    "value": "encoder_shared",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_ignore_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=encoder_padding_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_601": {
                "variable": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(enc_output), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_655": {
                "variable": {
                    "value": "initial_y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_656": {
                "variable": {
                    "value": "initial_i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_657": {
                "variable": {
                    "value": "(_, sample_result, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda a, _1, _2: a < max_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "recurrency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recurrency",
                            "Call"
                        ],
                        [
                            "recurrency",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(initial_i, initial_y, encoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(initial_i.get_shape(), initial_y.get_shape(), encoder_output.get_shape())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_697": {
                "variable": {
                    "value": "init_given_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "given_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y[:, :given_num_pl]",
                            "Subscript"
                        ],
                        [
                            "given_y",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - given_num_pl]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_698": {
                "variable": {
                    "value": "(_, roll_sample, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda a, _1, _2: a < max_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "recurrency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recurrency",
                            "Call"
                        ],
                        [
                            "recurrency",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(given_num_pl, init_given_y, encoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(given_num_pl.get_shape(), init_given_y.get_shape(), encoder_output.get_shape())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_957": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_958": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_959": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1130": {
                "values": {
                    "value": "(tf.ones_like(input[:, :1]) * pad, input[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1190": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1191": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_21": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.src_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.dst_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.reward_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.given_num_a_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "given_num_a_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.src_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.dst_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.reward_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.given_num_b_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "given_num_b_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_358": {
                "variable": {
                    "value": "self.acc_aa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_aa_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "self.acc_bb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_bb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "self.acc_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_361": {
                "variable": {
                    "value": "self.acc_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acc_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_363": {
                "variable": {
                    "value": "self.loss_aa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_aa_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_364": {
                "variable": {
                    "value": "self.loss_bb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_365": {
                "variable": {
                    "value": "self.loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "self.loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "self.gan_loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gan_loss_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_369": {
                "variable": {
                    "value": "self.gan_loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gan_loss_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_381": {
                "variable": {
                    "value": "self.generate_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "generate_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_382": {
                "variable": {
                    "value": "self.generate_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "generate_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "self.roll_generate_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "roll_generate_ab_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_384": {
                "variable": {
                    "value": "self.roll_generate_ba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "roll_generate_ba_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_406": {
                "variable": {
                    "value": "(grads_aa, self.grads_norm_aa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_aa]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_411": {
                "variable": {
                    "value": "(grads_bb, self.grads_norm_bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_bb]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_417": {
                "variable": {
                    "value": "(grads_ab, self.grads_norm_ab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_ab]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_422": {
                "variable": {
                    "value": "(grads_ba, self.grads_norm_ba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in grads_and_vars_ba]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_427": {
                "variable": {
                    "value": "(gan_grads_ab, self.gan_grads_norm_ab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in gan_grads_and_vars_ab]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_432": {
                "variable": {
                    "value": "(gan_grads_ba, self.gan_grads_norm_ba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[gv[0] for gv in gan_grads_and_vars_ba]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.train.grads_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_470": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_568": {
                "variable": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_ignore_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=encoder_padding_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.residual_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_615": {
                "variable": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "decoder_output + add_timing_signal_1d(decoder_output)",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(decoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_share, 'dec_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(cur_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(given_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=None, bias=self_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=enc_output, bias=encoder_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_vanilla_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, conv_hidden_relu(inputs=decoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.residual_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_645": {
                "variable": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_646": {
                "variable": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_647": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_648": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_int32_649": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_650": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_y[:, :i], next_sample]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_651": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([cur_y[:, :i], next_sample], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - 1 - i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([given_y[:, :given_num], next_sample_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - given_num - 1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - 1 - i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_686": {
                "variable": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_logits, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope_out, shared_embedding=self.config.train.shared_embedding, reuse=True)",
                            "Call"
                        ],
                        [
                            "next_logits[:, given_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_687": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(next_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_688": {
                "variable": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(next_probs)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_689": {
                "variable": {
                    "value": "next_sample_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_probs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_sample, -1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(next_sample)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_690": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[given_y[:, :given_num], next_sample_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_691": {
                "variable": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([cur_y[:, :i], next_sample], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - 1 - i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([given_y[:, :given_num], next_sample_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(next_y, [[0, 0], [0, max_len - given_num - 1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_len - given_num - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_740": {
                "input": {
                    "value": "1.0 - tf.to_float(encoder_padding)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_829": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding_for_gate + enc_out_for_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_984": {
                "variable": {
                    "value": "last_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(last_logits, dimension=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_985": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "last_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output[:, -1], vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_986": {
                "variable": {
                    "value": "(last_k_scores, last_k_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(last_logits)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.config.test.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_int32_987": {
                "variable": {
                    "value": "last_k_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_k_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(z, k=self.config.test.beam_size, sorted=False)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(last_k_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1000": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(Y, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_1001": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_1002": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(Y, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1003": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1015": {
                "variable": {
                    "value": "l_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1016": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(logits, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1017": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(logits, [-1, vocab_size]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, [l_shape[0], l_shape[1], l_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[l_shape[0], l_shape[1], l_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1018": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_1037": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(logits, dimension=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1038": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(Y, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1046": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.pow(enc_output, 2), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1071": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1077": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_1078": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1101": {
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1115": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_1124": {
                "x": {
                    "value": "(global_step + 1.0) * warmup_steps ** (-1.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(global_step + 1.0) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1137": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1169": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1188": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_451": {
                "name": {
                    "value": "acc_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_452": {
                "name": {
                    "value": "acc_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_453": {
                "name": {
                    "value": "acc_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_454": {
                "name": {
                    "value": "acc_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acc_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_456": {
                "name": {
                    "value": "loss_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_457": {
                "name": {
                    "value": "loss_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_458": {
                "name": {
                    "value": "loss_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_459": {
                "name": {
                    "value": "loss_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_463": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_465": {
                "name": {
                    "value": "grads_norm_aa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_aa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_466": {
                "name": {
                    "value": "grads_norm_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_bb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_467": {
                "name": {
                    "value": "grads_norm_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_ab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_468": {
                "name": {
                    "value": "grads_norm_ba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.grads_norm_ba",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_510": {
                "variable": {
                    "value": "self.src_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "src_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_511": {
                "variable": {
                    "value": "self.dst_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_pl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_546": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_547": {
                "variable": {
                    "value": "self.k_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "k_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_548": {
                "variable": {
                    "value": "self.k_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "k_scores_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_566": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_601": {
                "input_tensor": {
                    "value": "tf.abs(enc_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_612": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_631": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_ignore_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=encoder_padding_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_667": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "add_timing_signal_1d(encoder_output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(encoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_forward_padding, 1, scope + 'indep_block_forward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_backward_padding, 1, scope + 'indep_block_backward_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.build_enc_block(encoder_output, encoder_padding, bias_ignore_padding, layers_share, 'enc_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_rnn_emb(embedding, encoder_output, reuse_var=reuse, scope=scope + 'rnn_emb')",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "encoder_output * tf.expand_dims(1.0 - tf.to_float(encoder_padding), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "residual(encoder_output, multihead_attention(query_antecedent=encoder_output, memory_antecedent=None, bias=encoder_padding_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='encoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(encoder_output, conv_hidden_relu(inputs=encoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ],
                        [
                            "encoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_711": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_749": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_799": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_807": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_982": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_998": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1014": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1035": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_1133": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "512 ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1141": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1147": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1157": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1163": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1173": {
                "variable": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1175": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_1176": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([shape, [vocab_size]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1181": {
                "variable": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1182": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "get_weight(vocab_size, dense_size)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_1183": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([shape, [vocab_size]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "INT_TYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.int32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config.train.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_52": {
                "variable": {
                    "value": "self.gan_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.train.gan_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_509": {
                "device_name": {
                    "value": "self.sync_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "self.encoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_553": {
                "input": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(input_x, 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.reduce_sum(tf.abs(enc_output), axis=-1), 0.0)",
                            "Call"
                        ],
                        [
                            "encoder_padding",
                            "variable"
                        ],
                        [
                            "encoder_padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_554": {
                "input": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(input_x, 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.reduce_sum(tf.abs(enc_output), axis=-1), 0.0)",
                            "Call"
                        ],
                        [
                            "encoder_padding",
                            "variable"
                        ],
                        [
                            "encoder_padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_588": {
                "input": {
                    "value": "encoder_shared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_output, axis=1)",
                            "Call"
                        ],
                        [
                            "encoder_shared + tf.random_normal(shape=tf.shape(encoder_shared), mean=0.0, stddev=1.0, dtype=tf.float32, name=scope + 'normal_random')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_601": {
                "x": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_740": {
                "x": {
                    "value": "encoder_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(input_x, 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.reduce_sum(tf.abs(enc_output), axis=-1), 0.0)",
                            "Call"
                        ],
                        [
                            "encoder_padding",
                            "variable"
                        ],
                        [
                            "encoder_padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_805": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_812": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_817": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_818": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size], initializer=tf.random_normal_initializer(0.0, 512 ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [input_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_824": {
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "res + bias",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_964": {
                "checkpoint_dir": {
                    "value": "self.config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arg_max_984": {
                "input": {
                    "value": "last_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top(body_output=decoder_output[:, -1], vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_1000": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1016": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arg_max_1037": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(body_output, embedding_var, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, tf.concat([shape, [vocab_size]], 0))",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "top(body_output=decoder_output, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope, shared_embedding=self.config.train.shared_embedding, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_1038": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1039": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1044": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.not_equal(Y, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1046": {
                "input_tensor": {
                    "value": "tf.pow(enc_output, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1130": {
                "input": {
                    "value": "input[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_1139": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1145": {
                "name_or_scope": {
                    "value": "src_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1155": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1161": {
                "name_or_scope": {
                    "value": "dst_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_1171": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1178": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "self.sync_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_55": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_123": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cache[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_126": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "daisy_chain_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "daisy_chain_getter",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_266": {
                "variable": {
                    "value": "whole_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_619": {
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target(input_x, vocab_size=vocab_size, dense_size=self.config.hidden_units, scope=scope + 'embedding', shared_embedding=self.config.train.shared_embedding, reuse=reuse, multiplier=self.config.hidden_units ** 0.5 if self.config.scale_embedding else 1.0)",
                            "Call"
                        ],
                        [
                            "decoder_output + add_timing_signal_1d(decoder_output)",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(decoder_output, rate=self.config.residual_dropout_rate, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_share, 'dec_shared_block', reuse=reuse if step == 'f' else True)",
                            "Call"
                        ],
                        [
                            "self.build_dec_block(decoder_output, enc_output, encoder_attention_bias, self_attention_bias, layers_indep, scope + 'indep_block', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(cur_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.variational_decoder(shift_right(given_y), encoder_output, self.config.dec_layer_indep, self.config.dec_layer_share, vocab_size, scope=scope_dec, reuse=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "variable"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=None, bias=self_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_self_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, multihead_attention(query_antecedent=decoder_output, memory_antecedent=enc_output, bias=encoder_attention_bias, total_key_depth=self.config.hidden_units, total_value_depth=self.config.hidden_units, output_depth=self.config.hidden_units, num_heads=self.config.num_heads, dropout_rate=self.config.attention_dropout_rate if self.is_training else 0.0, name='decoder_vanilla_attention', summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "residual(decoder_output, conv_hidden_relu(inputs=decoder_output, hidden_size=4 * self.config.hidden_units, output_size=self.config.hidden_units, summaries=self._summary), dropout_rate=self.config.residual_dropout_rate, is_training=self.is_training)",
                            "Call"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ],
                        [
                            "decoder_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_716": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_755": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_803": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_816": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'rnn_emb'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_820": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_1020": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.reshape(Y, [-1]), vocab_size, 1.0, 0.0) * tf.reshape(probs, [-1, vocab_size]), 1) * tf.reshape(reward, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1046": {
                "x": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ],
                        [
                            "enc_output",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1172": {
                "input": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1176": {
                "values": {
                    "value": "[shape, [vocab_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1180": {
                "input": {
                    "value": "body_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(body_output, [-1, dense_size])",
                            "Call"
                        ],
                        [
                            "body_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1183": {
                "values": {
                    "value": "[shape, [vocab_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_58": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_152": {
                "device_name": {
                    "value": "device_setter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "balanced_device_setter",
                            "variable"
                        ]
                    ]
                }
            },
            "device_521": {
                "device_name": {
                    "value": "lambda op: self.choose_device(op, device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_533": {
                "device_name": {
                    "value": "lambda op: self.choose_device(op, device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_float_1039": {
                "x": {
                    "value": "tf.equal(preds, Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1021": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.reshape(Y, [-1]), vocab_size, 1.0, 0.0) * tf.reshape(probs, [-1, vocab_size])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1023": {
                "tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_1039": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_output(dec_b_out, vocab_size, scope=scope_out, reuse=i > 0 or None)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.arg_max(logits, dimension=-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_63": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_1021": {
                "indices": {
                    "value": "tf.reshape(Y, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_a",
                            "Attribute"
                        ],
                        [
                            "self.config.dst_vocab_size_b",
                            "Attribute"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_1022": {
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(logits, [-1, vocab_size]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(probs, [l_shape[0], l_shape[1], l_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1021": {
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/share_function.py": {
        "tensorflow": {
            "get_variable_scope_340": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_355": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_371": {
                "variable": {
                    "value": "inputShape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_397": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_398": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_407": {
                "variable": {
                    "value": "(grad, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_426": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_427": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grad, clip_c)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "zip(*average_grads)",
                            "Call"
                        ],
                        [
                            "[tf.clip_by_value(x, clip_min, clip_max) for x in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'tableLookup'",
                            "Method Argument"
                        ],
                        [
                            "'ff'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_349": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "'tableLookup'",
                            "Method Argument"
                        ],
                        [
                            "'ff'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inputShape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_374": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [input_size, output_size], initializer=tf.constant_initializer(W_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, inputShape[1], output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.add(output, bias)",
                            "Call"
                        ],
                        [
                            "activation(output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inputShape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_377": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_below",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state_below, [-1, inputShape[2]])",
                            "Call"
                        ],
                        [
                            "state_below",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [input_size, output_size], initializer=tf.constant_initializer(W_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_379": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, inputShape[1], output_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_below, matrix)",
                            "Call"
                        ],
                        [
                            "tf.add(output, bias)",
                            "Call"
                        ],
                        [
                            "activation(output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', output_size, initializer=tf.constant_initializer(bias_init), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_393": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_422": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_346": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(embeddings_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_361": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(W_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_369": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_436": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disTrain",
                            "variable"
                        ],
                        [
                            "gen_train",
                            "variable"
                        ],
                        [
                            "gen_force_train",
                            "variable"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen_x, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((maxlen, n_samples)).astype('int32')",
                            "Call"
                        ],
                        [
                            "numpy.zeros((n_samples, maxlen)).astype('int32')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_min",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_344": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_359": {
                "device_name": {
                    "value": "init_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_364": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_346": {
                "value": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_weight(vocab_size, embedding_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_361": {
                "value": {
                    "value": "W_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_weight(input_size, output_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_364": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((output_size,)).astype(precision)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/tensor2tensor/avg_checkpoints.py": {
        "tensorflow": {
            "list_variables_60": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_57": {
                "msg": {
                    "value": "Reading variables and averaging checkpoints:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_checkpoint_66": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "info_94": {
                "msg": {
                    "value": "Averaged checkpoints saved in %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_39": {
                "filename": {
                    "value": "path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_40": {
                "filename": {
                    "value": "path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "%s ",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "info_71": {
                "msg": {
                    "value": "Read from checkpoint %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_76": {
                "name": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_values[v].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtypes[name]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_79": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_80": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(placeholders, assign_ops, six.iteritems(var_values))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/tensor2tensor/common_attention.py": {
        "tensorflow": {
            "to_float_57": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_66": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_144": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-1], [n, -1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-2], [-1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_289": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_292": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_294": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_113": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [prepad, postpad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_175": {
                "x": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0 * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "-1000000000.0 * (1.0 - upper_triangle)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(memory_padding) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "a": {
                    "value": "split_last_dimension(x, num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows, q_cols, m_rows, m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_298": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows * m_rows, q_cols * m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_300": {
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth, 1, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_337": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_62": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_109": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_160": {
                "input_": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5))) * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_start[:]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_size[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_174": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_187": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_196": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_210": {
                "x": {
                    "value": "memory_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_229": {
                "values": {
                    "value": "[tf.shape(x)[:-1], [n, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_246": {
                "values": {
                    "value": "[tf.shape(x)[:-2], [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_273": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [total_key_depth, total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [total_key_depth, total_value_depth], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query_antecedent, memory_antecedent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_386": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth * 2 + total_value_depth, 1, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(memory_antecedent, total_key_depth + total_value_depth, 1, name='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[total_key_depth, total_key_depth, total_value_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.conv1d(query_antecedent, total_key_depth * 2 + total_value_depth, 1, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(memory_antecedent, total_key_depth + total_value_depth, 1, name='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[total_key_depth, total_value_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_61": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_65": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_65": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_108": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "name": {
                    "value": "name + '_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, depth ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_63": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_66": {
                "x1": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_116": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_116": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_normal_initializer_158": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "depth ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_229": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_246": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, summaries, image_shapes)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "common_layers.conv1d(x, output_depth, 1, name='output_transform')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/tensor2tensor/common_layers.py": {
        "tensorflow": {
            "reduce_mean_44": {
                "variable": {
                    "value": "saturation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(tf.abs(x) - saturation_limit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "saturation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(tf.abs(x) - saturation_limit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_56": {
                "variable": {
                    "value": "inv_base",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(min_value) / float(max_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.contrib.framework.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_79": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[299, 299, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_91": {
                "variable": {
                    "value": "xshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[xshape[0], xshape[1] * xshape[2], xshape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_274": {
                "variable": {
                    "value": "inputs._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[static_shape[0], None, None, static_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_339": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_347": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[x, epsilon, scale, bias]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[dy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_899": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_938": {
                "variable": {
                    "value": "padded_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_timing_signal(length, min_timescale, max_timescale, num_timescales)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, depth - 2 * num_timescales]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_1073": {
                "variable": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(x > 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduce_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_1279": {
                "variable": {
                    "value": "eos_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_1280": {
                "variable": {
                    "value": "sentence_num",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.equal(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_1281": {
                "variable": {
                    "value": "in_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.mod(sentence_num, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1286": {
                "variable": {
                    "value": "nonboilerplate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sentence_num_plus_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(sentence_num_plus_one, [[0, 0], [2, 0], [0, 0], [0, 0]])[:, :-2, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1287": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(nonboilerplate, in_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "x_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - x_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_68": {
                "variable": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[1] * tf.shape(x)[2] * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_82": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_83": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_85": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(images, [299, 299, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(images)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(images, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(images, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(images, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dense_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_108": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ],
                        [
                            "eu.ConvertGradientToTensor(embedding_var)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('targets_embedding', [targets_vocab_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_242": {
                "variable": {
                    "value": "cond_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(2 * (kernel_size[1] // 2) * dilation_rate[1])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_247": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [height_padding, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "str"
                        ],
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ],
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_278": {
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : conv2d_kernel((kernel_size[0], 1), 'small')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : conv2d_kernel(kernel_size, 'std')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_289": {
                "input": {
                    "value": "conv(tf.expand_dims(inputs, 2), filters, (kernel_size, 1), **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_365": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_513": {
                "variable": {
                    "value": "inputs._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[static_shape[0], None, None, static_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_607": {
                "variable": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [vocab_size, dense_size])",
                            "Call"
                        ],
                        [
                            "eu.ConvertGradientToTensor(embedding_var)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('targets_embedding', [targets_vocab_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.space_to_depth(targets, block_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(targets, [targets_shape[0], targets_shape[1] // block_size, 1, channels * block_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_609": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_610": {
                "variable": {
                    "value": "flat_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, factor, 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_620": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_block(tf.concat([flat_x, shifted_targets], axis=3), hidden_size, dilations_and_kernels, padding='LEFT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_634": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_722": {
                "variable": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_723": {
                "variable": {
                    "value": "source_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_724": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[target_shape[0], target_shape[1] * target_shape[2], target_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[source_shape[0], source_shape[1] * source_shape[2], source_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_730": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_734": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_737": {
                "variable": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_905": {
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_965": {
                "input": {
                    "value": "tf.matrix_band_part(tf.ones([target_length, source_length]), -1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1020": {
                "variable": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, source_length, num_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1022": {
                "variable": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, num_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1025": {
                "variable": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1026": {
                "variable": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1029": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(target, attention_size, transform_target, 'target_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_attention, [batch, target_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1036": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1053": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "source_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_maybe_transform(source, attention_size, transform_source, 'source_attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_attention, [batch, source_length, num_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_attention, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1054": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source_attention)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, target_length, attention_size])",
                            "Call"
                        ],
                        [
                            "_maybe_transform(output, output_size, transform_output, 'attention_output')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1055": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source_attention)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, target_length, attention_size])",
                            "Call"
                        ],
                        [
                            "_maybe_transform(output, output_size, transform_output, 'attention_output')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, attention_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_1137": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "do_conv(reset * x, 'candidate', 0.0, padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_1157": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_norm(gates, 4 * filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1186": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "do_conv(reset * x, 'candidate', 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1196": {
                "variable": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.transpose(base_filter)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1197": {
                "input": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.transpose(base_filter), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(shift_filter, 0), 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_1198": {
                "variable": {
                    "value": "x_shifted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "shift_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.transpose(base_filter), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(shift_filter, 0), 3)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_1213": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[axis]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[axis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_1229": {
                "variable": {
                    "value": "paddings1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "padding_list(length_diff1, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1230": {
                "variable": {
                    "value": "paddings2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "padding_list(length_diff2, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1231": {
                "variable": {
                    "value": "res_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(padding_list(length_diff1, x), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_1232": {
                "variable": {
                    "value": "res_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(padding_list(length_diff2, y), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1254": {
                "x": {
                    "value": "tf.not_equal(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_1259": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1333": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[-1]",
                            "Subscript"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - label_smoothing",
                            "BinOp"
                        ],
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "low_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_1338": {
                "variable": {
                    "value": "xentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "saturating_sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(0.0, 1.2 * y - 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "features": {
                    "value": "tf.abs(x) - saturation_limit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_46": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(x_shifted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "features": {
                    "value": "tf.abs(x) - saturation_limit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(x, -1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_58": {
                "x": {
                    "value": "float(max_step) - step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "standardize_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, x)",
                            "Call"
                        ],
                        [
                            "emb_x * multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], static_shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_stride2_multistep",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "deconv_stride2_multistep",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_198": {
                "variable": {
                    "value": "cur_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_279": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "separable_conv2d_327": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_339": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_340": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_379": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "noam_norm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_434": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_488": {
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_505": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [height_padding, 0], [width_padding, 0], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_515": {
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.pool(inputs, window_size_small, pooling_type, padding, strides=strides_small)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.nn.pool(inputs, window_size, pooling_type, padding, strides=strides)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_532": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_block_downsample",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_584": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decompress_batch_seqcnn",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, targets]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "space_to_depth_596": {
                "variable": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_599": {
                "variable": {
                    "value": "depth_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[targets_shape[0], targets_shape[1] // block_size, 1, channels * block_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_605": {
                "variable": {
                    "value": "embedding_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "targets_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[targets_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_613": {
                "input": {
                    "value": "shifted_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])[:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([pad_value, x], axis=1)[:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([pad_value, x], axis=1)[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "shift_left(flat_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "depth_to_space_627": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_629": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_638": {
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "targets_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_672": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "moe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_721": {
                "name": {
                    "value": "simple_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rsqrt_731": {
                "x": {
                    "value": "tf.to_float(tf.shape(target)[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "tensor": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, source)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_759": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multiscale_conv_sum",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_837": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_with_pools",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_902": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_904": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_934": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_935": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_939": {
                "tensor": {
                    "value": "padded_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(signal, [[0, 0], [0, depth - 2 * num_timescales]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_953": {
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1002": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1033": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('mask') if 'mask' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1039": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, num_heads, target_length, source_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1041": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_1042": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_1046": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1047": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, target_length, source_length, 3, (num_heads + extra_heads) // 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_1050": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1073": {
                "x": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_1074": {
                "x": {
                    "value": "1.0 - frac + math.exp(-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1087": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_hidden_relu",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1090": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1101": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(inputs, hidden_size, kernel_size, activation=tf.nn.relu, name='conv1', **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1.0 - dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1108": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(h, output_size, (1, 1), name='conv2', **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ret, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.logical_and(nonboilerplate, in_target))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1133": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_gru",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1149": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "conv_lstm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1182": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('name') + '_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "'conv_' + name_suffix",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "kwargs.pop('name') if 'name' in kwargs else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "diagonal_conv_gru",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_1190": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(do_conv(reset * x, 'candidate', 0.0, padding))",
                            "Call"
                        ],
                        [
                            "tf.tanh(do_conv(reset * x, 'candidate', 0.0))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(candidate, 1.0 - dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_1210": {
                "name": {
                    "value": "pad_to_same_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1245": {
                "name": {
                    "value": "pad_with_zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_1254": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1279": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_1281": {
                "x1": {
                    "value": "sentence_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(eos_mask, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1284": {
                "tensor": {
                    "value": "sentence_num_plus_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [2, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_1287": {
                "x": {
                    "value": "nonboilerplate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(sentence_num_plus_one, shifted)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.mod(sentence_num, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1313": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1314": {
                "name": {
                    "value": "padded_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1325": {
                "name": {
                    "value": "smoothing_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.2 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_46": {
                "features": {
                    "value": "x_shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, shift_filter, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_56": {
                "x": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_69": {
                "x": {
                    "value": "tf.sqrt(x_variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rsqrt(num_pixels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, x)",
                            "Call"
                        ],
                        [
                            "emb_x * multiplier",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_122": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_124": {
                "values": {
                    "value": "[pad_value, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_131": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "values": {
                    "value": "[pad_value, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "thicker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(cur, output_filters * 2, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv1d' + str(i))",
                            "Call"
                        ],
                        [
                            "conv(cur, output_filters * 4, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv2d' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[cur_shape[0], cur_shape[1] * 2, 1, output_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_215": {
                "input": {
                    "value": "thicker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(cur, output_filters * 2, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv1d' + str(i))",
                            "Call"
                        ],
                        [
                            "conv(cur, output_filters * 4, (1, 1), padding='SAME', activation=tf.nn.relu, name='deconv2d' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_222": {
                "variable": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cur)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda idx=i: deconv1d(cur, idx)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda idx=i: deconv2d(cur, idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_243": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_290": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(parts, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_382": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "ndims - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_383": {
                "x": {
                    "value": "tf.to_float(shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_500": {
                "variable": {
                    "value": "cond_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(inputs)[2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(2 * (window_size[1] // 2))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_516": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_592": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_615": {
                "values": {
                    "value": "[flat_x, shifted_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_731": {
                "x": {
                    "value": "tf.shape(target)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_733": {
                "input": {
                    "value": "tf.squeeze(bias, axis=[2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_736": {
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(attention, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_776": {
                "inputs": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_845": {
                "inputs": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sin_905": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_905": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_953": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_966": {
                "shape": {
                    "value": "[target_length, source_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1003": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1004": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1005": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source, [source_shape[0], source_shape[1] * source_shape[2], source_shape[3]])",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_1051": {
                "name": {
                    "value": "local_attention",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention, [batch, num_heads, target_length, source_length])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, -num_heads % 3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [batch, target_length, source_length, 3, (num_heads + extra_heads) // 3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_1103": {
                "name": {
                    "value": "hidden_density_logit",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "relu_density_logit(h, list(range(inputs.shape.ndims - 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1159": {
                "x": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_1159": {
                "x": {
                    "value": "new_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(g[0]) * x + tf.sigmoid(g[1]) * tf.tanh(g[3])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1211": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1212": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_1320": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_fn(pad_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1327": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1334": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_same_length(logits, labels)",
                            "Call"
                        ],
                        [
                            "pad_to_same_length(logits, labels, axis=2)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "x_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - x_mean), axis=[1, 2, 3], keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_69": {
                "x": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.shape(x)[1] * tf.shape(x)[2] * 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_243": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_244": {
                "value": {
                    "value": "2 * (kernel_size[1] // 2) * dilation_rate[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_279": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_309": {
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "abs_sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "separability if separability > 0 else -1 * separability",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_initializer_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_370": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_383": {
                "x": {
                    "value": "shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_400": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "layer_norm_compute_python(x, epsilon, scale, bias)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.residual_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pool_517": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "window_shape": {
                    "value": "window_size_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(window_size[0], 1)",
                            "Tuple"
                        ]
                    ]
                },
                "pooling_type": {
                    "value": "pooling_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(strides[0], 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "pool_520": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "window_shape": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                },
                "pooling_type": {
                    "value": "pooling_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ],
                        [
                            "pooling_type",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_733": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('layer_norm_bias', [filters], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_736": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(target, source, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ],
                        [
                            "tf.matmul(target_attention, source_attention, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_903": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_1129": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_start",
                            "Method Argument"
                        ],
                        [
                            "bias_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_1158": {
                "x": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_1158": {
                "x": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_1178": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_start",
                            "Method Argument"
                        ],
                        [
                            "bias_start",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1227": {
                "shape": {
                    "value": "[tf.rank(arg) - 3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_223": {
                "x": {
                    "value": "tf.shape(cur)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_243": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "'part_%d' % split_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_320": {
                "values": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_439": {
                "features": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_439": {
                "features": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_501": {
                "x": {
                    "value": "tf.shape(inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_516": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_621": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_622": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_623": {
                "input": {
                    "value": "targets_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(embedding_var, depth_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_731": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target, [target_shape[0], target_shape[1] * target_shape[2], target_shape[3]])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_1037": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1225": {
                "shape": {
                    "value": "[tf.rank(arg) - 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_1330": {
                "x": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - label_smoothing",
                            "BinOp"
                        ],
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1331": {
                "x": {
                    "value": "low_confidence + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x - x_mean) / tf.maximum(tf.sqrt(x_variance), tf.rsqrt(num_pixels))",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x, x, x], axis=3)",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, hidden_size, [((1, 1), kernel)], padding=padding, separability=separability, name='conv0')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(1.25 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv1')",
                            "Call"
                        ],
                        [
                            "pool(x, kernel, 'MAX', padding, strides=strides)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "subseparable_conv_block(x, 2 * hidden_size, [((1, 1), kernel)], first_relu=False, padding=padding, separability=separability, name='conv2')",
                            "Call"
                        ],
                        [
                            "subseparable_conv_block(x, int(2.5 * hidden_size), [((1, 1), kernel)], padding=padding, separability=separability, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv(x, hparams.hidden_size, (1, 1))",
                            "Call"
                        ],
                        [
                            "noam_norm(x + conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "noam_norm(conv_sum)",
                            "Call"
                        ],
                        [
                            "noam_norm(x + simple_attention(x, source, summaries=summaries))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_501": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_502": {
                "value": {
                    "value": "2 * (window_size[1] // 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_630": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_outputs, [tf.shape(targets_emb)[0], tf.shape(targets_emb)[1], tf.shape(targets_emb)[2], factor * hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(outputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], block_size * tf.shape(outputs)[1], 1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [targets_shape[0], targets_shape[1], targets_shape[2], channels, hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1330": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "deconv1d(cur, i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(cur)[2], 1), lambda idx=i: deconv1d(cur, idx), lambda idx=i: deconv2d(cur, idx))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.elu(cur) if use_elu else tf.nn.relu(cur)",
                            "IfExp"
                        ],
                        [
                            "cur * mask",
                            "BinOp"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, separability=separabilities[counter], **kwargs)",
                            "Call"
                        ],
                        [
                            "conv_fn(cur, filters, kernel_size, dilation_rate=dilation_rate, name='conv_block_%d' % counter, use_bias=norm is None, **kwargs)",
                            "Call"
                        ],
                        [
                            "norm(cur, name='conv_block_norm_%d' % counter)",
                            "Call"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ],
                        [
                            "cur",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_313": {
                "input": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split in enumerate(tf.split(inputs, abs_sep, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters // separability",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "separable_conv2d_317": {
                "input": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split in enumerate(tf.split(inputs, abs_sep, axis=3))",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "filters // abs_sep",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "dilation_rates_and_kernel_sizes",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, padding_)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_1227": {
                "input": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_1225": {
                "input": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/tensor2tensor/expert_utils.py": {
        "tensorflow": {
            "unstack_352": {
                "variable": {
                    "value": "(batch, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_354": {
                "variable": {
                    "value": "ret_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(indices, [-1]) + tf.div(tf.range(batch * k), k) * n",
                            "BinOp"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "batch * n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "noisy_top_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_top_values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_408": {
                "variable": {
                    "value": "threshold_if_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(top_values_flat, threshold_positions_if_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_410": {
                "variable": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noisy_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_values",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "threshold_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.gather(top_values_flat, threshold_positions_if_in), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_414": {
                "variable": {
                    "value": "threshold_if_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(top_values_flat, threshold_positions_if_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_421": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(noisy_values, threshold_if_in)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "prob_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_NormalDistributionCDF(clean_values - threshold_if_in, noise_stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prob_if_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_NormalDistributionCDF(clean_values - threshold_if_out, noise_stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_466": {
                "variable": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(load, [tf.shape(load)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_1231": {
                "variable": {
                    "value": "sampled_log_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sampled_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(features, sampled_params, transpose_b=True) - sampler.log_expected_count(sampled_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SampledLogDenominator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_1233": {
                "variable": {
                    "value": "sampled_classes_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.fill(tf.shape(sampled_classes), float('-inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "sampled_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(sampler.sample)",
                            "Call"
                        ],
                        [
                            "sampled_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_1238": {
                "variable": {
                    "value": "combined_log_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([sampled_log_denominator, target_log_denominator])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_1283": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(SampledSoftmaxLoss, features, sampler, num_classes, target_classes, target_params, sampled_classes, sampled_params)",
                            "Call"
                        ],
                        [
                            "data_parallelism(tf.multiply, ret, target_weights)",
                            "Call"
                        ],
                        [
                            "data_parallelism(tf.reduce_sum, ret)",
                            "Call"
                        ],
                        [
                            "tf.add_n(ret)",
                            "Call"
                        ],
                        [
                            "tf.identity(v._ref())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Parallel(self._expert_devices, tf.concat, TransposeListOfLists(dispatched), 0)",
                            "Call"
                        ],
                        [
                            "Parallel(self._expert_devices, ConvertGradientToTensor, ret)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_356": {
                "tensor": {
                    "value": "ret_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(tf.reshape(values, [-1]), indices_flat, batch * n)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_481": {
                "input_tensor": {
                    "value": "tf.to_float(gates > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_504": {
                "variable": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_526": {
                "variable": {
                    "value": "self._w_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_gate' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hp.input_size, hp.num_experts]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_833": {
                "variable": {
                    "value": "primary_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Parallel(datashard_devices, tf.reduce_sum, primary_gates, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_835": {
                "variable": {
                    "value": "primary_smooth_load",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "primary_smooth_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(datashard_devices, self._primary_gating.Eval, xs, train, [summaries] + [False] * (num_datashards - 1))",
                            "Call"
                        ],
                        [
                            "tf.add_n(primary_smooth_load)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_836": {
                "variable": {
                    "value": "primary_true_load",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Parallel(datashard_devices, _GatesToLoad, primary_gates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_864": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "secondary_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(expert_devices, [m.Eval for m in self._secondary_moe], secondary_input, train, primary_expert_to_gates, [summaries] + [False] * (n1 - 1), primary_expert_to_identifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_915": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.transpose(gates) > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_916": {
                "variable": {
                    "value": "(self._expert_index, self._batch_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(tf.transpose(gates) > 0))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_917": {
                "variable": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_int32(gates > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_918": {
                "variable": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(self._gates, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._batch_index * num_experts + self._expert_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_934": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(inp, self._batch_index)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_957": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvertGradientToTensor(tf.concat(expert_out, 0))",
                            "Call"
                        ],
                        [
                            "stitched * tf.expand_dims(self._nonzero_gates, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.shape(self._gates)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_1039": {
                "variable": {
                    "value": "expert_part_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.stack([self._dispatchers[d].part_sizes for d in xrange(self._num_datashards)])",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "self._num_experts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_1118": {
                "variable": {
                    "value": "self._part_sizes_by_expert",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.stack(part_sizes_by_datashard)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_352": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_353": {
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_401": {
                "input": {
                    "value": "clean_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_402": {
                "input": {
                    "value": "noisy_top_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_top_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_409": {
                "params": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(noisy_top_values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "threshold_positions_if_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch) * m + k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_412": {
                "x": {
                    "value": "is_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(noisy_values, threshold_if_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_415": {
                "params": {
                    "value": "top_values_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(noisy_top_values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "threshold_positions_if_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "threshold_positions_if_in - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_439": {
                "x": {
                    "value": "tf.size(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_440": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_441": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_466": {
                "tensor": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(load)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_467": {
                "input_tensor": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(load, [tf.shape(load)[0], -1]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_481": {
                "x": {
                    "value": "gates > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "top_k_498": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(indices), num=2)",
                            "Call"
                        ],
                        [
                            "six.iteritems(kwargs)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_508": {
                "values": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_508": {
                "x": {
                    "value": "tf.stack(indices, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_531": {
                "variable": {
                    "value": "self._w_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_noise' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hp.input_size, hp.num_experts]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_551": {
                "variable": {
                    "value": "clean_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_565": {
                "variable": {
                    "value": "top_k_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "top_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MyTopK(logits, min(hp.k + 1, hp.num_experts))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, hp.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_566": {
                "variable": {
                    "value": "top_k_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_MyTopK(logits, min(hp.k + 1, hp.num_experts))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, hp.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_567": {
                "variable": {
                    "value": "top_k_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "top_k_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(top_logits, [0, 0], [-1, hp.k])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_935": {
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(inp, self._batch_index)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_968": {
                "value": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1227": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "sampled_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParallelEmbeddingLookup(params, sampled_classes, data_parallelism)",
                            "Call"
                        ],
                        [
                            "sampled_params",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_1229": {
                "input_tensor": {
                    "value": "target_params * features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_1234": {
                "dims": {
                    "value": "tf.shape(sampled_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1237": {
                "params": {
                    "value": "sampled_classes_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(tf.fill(tf.shape(sampled_classes), float('-inf')), sampled_classes, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_classes",
                            "Method Argument"
                        ],
                        [
                            "target_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_1239": {
                "values": {
                    "value": "[sampled_log_denominator, target_log_denominator]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_150": {
                "value": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_353": {
                "x": {
                    "value": "tf.range(batch * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(indices), num=2)",
                            "Call"
                        ],
                        [
                            "six.iteritems(kwargs)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_375": {
                "x": {
                    "value": "x / (math.sqrt(2) * stddev + 1e-20)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_439": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_441": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_442": {
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x) / float_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_468": {
                "input_tensor": {
                    "value": "per_device_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(load, [tf.shape(load)[0], -1]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_503": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_507": {
                "indices": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_549": {
                "name_or_scope": {
                    "value": "NoisyTopKGating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_553": {
                "variable": {
                    "value": "raw_noise_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * (self._layer_sizes[i] / hp.input_size) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, self._w[i])",
                            "Call"
                        ],
                        [
                            "hp.hidden_activation(x)",
                            "Call"
                        ],
                        [
                            "self._experts",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_573": {
                "variable": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_663": {
                "input": {
                    "value": "per_example_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_675": {
                "input_tensor": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_865": {
                "values": {
                    "value": "secondary_load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(expert_devices, [m.Eval for m in self._secondary_moe], secondary_input, train, primary_expert_to_gates, [summaries] + [False] * (n1 - 1), primary_expert_to_identifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_865": {
                "input": {
                    "value": "primary_smooth_load / (primary_true_load + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_915": {
                "condition": {
                    "value": "tf.transpose(gates) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_int32_917": {
                "x": {
                    "value": "gates > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_919": {
                "tensor": {
                    "value": "self._gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_954": {
                "values": {
                    "value": "expert_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expert_out",
                            "Method Argument"
                        ],
                        [
                            "expert_out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_956": {
                "input": {
                    "value": "self._nonzero_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1040": {
                "values": {
                    "value": "[self._dispatchers[d].part_sizes for d in xrange(self._num_datashards)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_1114": {
                "data": {
                    "value": "tf.ones_like(gates)",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1119": {
                "values": {
                    "value": "part_sizes_by_datashard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(_PartSizes, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_partition_1123": {
                "data": {
                    "value": "tf.range(tf.size(gates))",
                    "type": "Call",
                    "possible_values": []
                },
                "partitions": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "model_parallelism.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1234": {
                "input": {
                    "value": "sampled_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(sampler.sample)",
                            "Call"
                        ],
                        [
                            "sampled_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "name": {
                    "value": "'%s_layer_%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_sizes[layer:layer + 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hp.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_258": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cache[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_261": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_276": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_287": {
                "name": {
                    "value": "'parallel_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_579": {
                "name": {
                    "value": "importance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(gates, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_580": {
                "name": {
                    "value": "load",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_958": {
                "input": {
                    "value": "self._gates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_1052": {
                "device_name": {
                    "value": "self._datashard_devices[d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_1115": {
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_275": {
                "device_name": {
                    "value": "self._caching_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 and self._reuse else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "caching_device": {
                    "value": "self._caching_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DaisyChainGetter",
                            "variable"
                        ],
                        [
                            "CachingGetter",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "shape_466": {
                "input": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_ProbInTopK(clean_logits, noisy_logits, noise_stddev, top_logits, hp.k), 0)",
                            "Call"
                        ],
                        [
                            "_GatesToLoad(gates)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "tf.stack(secondary_load) * tf.expand_dims(primary_smooth_load / (primary_true_load + epsilon), 1)",
                            "BinOp"
                        ],
                        [
                            "load",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_555": {
                "x": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_560": {
                "name": {
                    "value": "noisy_logits",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "noisy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_logits + tf.random_normal(tf.shape(clean_logits)) * noise_stddev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_561": {
                "name": {
                    "value": "noise_stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "noise_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.nn.softplus(raw_noise_stddev) + hp.noise_epsilon) * tf.to_float(train)",
                            "BinOp"
                        ],
                        [
                            "noise_stddev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_579": {
                "input_tensor": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_752": {
                "device_name": {
                    "value": "expert_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_762": {
                "device_name": {
                    "value": "expert_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_915": {
                "a": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_1124": {
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_parallelism(tf.mod, ids, num_shards)",
                            "Call"
                        ],
                        [
                            "_RowwiseUnsortedSegmentSum(top_k_gates, top_k_indices, hp.num_experts)",
                            "Call"
                        ],
                        [
                            "self._gating.Eval(x, train, summaries)",
                            "Call"
                        ],
                        [
                            "gates * tf.expand_dims(per_example_multiplier, 1)",
                            "BinOp"
                        ],
                        [
                            "data_parallelism(tf.to_int32, gates)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_293": {
                "device_name": {
                    "value": "self._devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_554": {
                "features": {
                    "value": "raw_noise_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self._w_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_557": {
                "input": {
                    "value": "clean_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self._w_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1055": {
                "values": {
                    "value": "expert_output_parts_t[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/text_discriminator_pretrain.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_22": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/train.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_28": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_29": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_32": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_38": {
                "checkpoint_dir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervised_NMT_forEnde_v2_multiChannel_gan_directionalAttention/train_unsupervised.py": {
        "tensorflow": {
            "ConfigProto_29": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_35": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_38": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "src_embed_a",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_aembedding/src_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "src_embed_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_bembedding/src_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "dst_embed_a",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_aembedding/dst_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "dst_embed_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_bembedding/dst_embedding/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_45": {
                "checkpoint_dir": {
                    "value": "config.train.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}