#!/usr/bin/env python
# coding: utf-8

# Автор материала: программист-исследователь Mail.ru Group, старший преподаватель Факультета Компьютерных Наук ВШЭ Юрий Кашницкий. Материал распространяется на условиях лицензии [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/). Можно использовать в любых целях (редактировать, поправлять и брать за основу), кроме коммерческих, но с обязательным упоминанием автора материала.

# # <center>Первичный анализ данных с Pandas</center>
# ## <center>Практическое задание. Анализ данных пассажиров "Титаника"</center>

# Веб-форма с вопросами: https://forms.gle/4bUyZA99YZEcsNeE6

# In[ ]:


import numpy as np
import pandas as pd
get_ipython().run_line_magic('matplotlib', 'inline')


# **Считаем данные из файла в память в виде объекта Pandas.DataFrame**

# In[ ]:


data = pd.read_csv('../input/titanic/titanic_train.csv',
                  index_col='PassengerId')


# **Данные представлены в виде таблицы. Посмотрим на первые 5 строк:**

# In[ ]:


data.head(5)


# Итак, разберемся в поставленной задаче: целевым столбцом является бинарный столбец Survived, 
# в котором 0 означает, что пассажир погиб, а 1 - что пассажир выжил, нашей целью является проанализировать зависимость целевого признака от нецелевых, описанных ниже. 
# 
# Нам даны id - номер пассажира, класс, которым следовал пассажир (класс 1, класс 2 и класс 3), имя пассажира (Name), его пол (Sex), возраст (Age), SibSp - число братьев, сестер или супругов на борту у человека (максимум 8 братьев и сестер путешествовали вместе с одним из путешественников), Parch - количество родителей или детей, с которыми путешествовал каждый пассажир, номер билета (Ticket), тариф билета (Fare), номер каюты (Cabin), Embarked - информация о порте посадки пассажира. Есть три возможных значения для Embarked -  Саутгемптон, Шербург и Куинстаун.  

# In[ ]:


data.describe()


# In[ ]:


data.info()


# **Для примера отберем пассажиров, которые сели в Cherbourg (Embarked=C) и заплатили более 200 у.е. за билет (fare > 200).**
# 
# Убедитесь, что Вы понимаете, как эта конструкция работает. <br>
# Если нет – посмотрите, как вычисляется выражение в квадратных в скобках.

# In[ ]:


data[(data['Embarked'] == 'C') & (data.Fare > 200)].head()


# **Можно отсортировать этих людей по убыванию платы за билет.**

# In[ ]:


data[(data['Embarked'] == 'C') & 
     (data['Fare'] > 200)].sort_values(by='Fare',
                               ascending=False).head()


# **Пример создания признака.**

# In[ ]:


def age_category(age):
    '''
    < 30 -> 1
    >= 30, <55 -> 2
    >= 55 -> 3
    '''
    if age < 30:
        return 1
    elif age < 55:
        return 2
    else:
        return 3


# In[ ]:


age_categories = [age_category(age) for age in data.Age]


# In[ ]:


data['Age_category'] = age_categories


# **Другой способ – через `apply`.**

# In[ ]:


data['Age_category'] = data['Age'].apply(age_category)


# **1. Сколько мужчин / женщин находилось на борту?**
# - 412 мужчин и 479 женщин
# - 314 мужчин и 577 женщин
# - 479 мужчин и 412 женщин
# - 577 мужчин и 314 женщин

# In[ ]:


# Ваш код здесь


# **2. Какой части пассажиров удалось выжить? Посчитайте долю выживших пассажиров. 
# Ответ приведите в процентах (число в интервале от 0 до 100, знак процента не нужен), округлив до двух знаков.**
# - 41.41
# - 38.38
# - 53.53
# - 43.43

# In[ ]:


# Ваш код здесь


# **3. Выведите частотное распределение переменной `Pclass` (социально-экономический статус) и это же распределение, только для мужчин / женщин по отдельности. Какую долю пассажиры первого класса составляли среди всех пассажиров?**
# - 14.14
# - 34.34
# - 44.44
# - 24.24
# 
# **Сколько было мужчин 2-го класса?**
# - 104
# - 108
# - 112
# - 125

# In[ ]:


# Ваш код здесь


# **4. Каковы медиана и стандартное отклонение платежей (`Fare`)? Округлите до 2 десятичных знаков.**
# - Медиана – 14.45, стандартное отклонение – 49.69
# - Медиана – 15.1, стандартное отклонение – 12.15
# - Медиана – 13.15, стандартное отклонение – 35.3
# - Медиана – 17.43, стандартное отклонение – 39.1

# In[ ]:


# Ваш код здесь


# **5. Правда ли, что люди моложе 30 лет выживали чаще, чем люди старше 60 лет? Каковы доли выживших в обеих группах?**
# - 22.7% среди молодых и 40.6% среди старых
# - 40.6% среди молодых и 22.7% среди старых
# - 35.3% среди молодых и 27.4% среди старых
# - 27.4% среди молодых и 35.3% среди старых

# In[ ]:


# Ваш код здесь


# **6. Правда ли, что женщины выживали чаще мужчин? Каковы доли выживших в обеих группах?**
# - 30.2% среди мужчин и 46.2% среди женщин
# - 35.7% среди мужчин и 74.2% среди женщин
# - 21.1% среди мужчин и 46.2% среди женщин
# - 18.9% среди мужчин и 74.2% среди женщин

# In[ ]:


# Ваш код здесь


# **7.* Найдите самое популярное имя среди пассажиров Титаника мужского пола?**
# - Charles
# - Thomas
# - William
# - John

# In[ ]:


# Ваш код здесь
#Для нахождения самого популярного имени можно применить лямбда – выражение к столбцу с именами, получающее подстроку с именем и вывести распределение значений 
#Пример. lambda full_name: full_name.split(",")[1] – взять подстроку после запятой


# **8. Сравните распределение стоимости билетов и возраста у спасенных и у погибших. Средний возраст погибших выше, верно?**
# - Да 
# - Нет

# In[ ]:


# Ваш код здесь


# **9. Как отличается средний возраст мужчин / женщин в зависимости от класса обслуживания? Выберите верные утверждения:**
# - В среднем мужчины 1-го класса старше 40 лет
# - В среднем женщины 1-го класса старше 40 лет
# - Мужчины всех классов в среднем старше женщин того же класса
# - В среднем люди в 1 классе старше, чем во 2-ом, а те старше представителей 3-го класса

# In[ ]:


#В  задании можно использовать таблицу сопряженности 
#pd.crosstab(data["Column1"], data["Column2"], values = data["Column3"], aggfunc = np.mean)


# **10. Узнайте, сколько пропущенных значений содержит каждый столбец. Сколько пропущенных значений содержит столбец Age? Заполните пропущенные значения в столбце Age медианами. Выведите результат.**

# In[ ]:


#


# **11. Удалите столбец с максимальным числом пропущенных значений. Как называется этот столбец?**

# In[ ]:


#


# **12. Очень важно уметь кодировать категориальные столбцы числовыми значениями для последующего машинного обучения.
# Закодируйте столбец Embarked.
# Саутгемптон - 1, Шербург - 2, Куинстаун - 3. Чему равно стандартное отклонение (STD) в закодированном столбце?**

# In[ ]:


# ваш код здесь


# **13. Введите столбец FamStatus: 1 - пассажир путешествует один, 2 - пассажир путешествует с 1-2 родственниками, 3 - пассажир путешествует более чем с 2 родственниками. Чему равна мода в новом столбце? Родственники - это дети, родители, супруги, братья и сестры.**

# In[ ]:


#


# **14.Сохраните набор данных, cостоящий только из столбцов Survived, Name в csv на рабочий стол.**

# In[ ]:


data.info()


# In[ ]:


# ваш код


# In[ ]:


# **12. Дополнительное задание. Для кодирования категориальных столбцов есть 2 техники dummy / one-hot encoding.  Попробуйте применить эти техники для кодирования столбца Embarked.**
# ваш код здесь
#https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html
#https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html


# In[ ]:


# дубликаты и аномалии 


# **15*. Проверьте, есть ли в наборе выбросы (аномально большие и малые значения) в столбце Fare (т.е. значения, которые удалены от от среднего больше чем на 3 стандартных отклонения)? Удалите все выбросы в столбце Fare.** 

# In[ ]:


# ваш код


# In[ ]:




