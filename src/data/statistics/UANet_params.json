{
    "main.py": {
        "torch": {
            "zeros_165": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_427": {
                "variable": {
                    "value": "data.HP_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_237": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_detail1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': filter(lambda p: p.requires_grad, model.mcmodel.parameters()), 'lr': data.HP_lr}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "data.HP_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_421": {
                "seed": {
                    "value": "seed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_423": {
                "seed": {
                    "value": "seed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_424": {
                "seed": {
                    "value": "seed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_240": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_detail1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': filter(lambda p: p.requires_grad, model.mcmodel.parameters()), 'lr': data.HP_lr}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_345": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.model_dir + '/best_model.ckpt'",
                            "BinOp"
                        ],
                        [
                            "data.model_dir + '/best_model.ckpt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adadelta_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_detail1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': filter(lambda p: p.requires_grad, model.mcmodel.parameters()), 'lr': data.HP_lr}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__300": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "data.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_244": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_detail1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': filter(lambda p: p.requires_grad, model.mcmodel.parameters()), 'lr': data.HP_lr}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.model_dir + '/best_model.ckpt'",
                            "BinOp"
                        ],
                        [
                            "data.model_dir + '/best_model.ckpt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_detail1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': filter(lambda p: p.requires_grad, model.mcmodel.parameters()), 'lr': data.HP_lr}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/charbigru.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_53": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_55": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_70": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/charbilstm.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_55": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_57": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_72": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_74": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/charcnn.py": {
        "torch": {
            "Dropout_18": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.char_cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_54": {
                "variable": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_cnn(char_embeds)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(char_cnn_out, char_cnn_out.size(2)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.char_cnn(char_embeds).transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_cnn_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/mc_model.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.lstms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LSTM(self.input_size, lstm_hidden, num_layers=1, batch_first=True, bidirectional=self.bilstm_flag)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden2tag(h2t_in)",
                            "Call"
                        ],
                        [
                            "outs.reshape(mc_steps, batch, max_seq_len, -1).mean(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout2d_107": {
                "input": {
                    "value": "x.transpose(1, 2)[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_62": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ordered_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_represent[index]",
                            "Subscript"
                        ],
                        [
                            "add_dropout(ordered_x, self.model1_in_dropout)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ordered_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_64": {
                "variable": {
                    "value": "(ordered_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pack_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_30": {
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_33": {
                "*args": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/seqmodel.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "data.HP_label_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.word2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.wordrep.total_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.label2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "data.HP_label_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.model2_fc_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_model2_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "data.d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_65": {
                "variable": {
                    "value": "model2_input_label_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bsc,cd->bsd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[p.detach(), self.label_embedding.weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_102": {
                "variable": {
                    "value": "model2_input_label_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bsc,cd->bsd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[p, self.label_embedding.weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "modules": {
                    "value": "self.m2_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "random_embedding_label(data.label_alphabet_size, data.HP_label_embed_dim, data.HP_label_embedding_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[hh, hl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[hh, hl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/transformer.py": {
        "torch": {
            "exp_85": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding(max_pos * 2, self.embedding_dim, self.padding_idx)",
                            "Call"
                        ],
                        [
                            "weights.to(self._float_tensor)",
                            "Call"
                        ],
                        [
                            "self.get_embedding(init_size + 1, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "self.get_embedding(init_size + 1, embedding_dim, padding_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.kv_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.r_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.head_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_180": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kv_linear(k)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "rw_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q + self.r_r_bias[:, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_190": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,ld->bnql",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[rr_head_q, r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn / self.scale",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask[:, None, None, :].eq(0), float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout_layer(attn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(batch_size, max_len, self.n_head, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.dropout_layer(attn), v).transpose(1, 2).reshape(batch_size, max_len, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[BD, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_229": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_230": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, feedforward_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_272": {
                "variable": {
                    "value": "self.h_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_273": {
                "variable": {
                    "value": "self.h_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.h_ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, feedforward_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "variable": {
                    "value": "self.l_ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, feedforward_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RelTransformerLayer(d_model, self_attn, feedforward_dim, after_norm, dropout) for _ in range(num_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_normal_(torch.zeros(n_head, d_model // n_head))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_normal_(torch.zeros(n_head, d_model // n_head))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "-seq_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_86": {
                "start": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_125": {
                "start": {
                    "value": "-seq_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_238": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "in_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_283": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_288": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_290": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "half_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_22": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model // n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model // n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_87": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "nn.init.xavier_normal_(torch.randn(num_embeddings, embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_87": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "nn.init.xavier_normal_(torch.randn(num_embeddings, embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/wordrep.py": {
        "torch": {
            "Embedding_43": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data.word_alphabet.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[word_embs]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "data.pretrain_word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "random_embedding(data.word_alphabet.size(), self.embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "num_embeddings": {
                    "value": "data.feature_alphabets[idx].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_embedding_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "data.pretrain_feature_embeddings[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "self.random_embedding(data.feature_alphabets[idx].size(), self.feature_embedding_dims[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizer.py": {
        "torch": {
            "zeros_like_55": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}