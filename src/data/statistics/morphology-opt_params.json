{
    "optimal_agents/algs/ea_basic.py": {
        "torch": {
            "load_121": {
                "f": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(individual.model, 'pruning_data.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optimal_agents/algs/ea_subproc.py": {
        "torch": {
            "save_69": {
                "obj": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(model_path, 'pruning_data.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_agents/algs/gppo.py": {
        "torch": {
            "exp_252": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob - rollout_data.old_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_261": {
                "variable": {
                    "value": "clip_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(th.abs(ratio - 1) > clip_range).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_273": {
                "variable": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rollout_data.returns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "values_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Name"
                        ],
                        [
                            "rollout_data.old_values + th.clamp(values - rollout_data.old_values, -clip_range_vf, clip_range_vf)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__291": {
                "parameters": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_314": {
                "input": {
                    "value": "self.policy.log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_256": {
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.exp(log_prob - rollout_data.old_log_prob)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - clip_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + clip_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_257": {
                "input": {
                    "value": "policy_loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "advantages * ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_293": {
                "input": {
                    "value": "rollout_data.old_log_prob - log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_270": {
                "input": {
                    "value": "values - rollout_data.old_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range_vf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range_vf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_range_vf(self._current_progress_remaining)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_279": {
                "input": {
                    "value": "-log_prob",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_281": {
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_261": {
                "input": {
                    "value": "ratio - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_agents/algs/graph_rollout_buffer.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(action[i], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_237": {
                "data": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_12": {
                "ndarray": {
                    "value": "obs[i]['edge_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_agents/algs/tame.py": {
        "torch": {
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.policy.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate((state, morphology_obs['x']), axis=1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((morphology_obs['edge_index'], np.roll(morphology_obs['edge_index'], 1, axis=1)), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(edge_index).t().contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_177": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(batch.x, batch.edge_index, batch.edge_attr, batch.batch)",
                            "Call"
                        ],
                        [
                            "self.model(batch.x, batch.edge_index, batch.edge_attr, batch.batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_107": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "pred_labels == batch.y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimal_agents/policies/node_policy.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.action_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*action_net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.value_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*value_net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.ones(1) * self.log_std_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_130": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_net(latent)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "action_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(mean_actions) * self.log_std.exp()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "last_pi_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "last_vf_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vf_layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "mean_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_net(latent)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "last_pi_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "pi_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer['pi']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "last_vf_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vf_layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vf_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer['vf']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "optimal_agents/policies/predictive_models.py": {
        "torch": {
            "ModuleList_12": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "layer_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers",
                            "Attribute"
                        ],
                        [
                            "layers",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "optimal_agents/policies/pruning_models.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "morphology_obs['x'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "layer",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([(self.data[i][1] - reward_mean) / reward_std for i in range(len(self.data))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([(self.data[ind][1] - reward_mean) / reward_std for ind in inds])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Bernoulli_117": {
                "probs": {
                    "value": "torch.full((1, self.last_extractor_dim), 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bernoulli_70": {
                "probs": {
                    "value": "torch.full_like(x, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_118": {
                "size": {
                    "value": "(1, self.last_extractor_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.act_fn(x)",
                            "Call"
                        ],
                        [
                            "torch_geometric.nn.global_mean_pool(x, graph.batch)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x * dropout_mask",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}