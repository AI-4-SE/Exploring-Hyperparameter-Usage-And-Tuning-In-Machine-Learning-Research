{
    "data.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad_2d(x[0].reshape(-1, 1), max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad_2d(x[0].reshape(-1, 1), max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad(x[0], max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y_batch).unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad(x[0], max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y_batch).unsqueeze(-1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(x[0]) for x in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_lengths)",
                            "Call"
                        ],
                        [
                            "[len(x[0]) for x in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad_2d(x[0].reshape(-1, 1), max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad_2d(x[0].reshape(-1, 1), max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_174": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad(x[0], max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y_batch).unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad(x[0], max_input_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y_batch).unsqueeze(-1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(x[0]) for x in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_lengths)",
                            "Call"
                        ],
                        [
                            "[len(x[0]) for x in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(input_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad_2d(x[1], max_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(c_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad_2d(x[1], max_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(c_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "variable": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([_pad_2d(x[1], max_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(c_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "np.array([_pad_2d(x[1], max_len) for x in batch], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(c_batch).transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "clamp_14": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[:, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "log_std_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[:, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "log_std_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_26": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[:, :, :1]",
                            "Subscript"
                        ],
                        [
                            "y_hat[:, :, :1]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.clamp(sample, min=-scale_factor), max=scale_factor)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-scale_factor",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_36": {
                "variable": {
                    "value": "logs_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(logs_q, min=log_std_min)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "log_std_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_37": {
                "variable": {
                    "value": "logs_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logs_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(logs_p, min=log_std_min)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "log_std_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ],
                        [
                            "-7.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_40": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logs_q - logs_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_26": {
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(y_hat[:, :, 1:], min=log_std_min)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_hat[:, :, 1:], min=log_std_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_16": {
                "input": {
                    "value": "y - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_16": {
                "input": {
                    "value": "-2.0 * log_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "2.0 * logs_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_38": {
                "input": {
                    "value": "mu_p - mu_q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "torch": {
            "Conv1d_21": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_22": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "variable": {
                    "value": "self.res_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_44": {
                "variable": {
                    "value": "self.skip_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_45": {
                "variable": {
                    "value": "self.res_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.res_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_46": {
                "variable": {
                    "value": "self.skip_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.skip_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "forward_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fourier_basis[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "inverse_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linalg.pinv(scale * fourier_basis).T[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv1d_141": {
                "variable": {
                    "value": "forward_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.forward_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.filter_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_149": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_part ** 2 + imag_part ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[magnitude * torch.cos(phase), magnitude * torch.sin(phase)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose1d_157": {
                "variable": {
                    "value": "inverse_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([magnitude * torch.cos(phase), magnitude * torch.sin(phase)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.inverse_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_51": {
                "variable": {
                    "value": "self.filter_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cin_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "variable": {
                    "value": "self.gate_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cin_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_53": {
                "variable": {
                    "value": "self.filter_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.filter_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_54": {
                "variable": {
                    "value": "self.gate_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gate_conv_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_66": {
                "input": {
                    "value": "h_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_conv(tensor)",
                            "Call"
                        ],
                        [
                            "h_filter + self.filter_conv_c(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_66": {
                "input": {
                    "value": "h_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_conv(tensor)",
                            "Call"
                        ],
                        [
                            "h_gate + self.gate_conv_c(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "atan2_150": {
                "input": {
                    "value": "imag_part.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "real_part.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_154": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_155": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "synthesize.py": {
        "torch": {
            "is_available_43": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, True, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, False, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_synthesize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.load, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "synchronize_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "synthesize_student.py": {
        "torch": {
            "is_available_44": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, False, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_synthesize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Normal_104": {
                "variable": {
                    "value": "q_0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x.new_zeros(x.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "x.new_ones(x.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_112": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_120": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_62": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, True, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, False, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_198": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_179": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer_state, 'global_step': global_step, 'global_epoch': global_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_206": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__127": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'state_dict': averaged_model.state_dict(), 'optimizer': optimizer_state, 'global_step': global_step, 'global_epoch': global_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_student.py": {
        "torch": {
            "is_available_69": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, True, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, False, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "synth_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LJspeechDataset(args.data_path, False, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_synthesize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_325": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_s.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_327": {
                "variable": {
                    "value": "criterion_frame",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_289": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_309": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.load, args.teacher_name, 'checkpoint_step{:09d}_ema.pth'.format(teacher_step))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Normal_139": {
                "variable": {
                    "value": "q_0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x.new_zeros(x.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "x.new_ones(x.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_197": {
                "variable": {
                    "value": "q_0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x.new_zeros(x.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "x.new_ones(x.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer_state, 'global_step': global_step, 'global_epoch': global_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_297": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "model_s.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_243": {
                "variable": {
                    "value": "q_0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x.new_zeros(x.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "x.new_ones(x.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "{'state_dict': averaged_model.state_dict(), 'optimizer': optimizer_state, 'global_step': global_step, 'global_epoch': global_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save, args.teacher_name, args.model_name, 'checkpoint_step{:09d}_ema.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_258": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "wavenet.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.front_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(1, self.residual_channels, self.front_channels, causal=self.causal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.res_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.upsample_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_samples + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "convt",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 2 * s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, s // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, s)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "weight_norm_48": {
                "variable": {
                    "value": "convt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "convt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ConvTranspose2d(1, 1, (3, 2 * s), padding=(1, s // 2), stride=(1, s))",
                            "Call"
                        ],
                        [
                            "nn.utils.weight_norm(convt)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_69": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_76": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "wavenet_iaf.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.iafs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.front_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(1, self.residual_channels, self.front_channels, causal=self.causal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.res_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.res_blocks_fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_36": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, :, 1:] * torch.exp(logs) + mu",
                            "BinOp"
                        ],
                        [
                            "F.pad(z, pad=(1, 0), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_logs[:, 1:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_35": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_logs[:, 1:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}