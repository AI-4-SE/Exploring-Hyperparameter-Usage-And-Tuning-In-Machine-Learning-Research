{
    "attention_decoder.py": {
        "tensorflow": {
            "expand_dims_56": {
                "variable": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "W_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "encoder_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(encoder_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_h', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "attention_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "input": {
                    "value": "prev_coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(coverage, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_221": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(axis=1, values=args)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_94": {
                "input": {
                    "value": "decoder_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.zeros([batch_size, attn_size])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * encoder_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_142": {
                "msg": {
                    "value": "Adding attention_decoder timestep %i of %i",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "len(decoder_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "coverage",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "Attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v * math_ops.tanh(encoder_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v * math_ops.tanh(encoder_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "coverage_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(coverage, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * math_ops.tanh(encoder_features + decoder_features + coverage_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * math_ops.tanh(encoder_features + decoder_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear([context_vector, state.c, state.h, x], 1, True)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_223": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_227": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "calculate_pgen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "masked_attention(e)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * enc_padding_mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_108": {
                "x": {
                    "value": "encoder_features + decoder_features + coverage_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_117": {
                "x": {
                    "value": "encoder_features + decoder_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "batcher.py": {
        "tensorflow": {
            "info_314": {
                "msg": {
                    "value": "Finished reading dataset in single_pass mode.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_439": {
                "msg": {
                    "value": "Found an example with empty article text. Skipping it.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_329": {
                "msg": {
                    "value": "The example generator for this example queue filling thread has exhausted data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_376": {
                "msg": {
                    "value": "Found example queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_383": {
                "msg": {
                    "value": "Found batch queue thread dead. Restarting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_435": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_331": {
                "msg": {
                    "value": "\"single_pass mode is on, so we've finished reading dataset. This thread is stopping.\"",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "beam_search.py": {
        "tensorflow": {}
    },
    "data.py": {
        "tensorflow": {}
    },
    "decode.py": {
        "tensorflow": {
            "Saver_52": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "ARTICLE:  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "article",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_231": {
                "msg": {
                    "value": "REFERENCE SUMMARY: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "abstract",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "GENERATED SUMMARY: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "decoded_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "' '.join(decoded_words)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_272": {
                "msg": {
                    "value": "log_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "log_str + '%s: %.4f with confidence interval (%.4f, %.4f)\\n' % (key, val, val_cb, val_ce)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_274": {
                "msg": {
                    "value": "Writing final ROUGE results to %s...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "results_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_to_write, 'ROUGE_results.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_64": {
                "msg": {
                    "value": "Loading checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_198": {
                "msg": {
                    "value": "'Wrote example %i to file' % ex_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_224": {
                "msg": {
                    "value": "Wrote visualization data to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._decode_dir, 'attn_vis_data.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_98": {
                "msg": {
                    "value": "Decoder has finished reading dataset for single_pass.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_99": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Now starting ROUGE eval...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_dec_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_151": {
                "msg": {
                    "value": "\"We've been decoding with same checkpoint for %i seconds. Time to load new checkpoint\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "inspect_checkpoint.py": {
        "tensorflow": {
            "NewCheckpointReader_15": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "make_data.py": {
        "tensorflow": {
            "Example_65": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "reduce_sum_760": {
                "variable": {
                    "value": "dec_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_776": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dists[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_825": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.subtract(scores, tf.reduce_max(scores, 2, keep_dims=True))) * tf.expand_dims(mask, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_829": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "numerator + 1e-05 / mask.get_shape()[-1].value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "denominator + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._enc_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self._enc_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self._side_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.max_side_steps, 32, 64, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "side_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self._side_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "side_lens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self._side_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.max_side_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "side_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self._segment_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "segment_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self._target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self._dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_padding_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self._dec_pic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_pic_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_216": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_327": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "table_encodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "table_encodes * num_units ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "FLAGS.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_380": {
                "variable": {
                    "value": "self.reshaped_pix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._side_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 64, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_552": {
                "variable": {
                    "value": "tvars_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_554": {
                "variable": {
                    "value": "gradients_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._all_loss",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_585": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_599": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_602": {
                "variable": {
                    "value": "self._summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_664": {
                "variable": {
                    "value": "dec_in_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_in_state.c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_in_state.h[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_697": {
                "variable": {
                    "value": "new_dec_in_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_763": {
                "input_tensor": {
                    "value": "values_per_ex",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum(values_per_step) / dec_lens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_779": {
                "variable": {
                    "value": "covloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_800": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_801": {
                "variable": {
                    "value": "e_utterance",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "aij,jk->aik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "utterance",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Weight', shape=[dim, dim], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_803": {
                "variable": {
                    "value": "a_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "response",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(e_utterance, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_809": {
                "variable": {
                    "value": "reponse_atten",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rx_masked_softmax(a_matrix, utterance_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "utterance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_811": {
                "variable": {
                    "value": "feature_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reponse_atten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(rx_masked_softmax(a_matrix, utterance_mask), utterance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "response",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_812": {
                "variable": {
                    "value": "feature_sub",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reponse_atten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(rx_masked_softmax(a_matrix, utterance_mask), utterance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "response",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_813": {
                "variable": {
                    "value": "feature_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([feature_mul, feature_sub], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utterance.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_batch_extend_vocab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self._max_art_oovs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "max_art_oovs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.prev_coverage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_coverage",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_116": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_118": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_120": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(FLAGS.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(FLAGS.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=encoder_outputs)",
                            "Call"
                        ],
                        [
                            "transformer_encoder_outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_145": {
                "variable": {
                    "value": "transformer_fw_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "final_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "final_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_146": {
                "variable": {
                    "value": "transformer_bw_st",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "final_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "final_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMCell_156": {
                "variable": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "FLAGS.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_158": {
                "variable": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "FLAGS.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_160": {
                "variable": {
                    "value": "(rnn_encoder_outputs, (rnn_fw_st, rnn_bw_st))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(FLAGS.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(FLAGS.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "rnn_encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=rnn_encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_168": {
                "variable": {
                    "value": "side_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat(self._reduce_states(fw_st, bw_st), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "FLAGS.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "w_reduce_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim * 2, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "w_reduce_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim * 2, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "bias_reduce_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "bias_reduce_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_196": {
                "variable": {
                    "value": "old_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.c, bw_st.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "old_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.h, bw_st.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_h, w_reduce_h) + bias_reduce_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_c, w_reduce_c) + bias_reduce_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._hps.batch_size, self._max_art_oovs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_252": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "self._hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_253": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_255": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, attn_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, self._enc_batch_extend_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_285": {
                "variable": {
                    "value": "decoder_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_vec_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.hidden_dim * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "decoder_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self._last_state, attention_vec_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_296": {
                "variable": {
                    "value": "v_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "W_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attention_vec_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_298": {
                "variable": {
                    "value": "W_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_s",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, FLAGS.hidden_dim, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "variable": {
                    "value": "side_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_side_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pic_encoded, FLAGS.emb_dim * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(emb_side_inputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_304": {
                "variable": {
                    "value": "side_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "side_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(emb_side_inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "nn_ops.conv2d(side_features, W_s, [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_s', [1, 1, FLAGS.hidden_dim, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_309": {
                "variable": {
                    "value": "e_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_h * math_ops.tanh(side_features + decoder_features)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_390": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_392": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_402": {
                "variable": {
                    "value": "pic_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(pic_encoded)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.max_side_steps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_403": {
                "variable": {
                    "value": "emb_side_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pic_encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['global_pool']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.squeeze(pic_encoded), [FLAGS.batch_size, FLAGS.max_side_steps, -1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS.emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "variable": {
                    "value": "new_emb_side_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_side_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pic_encoded, FLAGS.emb_dim * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(emb_side_inputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size * int(FLAGS.max_side_steps / 5), 5, FLAGS.hidden_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "self._side_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "side_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat(self._reduce_states(fw_st, bw_st), -1), FLAGS.hidden_dim * 2)",
                            "Call"
                        ],
                        [
                            "self._add_side_rnn_encoder(new_emb_side_inputs, 5 * tf.ones(new_emb_side_inputs.get_shape()[0], dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.reshape(tf.tile(tf.expand_dims(self._side_states, 1), [1, 5, 1, 1]), [FLAGS.batch_size, -1, FLAGS.hidden_dim * 2]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, -1, FLAGS.hidden_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self._dec_in_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_498": {
                "variable": {
                    "value": "emb_side_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb_side_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pic_encoded, FLAGS.emb_dim * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(emb_side_inputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_502": {
                "variable": {
                    "value": "conditional_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_503": {
                "variable": {
                    "value": "conditional_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.multiply(conditional_vec, side_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_504": {
                "variable": {
                    "value": "self._cond_side_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "side_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "conditional_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.multiply(conditional_vec, side_outputs), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_506": {
                "variable": {
                    "value": "s_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_507": {
                "variable": {
                    "value": "s_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self._last_state, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(s_gate, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_511": {
                "variable": {
                    "value": "fusion_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_512": {
                "variable": {
                    "value": "fusion_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile(fusion_gate, [1, FLAGS.hidden_dim * 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_513": {
                "variable": {
                    "value": "fusion_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fusion_gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self._last_state, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.tile(fusion_gate, [1, FLAGS.hidden_dim * 2]), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_514": {
                "variable": {
                    "value": "side_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.tile(tf.expand_dims(self._side_states, 1), [1, 5, 1, 1]), [FLAGS.batch_size, -1, FLAGS.hidden_dim * 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_517": {
                "variable": {
                    "value": "attn_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(fusion_side, 1, kernel_initializer=tf.contrib.layers.xavier_initializer())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_518": {
                "variable": {
                    "value": "attn_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_side",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_attention(e_s, self._side_padding_mask)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.dense(fusion_side, 1, kernel_initializer=tf.contrib.layers.xavier_initializer()))",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(attn_side)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_540": {
                "variable": {
                    "value": "(topk_probs, self._topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[vocab_dist + copy_dist for (vocab_dist, copy_dist) in zip(vocab_dists_extended, attn_dists_projected)]",
                            "ListComp"
                        ],
                        [
                            "self._calc_final_dist(vocab_dists, self.attn_dists)",
                            "Call"
                        ],
                        [
                            "vocab_dists",
                            "Name"
                        ],
                        [
                            "final_dists[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "hps.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_541": {
                "variable": {
                    "value": "self._topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_579": {
                "variable": {
                    "value": "(grads_2, global_norm_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize_2, tvars_2, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._hps.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_594": {
                "msg": {
                    "value": "Building graph...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_604": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_797": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'co_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_824": {
                "x": {
                    "value": "tf.subtract(scores, tf.reduce_max(scores, 2, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_824": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.build_sequence_mask(sequence_length, num_heads=num_heads, maximum_length=tf.shape(document_encodes)[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "side_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "side_rnn_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "reduce_final_st",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_200": {
                "c": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "final_distribution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "Attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "variable": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "attn_dist * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_396": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_398": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._enc_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "variable": {
                    "value": "change_side_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self._side_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_421": {
                "variable": {
                    "value": "attn_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self._enc_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "change_side_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self._side_inputs, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_423": {
                "variable": {
                    "value": "self._video_aware_enc_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "attn_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(self._enc_states, change_side_states)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self._side_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_424": {
                "variable": {
                    "value": "self._news_aware_side_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(attn_matrix, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self._enc_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_425": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._last_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_426": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile(gate, [1, FLAGS.hidden_dim * 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_438": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim, vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_439": {
                "variable": {
                    "value": "w_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_440": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "side",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_577": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_587": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_597": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_725": {
                "c": {
                    "value": "results['states'].c[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "results['states'].h[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_779": {
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(attn_dists[0])",
                            "Call"
                        ],
                        [
                            "coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_803": {
                "a": {
                    "value": "e_utterance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('aij,jk->aik', utterance, weight)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_813": {
                "values": {
                    "value": "[feature_mul, feature_sub]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "subtract_824": {
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(scores, 2, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_168": {
                "values": {
                    "value": "self._reduce_states(fw_st, bw_st)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_245": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[dist, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_254": {
                "input": {
                    "value": "self._enc_batch_extend_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_258": {
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self._enc_batch_extend_vocab), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_402": {
                "input": {
                    "value": "pic_encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['global_pool']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.squeeze(pic_encoded), [FLAGS.batch_size, FLAGS.max_side_steps, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "interaction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_437": {
                "name_or_scope": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_503": {
                "x": {
                    "value": "conditional_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._last_state, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "side_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_512": {
                "input": {
                    "value": "fusion_gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self._last_state, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.tile(fusion_gate, [1, FLAGS.hidden_dim * 2]), 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, FLAGS.hidden_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_514": {
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(self._side_states, 1), [1, 5, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, -1, FLAGS.hidden_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_517": {
                "inputs": {
                    "value": "fusion_side",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fusion_gate * emb_side_inputs + (fusion_ones - fusion_gate) * side_states",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_526": {
                "name_or_scope": {
                    "value": "pic_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_824": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "a": {
                    "value": "old_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.h, bw_st.h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_h', [input_dim * 2, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_199": {
                "a": {
                    "value": "old_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.c, bw_st.c])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_c', [input_dim * 2, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_294": {
                "tensor": {
                    "value": "masked_sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_309": {
                "x": {
                    "value": "side_features + decoder_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_334": {
                "input": {
                    "value": "document_encodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "multi_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(table_encodes, rate=FLAGS.attention_dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_400": {
                "params": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_410": {
                "shape": {
                    "value": "new_emb_side_inputs.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_424": {
                "a": {
                    "value": "attn_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(self._enc_states, change_side_states)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_426": {
                "input": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self._last_state, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.tile(gate, [1, FLAGS.hidden_dim * 2]), 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, FLAGS.hidden_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_447": {
                "logits": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_463": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "hps.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_479": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_514": {
                "input": {
                    "value": "tf.expand_dims(self._side_states, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 5, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_400": {
                "value": {
                    "value": "self._dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "xw_plus_b_445": {
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_466": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_467": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self._enc_batch_extend_vocab), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_487": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_514": {
                "input": {
                    "value": "self._side_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_530": {
                "indices": {
                    "value": "self._dec_pic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "FLAGS.max_side_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_475": {
                "values": {
                    "value": "vocab_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_483": {
                "name_or_scope": {
                    "value": "coverage_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_485": {
                "name": {
                    "value": "coverage_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._coverage_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_468": {
                "x": {
                    "value": "gold_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/bin/ark_to_records.py": {
        "tensorflow": {
            "TFRecordWriter_71": {
                "variable": {
                    "value": "record_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "out_prefix + '.records'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_137": {
                "variable": {
                    "value": "record_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "out_prefix + '.records'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/bin/average_checkpoints.py": {
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/bin/convert_checkpoint.py": {
        "tensorflow": {
            "as_dtype_30": {
                "variable": {
                    "value": "target_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "args.target_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_29": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_34": {
                "variable": {
                    "value": "source_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "args.source_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_40": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/bin/main.py": {
        "tensorflow": {
            "ConfigProto_154": {
                "variable": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "args.intra_op_parallelism_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "args.inter_op_parallelism_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=args.gpu_allow_growth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_111": {
                "level": {
                    "value": "getattr(tf.logging, args.log_level)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_146": {
                "msg": {
                    "value": "Creating model directory %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MakeDirs_147": {
                "dirname": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Exists_40": {
                "filename": {
                    "value": "new_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(prefix, path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_145": {
                "filename": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GPUOptions_157": {
                "allow_growth": {
                    "value": "args.gpu_allow_growth",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/bin/update_vocab.py": {
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_36": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/config.py": {
        "tensorflow": {
            "latest_checkpoint_94": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/decoders/decoder.py": {
        "tensorflow": {
            "sequence_mask_21": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(logits)[1], dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "logits / tf.cast(sample_temperature, logits.dtype)",
                            "BinOp"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_27": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_65": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.nest.flatten(memory)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "first_state.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_723": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_770": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_771": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_772": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_773": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_774": {
                "variable": {
                    "value": "cum_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_778": {
                "variable": {
                    "value": "(_, _, _, outputs, lengths, cum_log_probs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(step, finished, initial_ids, outputs, lengths, cum_log_probs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(step.get_shape(), finished.get_shape(), tf.TensorShape([None] if last_step_as_input else [None, None]), tf.TensorShape(None), lengths.get_shape(), cum_log_probs.get_shape(), tf.contrib.framework.nest.map_structure(beam_search.get_state_shape_invariants, state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_793": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_101": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_727": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_735": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "logits / tf.cast(sample_temperature, logits.dtype)",
                            "BinOp"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_738": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "logits / tf.cast(sample_temperature, logits.dtype)",
                            "BinOp"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_757": {
                "variable": {
                    "value": "sampled_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack([batch_ids, sampled_ids], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_763": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(sampled_ids, end_id))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.equal(sampled_ids, end_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_776": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(initial_ids, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "read_probability",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_probability - k * step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "state[attention]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0, tf.shape(memory)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.nest.flatten(memory)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "first_state.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "not_equal_405": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(initial_ids.dtype, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs.stack())",
                            "Call"
                        ],
                        [
                            "outputs.write(step, sampled_ids)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_406": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "lengths + (1 - tf.cast(finished, lengths.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_413": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(initial_ids.dtype, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs.stack())",
                            "Call"
                        ],
                        [
                            "outputs.write(step, sampled_ids)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_414": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "lengths + (1 - tf.cast(finished, lengths.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_415": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_526": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_722": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(initial_ids, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_723": {
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(initial_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(start_tokens)[0] * beam_width",
                            "BinOp"
                        ],
                        [
                            "tf.shape(first_state)[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "initial_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_729": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.reduce_all(finished))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(cond, step < decode_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "step < decode_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cond_740": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "step < min_decode_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : beam_search.penalize_token(log_probs, end_id)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : log_probs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "argmax_746": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_767": {
                "variable": {
                    "value": "next_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, tf.expand_dims(sampled_ids, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "params": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ids[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_109": {
                "variable": {
                    "value": "read_probability",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_192": {
                "input": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_417": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "state.get('attention')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attention, 1)",
                            "Call"
                        ],
                        [
                            "attention[:, :, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_727": {
                "input_tensor": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(sampled_ids, end_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_737": {
                "x": {
                    "value": "sample_temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_748": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "tf.exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_751": {
                "variable": {
                    "value": "(topk_log_probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "sample_from",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_752": {
                "variable": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(topk_ids, inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_753": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "topk_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_755": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(topk_ids, inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack([batch_ids, topk_sampled_ids], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_757": {
                "values": {
                    "value": "[batch_ids, sampled_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_761": {
                "x": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(sampled_ids, end_id))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "lengths.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_763": {
                "x": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(log_probs, axis=-1, output_type=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "distribution.sample()",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(topk_ids, tf.stack([batch_ids, topk_sampled_ids], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "end_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "logits / tf.cast(sample_temperature, logits.dtype)",
                            "BinOp"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.output_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_191": {
                "input": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_330": {
                "input": {
                    "value": "start_tokens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_374": {
                "variable": {
                    "value": "state[attention]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[state['attention'], tf.expand_dims(attention, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_407": {
                "input_tensor": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "lengths + (1 - tf.cast(finished, lengths.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.not_equal(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(lengths, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(lengths, axis=-1) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_550": {
                "structure": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.tile_batch(initial_state, multiplier=beam_width)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_762": {
                "x": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(sampled_ids, end_id))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sampled_log_probs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_785": {
                "dims": {
                    "value": "[None] if last_step_as_input else [None, None]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorShape_786": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "map_structure_789": {
                "func": {
                    "value": "beam_search.get_state_shape_invariants",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'decoder': initial_state}",
                            "Dict"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_334": {
                "structure": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.tile_batch(memory, multiplier=beam_width)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_552": {
                "input": {
                    "value": "first_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(initial_state)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_755": {
                "values": {
                    "value": "[batch_ids, topk_sampled_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_767": {
                "input": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(log_probs, axis=-1, output_type=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "distribution.sample()",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(topk_ids, tf.stack([batch_ids, topk_sampled_ids], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_360": {
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.tile_batch(memory, multiplier=beam_width)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_748": {
                "x": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "log_probs * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(log_probs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(step < min_decode_length, true_fn=lambda : beam_search.penalize_token(log_probs, end_id), false_fn=lambda : log_probs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(log_probs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "x": {
                    "value": "step / k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_374": {
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "state.get('attention')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attention, 1)",
                            "Call"
                        ],
                        [
                            "attention[:, :, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/decoders/pointer_generator_helper.py": {
        "tensorflow": {
            "expand_dims_331": {
                "variable": {
                    "value": "processed_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(processed_query, 1)",
                            "Call"
                        ],
                        [
                            "self.query_layer(query) if self.query_layer else query",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_332": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ],
                        [
                            "nest.flatten(self._initial_state)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_334": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ],
                        [
                            "nest.flatten(self._initial_state)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_24": {
                "variable": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.BasicDecoderOutput(final_dists, sample_ids)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_30": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(outputs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, sample_ids, tf.ones_like(sample_ids) * 0)",
                            "Call"
                        ],
                        [
                            "self._helper.sample(time=time, outputs=final_dists, state=cell_state)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_31": {
                "variable": {
                    "value": "all_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_34": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(outputs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, sample_ids, tf.ones_like(sample_ids) * 0)",
                            "Call"
                        ],
                        [
                            "self._helper.sample(time=time, outputs=final_dists, state=cell_state)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_35": {
                "variable": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(sample_ids, self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(outputs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, sample_ids, tf.ones_like(sample_ids) * 0)",
                            "Call"
                        ],
                        [
                            "self._helper.sample(time=time, outputs=final_dists, state=cell_state)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(sample_ids) * 0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_37": {
                "variable": {
                    "value": "next_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(sample_ids)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_302": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_338": {
                "variable": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "coverage_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ],
                        [
                            "nest.flatten(self._initial_state)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_342": {
                "variable": {
                    "value": "coverage_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(coverage_vector, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_718": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_725": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, self.source_oov_words)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "vocab_dists_extended",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[vocab_dist, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_124": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(vocab_dist)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, attn_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, attn_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, self.source_extend_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_130": {
                "variable": {
                    "value": "attn_dists_projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self.source_extend_tokens), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "alignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_state.alignments",
                            "Attribute"
                        ],
                        [
                            "alignments * (1 - p_gen)",
                            "BinOp"
                        ],
                        [
                            "self._probability_fn(score, state)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapes",
                            "Name"
                        ],
                        [
                            "[batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "identity_265": {
                "variable": {
                    "value": "cell_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_343": {
                "input_tensor": {
                    "value": "v * tf.tanh(keys + processed_query + coverage_vector * w_c + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "input_tensor": {
                    "value": "v * tf.tanh(keys + processed_query + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_644": {
                "a": {
                    "value": "alignment_history.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DropoutWrapper_675": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_cell(self.num_layers, self.num_units, mode, dropout=self.dropout, residual_connections=self.residual_connections, cell_class=self.cell_class)",
                            "Call"
                        ],
                        [
                            "PointerGeneratorAttentionWrapper(cell, attention_mechanism, attention_layer_size=self.num_units, alignment_history=True, output_attention=self.output_is_attention, initial_cell_state=initial_cell_state)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=1.0 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_717": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_720": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_722": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(axis=1, values=args)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_14": {
                "input": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_69": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size() + self.source_oov_words",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'PointerGeneratorBahdanauAttention'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(p_gen_input, 1, True)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_185": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_200": {
                "variable": {
                    "value": "cell_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: tf.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: tf.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_263": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_285": {
                "variable": {
                    "value": "previous_alignments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "previous_alignment_history[i].size() > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_sum(tf.transpose(previous_alignment_history[i].stack(), [1, 2, 0]), axis=2)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros_like(previous_alignments[i])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_329": {
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_400": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "pointer_generator_bahdanau_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_501": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_509": {
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sampling_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_548": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "sample_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(outputs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, sample_ids, tf.ones_like(sample_ids) * 0)",
                            "Call"
                        ],
                        [
                            "self._helper.sample(time=time, outputs=final_dists, state=cell_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_67": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "calculate_pgen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "logits": {
                    "value": "cell_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._output_layer(cell_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_116": {
                "input": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(cell_outputs) * p_gen",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(cell_outputs) * p_gen",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_126": {
                "input": {
                    "value": "self.source_extend_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_198": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_255": {
                "input": {
                    "value": "cell_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_343": {
                "x": {
                    "value": "keys + processed_query + coverage_vector * w_c + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_345": {
                "x": {
                    "value": "keys + processed_query + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_504": {
                "x": {
                    "value": "sampling_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_577": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_722": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_726": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_517": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_201": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_287": {
                "input_tensor": {
                    "value": "tf.transpose(previous_alignment_history[i].stack(), [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_288": {
                "input": {
                    "value": "previous_alignments[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "a": {
                    "value": "previous_alignment_history[i].stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_212": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ],
                        [
                            "nest.flatten(self._initial_state)[0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/decoders/rnn_decoder.py": {
        "tensorflow": {
            "dropout_471": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=self._mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "tf.concat([last_outputs, context], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self._mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_500": {
                "variable": {
                    "value": "final",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_outputs, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "a": {
                    "value": "alignment_history.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DropoutWrapper_291": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_cell(self.num_layers, self.num_units, mode, dropout=self.dropout, residual_connections=self.residual_connections, cell_class=self.cell_class)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanism, attention_layer_size=self.num_units, alignment_history=True, output_attention=self.output_is_attention, initial_cell_state=initial_cell_state)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "build_cell(self.num_layers, self.num_units, mode, dropout=self.dropout, residual_connections=self.residual_connections, cell_class=self.cell_class, attention_layers=self.attention_layers, attention_mechanisms=attention_mechanisms)",
                            "Call"
                        ],
                        [
                            "_RNMTPlusDecoderCell(mode, self.num_layers, self.num_units, self.num_heads, memory, memory_sequence_length, cell_class=self.cell_class, dropout=self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_487": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multi_head_attention(self._num_heads, tf.expand_dims(last_outputs, 1), self._memory, self._mode, mask=self._memory_mask, dropout=self._dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(context, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_490": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_outputs, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=self._mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "tf.concat([last_outputs, context], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_111": {
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sampling_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_147": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=self._mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "tf.concat([last_outputs, context], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_467": {
                "name": {
                    "value": "RNMTPlusDecoderCellZeroState",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "rnn_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_479": {
                "name_or_scope": {
                    "value": "multi_head_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_494": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(outputs, rate=self._dropout, training=self._mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + last_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self._mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_tensor_106": {
                "x": {
                    "value": "sampling_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_482": {
                "input": {
                    "value": "last_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_491": {
                "name_or_scope": {
                    "value": "'rnn_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_456": {
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/decoders/self_attention_decoder.py": {
        "tensorflow": {
            "dropout_105": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "expand_dims_414": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "self.ffn(outputs, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_261": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_270": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.norm(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "self.ffn(outputs, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_424": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(attention, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(attention, axis=1)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(num_heads, num_units, dropout=attention_dropout, return_attention=num_sources == 1, name='multi_head_attention')",
                            "Call"
                        ],
                        [
                            "transformer.TransformerLayerWrapper(attention, dropout, name='sub_layer_%d' % (i + 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "warning_57": {
                "msg": {
                    "value": "Support for average attention network is experimental and may change in future versions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "layer_cache[self_keys]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "proj_cache_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "layer_cache[self_values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "proj_cache_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(attention, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(attention, axis=1)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(num_heads, num_units, dropout=attention_dropout, return_attention=num_sources == 1, name='multi_head_attention')",
                            "Call"
                        ],
                        [
                            "transformer.TransformerLayerWrapper(attention, dropout, name='sub_layer_%d' % (i + 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_374": {
                "variable": {
                    "value": "mem_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "mem_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(mem)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "mem_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(mem_length, maxlen=tf.shape(mem)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mem_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "layer_cache[prev_g]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, self.num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'layer_{}'.format(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_433": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "shape": {
                    "value": "proj_cache_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "proj_cache_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_123": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, self.num_heads, 0, self.num_units // self.num_heads]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "masked_multi_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_168": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([x, y], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_169": {
                "variable": {
                    "value": "(i, f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([x, y], -1), self.num_units * 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_362": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_119": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "average_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "'multi_head' if i == 0 else 'multi_head_%d' % i",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "shape_374": {
                "input": {
                    "value": "mem",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ],
                        [
                            "self.position_encoder(inputs, position=step + 1 if step is not None else None)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_168": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "x": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/encoders/conv_encoder.py": {
        "tensorflow": {
            "dropout_42": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "variable": {
                    "value": "encoder_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cnn_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._cnn_stack(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_61": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.tanh(outputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_71": {
                "variable": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(next_input, self.num_units, self.kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "outputs + next_input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "cnn_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "cnn_c",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/encoders/encoder.py": {
        "tensorflow": {
            "sequence_mask_21": {
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bool",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_21": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transition_layer_fn[i - 1](inputs)",
                            "Call"
                        ],
                        [
                            "self.transition_layer_fn(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/encoders/mean_encoder.py": {
        "tensorflow": {
            "identity_13": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(inputs, lengths=sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_16": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(inputs, lengths=sequence_length)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/encoders/rnn_encoder.py": {
        "tensorflow": {
            "dynamic_rnn_76": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ],
                        [
                            "rnn.make_rnn_cell(num_layers, num_units, dropout=dropout, residual_connections=residual_connections, cell_class=cell_class)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(sequence_length, total_reduction_factor)",
                            "Call"
                        ],
                        [
                            "sequence_length // self.reduction_factor",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_130": {
                "variable": {
                    "value": "(encoder_outputs_tup, encoder_state_tup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_cell(mode)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(sequence_length, total_reduction_factor)",
                            "Call"
                        ],
                        [
                            "sequence_length // self.reduction_factor",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_178": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_196": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_188": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(outputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_301": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(sequence_length, total_reduction_factor)",
                            "Call"
                        ],
                        [
                            "sequence_length // self.reduction_factor",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "total_reduction_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pow(self.reduction_factor, len(self.layers) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(inputs)[0], -1, input_depth * self.reduction_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "'layer_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(layer_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_296": {
                "x": {
                    "value": "current_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_297": {
                "x": {
                    "value": "tf.ceil(factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_297": {
                "x": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(current_length, tf.float32) / total_reduction_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_306": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=self._dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs if i >= 2 else outputs",
                            "IfExp"
                        ],
                        [
                            "pad_in_time(inputs, new_length - current_length)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], -1, input_depth * self.reduction_factor])",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/encoders/self_attention_encoder.py": {
        "tensorflow": {
            "dropout_64": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs, mask=mask, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sequence_mask_172": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.build_sequence_mask(sequence_length, num_heads=self.num_heads, maximum_length=tf.shape(inputs)[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(inputs)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs, mask=mask, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "multi_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs, mask=mask, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * self.num_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self.dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "transformed",
                            "Name"
                        ],
                        [
                            "self.position_encoder(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inputs, self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs, mask=mask, training=training)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/estimator.py": {
        "tensorflow": {
            "scalar_262": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tboard_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "actual_loss",
                            "Name"
                        ],
                        [
                            "_normalize_loss(loss[0], den=loss[2]) if len(loss) > 2 else actual_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_131": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EstimatorSpec_194": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_extract_loss(losses_shards)",
                            "Call"
                        ],
                        [
                            "local_model.compute_loss(logits, labels, training=False, params=params)",
                            "Call"
                        ],
                        [
                            "_extract_loss(loss)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_model.optimize_loss(loss, params=params, hvd=hvd)",
                            "Call"
                        ]
                    ]
                },
                "training_hooks": {
                    "value": "training_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_248": {
                "input_tensor": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "variable": {
                    "value": "num_words[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_model.features_inputter.get_length(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_189": {
                "variable": {
                    "value": "num_words[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_model.labels_inputter.get_length(labels) if not model.unsupervised else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "EstimatorSpec_208": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_extract_loss(losses_shards)",
                            "Call"
                        ],
                        [
                            "local_model.compute_loss(logits, labels, training=False, params=params)",
                            "Call"
                        ],
                        [
                            "_extract_loss(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_model.compute_metrics(predictions, labels)",
                            "Call"
                        ]
                    ]
                },
                "evaluation_hooks": {
                    "value": "evaluation_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "PredictOutput_223": {
                "variable": {
                    "value": "export_outputs[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "outputs": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_246": {
                "inputs": {
                    "value": "den",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_225": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_outputs": {
                    "value": "export_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/inputters/inputter.py": {
        "tensorflow": {
            "dropout_529": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reducer(transformed)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ServingInputReceiver_134": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.make_features(features=receiver_tensors.copy())",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[{} for _ in self.inputters]",
                            "ListComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "inputter.make_features(element=element, features=features, training=training)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_receiver_tensors()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/inputters/record_inputter.py": {
        "tensorflow": {
            "Example_77": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=shape)), 'values': tf.train.Feature(float_list=tf.train.FloatList(value=values))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['shape'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector.flatten().tolist()",
                            "Call"
                        ],
                        [
                            "example['values'].values",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(vector.shape)",
                            "Call"
                        ],
                        [
                            "first_record.features.feature['shape'].int64_list.value",
                            "Attribute"
                        ],
                        [
                            "tf.cast(example['shape'].values, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_60": {
                "variable": {
                    "value": "features[tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(values, shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_33": {
                "filenames": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, self.input_depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_59": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(values, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_77": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=shape)), 'values': tf.train.Feature(float_list=tf.train.FloatList(value=values))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_78": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_79": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_78": {
                "value": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(vector.shape)",
                            "Call"
                        ],
                        [
                            "first_record.features.feature['shape'].int64_list.value",
                            "Attribute"
                        ],
                        [
                            "tf.cast(example['shape'].values, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatList_79": {
                "value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector.flatten().tolist()",
                            "Call"
                        ],
                        [
                            "example['values'].values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/inputters/text_inputter.py": {
        "tensorflow": {
            "FileWriter_75": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_219": {
                "variable": {
                    "value": "(chars, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(tokens)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_none",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_apply",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Copy_44": {
                "oldpath": {
                    "value": "vocabulary_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "newpath": {
                    "value": "destination",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, basename)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Exists_58": {
                "filename": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'projector_config.pbtxt')",
                            "Call"
                        ]
                    ]
                }
            },
            "unicode_split_174": {
                "variable": {
                    "value": "ragged",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(element)",
                            "Call"
                        ]
                    ]
                },
                "input_encoding": {
                    "value": "UTF-8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_190": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.py_func(_string_len, [x], tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(element)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_196": {
                "variable": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ragged.row_lengths()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.py_func(_string_len, [x], tf.int64), tokens, dtype=tf.int64, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.constant([], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_199": {
                "variable": {
                    "value": "spaced_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.py_func(_split_chars, [x, max_length], [tf.string])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(element)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_fn_206": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.string_split(x, delimiter=' ').values",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "spaced_chars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.py_func(_split_chars, [x, max_length], [tf.string]), tokens, dtype=[tf.string], back_prop=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_215": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_216": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_411": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "lambda : initializer(shape, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "compat.name_from_variable_scope('w_embs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_420": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "features['ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "glorot_uniform_487": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_488": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "lambda : initializer(shape, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "compat.name_from_variable_scope('w_char_embs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_507": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_508": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_554": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[-1], self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_557": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_560": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_567": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_570": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, features['ids'])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self.dropout)(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embedding, inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=self.dropout, training=training)",
                            "Call"
                        ],
                        [
                            "self._embed(inputs, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[-1], self.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.pad(outputs, [[0, 0], [self.kernel_size - 1, self.kernel_size - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(outputs, self.output_size, self.kernel_size, strides=self.stride)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, tf.shape(inputs)[1], self.output_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoding, [-1, tf.shape(inputs)[1], self.num_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[1], self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_621": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "count_nonzero_623": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, tf.shape(inputs)[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_631": {
                "variable": {
                    "value": "(rnn_outputs, rnn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_cell(1, self.num_units, tf.estimator.ModeKeys.TRAIN if training else None, dropout=self.dropout, cell_class=self.cell_class)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._embed(flat_inputs, training)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.count_nonzero(flat_inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embeddings.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_642": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(rnn_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "last_encoding_from_state(rnn_state)",
                            "Call"
                        ],
                        [
                            "'average'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(inputs)[1], self.num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_219": {
                "x": {
                    "value": "tf.shape(tokens)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TextLineDataset_285": {
                "filenames": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_391": {
                "variable": {
                    "value": "bos",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[constants.START_OF_SENTENCE_ID]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_392": {
                "variable": {
                    "value": "eos",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[constants.END_OF_SENTENCE_ID]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "features[ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[bos, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_394": {
                "variable": {
                    "value": "features[ids_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[ids, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_407": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pretrained.astype(self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glorot_uniform_409": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_638": {
                "variable": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rnn_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_297": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(element)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_375": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_464": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_465": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_191": {
                "func": {
                    "value": "_string_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_200": {
                "func": {
                    "value": "_split_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.tokenize(element)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_422": {
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_bytes_52": {
                "bytes_or_text": {
                    "value": "'<unk%d>\\n' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_split_207": {
                "source": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "delimiter": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_554": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_570": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_621": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_642": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['char_ids']",
                            "Subscript"
                        ],
                        [
                            "features['char_ids']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/layers/bridge.py": {
        "tensorflow": {
            "Dense_101": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "sum(self.decoder_state_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "compat.name_from_variable_scope('dense')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "encoder_state_single",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_state_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compat.nest.flatten(encoder_state)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_111": {
                "variable": {
                    "value": "splitted",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(encoder_state_single)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.decoder_state_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/layers/common.py": {
        "tensorflow": {
            "embedding_lookup_33": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_gradient_to_tensor(params)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "self.transpose",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.input_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "dropout(x, self.input_dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "deserialize_197": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "config.pop('layer')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.input_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "dropout(x, self.input_dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.input_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "dropout(x, self.input_dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_77": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, self.kernel, transpose_b=self.transpose)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, shape[:-1] + [self.units])",
                            "Call"
                        ],
                        [
                            "all_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "all_outputs",
                            "Name"
                        ],
                        [
                            "dropout(outputs, self.output_dropout, training=training)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.output_layer_norm(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, self.kernel, transpose_b=self.transpose)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, shape[:-1] + [self.units])",
                            "Call"
                        ],
                        [
                            "all_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "all_outputs",
                            "Name"
                        ],
                        [
                            "dropout(outputs, self.output_dropout, training=training)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.output_layer_norm(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape[:-1] + [self.units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_12": {
                "value": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_112": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_113": {
                "x": {
                    "value": "variance + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "serialize_184": {
                "activation": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Constant_104": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Constant_106": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/layers/noise.py": {
        "tensorflow": {
            "logical_not_220": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "subword",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_full_match(tokens, '[^%s].*' % subword_token)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(tf.roll(right, shift=1, axis=0), left)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "start_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(start)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_235": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(words)",
                            "Call"
                        ]
                    ]
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_236": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape, maxval=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probability",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "keep_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "keep_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random_mask([num_words], 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_143": {
                "variable": {
                    "value": "keep_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(keep_ind)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random.uniform([1], maxval=num_words - 1, dtype=tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.squeeze(keep_ind, -1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_166": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_168": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "self.filler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([shape[0], 1], self.filler)",
                            "Call"
                        ],
                        [
                            "tf.pad(filler, [[0, 0], [0, shape[-1] - 1]])",
                            "Call"
                        ],
                        [
                            "constants.UNKNOWN_TOKEN",
                            "MethodArgument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, shape[-1] - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([num_words], maxval=1) * (self.max_distance + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset, num_words.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_words.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_190": {
                "variable": {
                    "value": "new_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.range(num_words) + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "regex_full_match_215": {
                "variable": {
                    "value": "subword",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens[:sequence_length]",
                            "Subscript"
                        ],
                        [
                            "tokens[:tf.math.count_nonzero(tokens)]",
                            "Subscript"
                        ],
                        [
                            "tokens[:, :tf.reduce_max(sequence_length)]",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "'[^%s].*' % subword_token",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "regex_full_match_217": {
                "variable": {
                    "value": "right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens[:sequence_length]",
                            "Subscript"
                        ],
                        [
                            "tokens[:tf.math.count_nonzero(tokens)]",
                            "Subscript"
                        ],
                        [
                            "tokens[:, :tf.reduce_max(sequence_length)]",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "'.*%s' % subword_token",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "regex_full_match_218": {
                "variable": {
                    "value": "left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens[:sequence_length]",
                            "Subscript"
                        ],
                        [
                            "tokens[:tf.math.count_nonzero(tokens)]",
                            "Subscript"
                        ],
                        [
                            "tokens[:, :tf.reduce_max(sequence_length)]",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "'%s.*' % subword_token",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_or_219": {
                "variable": {
                    "value": "subword",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.roll(right, shift=1, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_full_match(tokens, '%s.*' % subword_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "words",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(words, padding='').flat_values",
                            "Attribute"
                        ],
                        [
                            "tf.pad(outputs, [[0, input_length - output_length]])",
                            "Call"
                        ],
                        [
                            "self._apply(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_147": {
                "params": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(keep_mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(keep_ind)[0], 0), true_fn=lambda : tf.random.uniform([1], maxval=num_words - 1, dtype=tf.int64), false_fn=lambda : tf.squeeze(keep_ind, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_170": {
                "condition": {
                    "value": "replace_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random_mask(shape[:1], self.probability)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([shape[0], 1], self.filler)",
                            "Call"
                        ],
                        [
                            "tf.pad(filler, [[0, 0], [0, shape[-1] - 1]])",
                            "Call"
                        ],
                        [
                            "constants.UNKNOWN_TOKEN",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_191": {
                "params": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argsort(tf.range(num_words) + offset)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_221": {
                "condition": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_not(subword)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_67": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(words, padding='').flat_values",
                            "Attribute"
                        ],
                        [
                            "tf.pad(outputs, [[0, input_length - output_length]])",
                            "Call"
                        ],
                        [
                            "self._apply(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, input_length - output_length]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_72": {
                "variable": {
                    "value": "(tokens, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda arg: self(*arg, keep_shape=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(tokens, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_138": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_139": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_144": {
                "x": {
                    "value": "tf.shape(keep_ind)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_165": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_186": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_187": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_row_starts(tokens, start_indices)",
                            "Call"
                        ],
                        [
                            "tokens_to_words(tokens, subword_token=self.subword_token, is_spacer=self.is_spacer)",
                            "Call"
                        ],
                        [
                            "noise(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_188": {
                "shape": {
                    "value": "[num_words]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_219": {
                "input": {
                    "value": "right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_full_match(tokens, '.*%s' % subword_token)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens[:sequence_length]",
                            "Subscript"
                        ],
                        [
                            "tokens[:tf.math.count_nonzero(tokens)]",
                            "Subscript"
                        ],
                        [
                            "tokens[:, :tf.reduce_max(sequence_length)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(words, padding='').flat_values",
                            "Attribute"
                        ],
                        [
                            "tf.pad(outputs, [[0, input_length - output_length]])",
                            "Call"
                        ],
                        [
                            "self._apply(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "keep_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(keep_mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(keep_ind)[0], 0), true_fn=lambda : tf.random.uniform([1], maxval=num_words - 1, dtype=tf.int64), false_fn=lambda : tf.squeeze(keep_ind, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_145": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_words - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "input": {
                    "value": "keep_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(keep_mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(keep_ind)[0], 0), true_fn=lambda : tf.random.uniform([1], maxval=num_words - 1, dtype=tf.int64), false_fn=lambda : tf.squeeze(keep_ind, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "count_nonzero_57": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens[:sequence_length]",
                            "Subscript"
                        ],
                        [
                            "tokens[:tf.math.count_nonzero(tokens)]",
                            "Subscript"
                        ],
                        [
                            "tokens[:, :tf.reduce_max(sequence_length)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_max_77": {
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/layers/position.py": {
        "tensorflow": {
            "tile_34": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(maximum_length) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.tile(position, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "position * mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(maximum_length) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.tile(position, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "position * mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_37": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "position.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_28": {
                "variable": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_88": {
                "variable": {
                    "value": "position_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode([positions], input_dim, dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(position_encoding, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glorot_uniform_152": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "lambda : initializer(shape, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "compat.name_from_variable_scope('position_encoding/w_embs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_159": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(timesteps) + 1",
                            "BinOp"
                        ],
                        [
                            "[position]",
                            "List"
                        ],
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.maximum_position",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_174": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(timesteps) + 1",
                            "BinOp"
                        ],
                        [
                            "[position]",
                            "List"
                        ],
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_177": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(inv_timescales, [batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_160": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(timesteps) + 1",
                            "BinOp"
                        ],
                        [
                            "[position]",
                            "List"
                        ],
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_181": {
                "x": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_79": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(timesteps) + 1",
                            "BinOp"
                        ],
                        [
                            "[position]",
                            "List"
                        ],
                        [
                            "make_positions(sequence_length, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "tf.minimum(positions, self.maximum_position)",
                            "Call"
                        ],
                        [
                            "tf.cast(positions, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_178": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(inv_timescales, [batch_size]), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.range(depth / 2, dtype=tf.float32) * -log_timescale_increment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(inv_timescales, [batch_size]), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_177": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_180": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, -1) * tf.expand_dims(inv_timescales, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_180": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, -1) * tf.expand_dims(inv_timescales, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/layers/reducer.py": {
        "tensorflow": {
            "pad_14": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, padding_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_44": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(length, maxlen=maxlen, dtype=elem.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sequence_mask_46": {
                "variable": {
                    "value": "mask_combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_lengths, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "mask_combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask_combined, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_70": {
                "variable": {
                    "value": "max_sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_71": {
                "variable": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.shape(x)[1] for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "meshgrid_91": {
                "variable": {
                    "value": "(cols, rows)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(time)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_93": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cols - tf.expand_dims(offsets, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.mod(cols, time)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(tensor)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_94": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "tf.less(time_dim, length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : pad_in_time(x, length - time_dim)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x[:, :length]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_max_42": {
                "variable": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_lengths, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_95": {
                "params": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([rows, cols], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_22": {
                "x": {
                    "value": "time_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_89": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_150": {
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "foldl_161": {
                "fn": {
                    "value": "lambda a, x: a * x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.stack(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_175": {
                "values": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_161": {
                "values": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_185": {
                "variable": {
                    "value": "combined_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sequence_lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_186": {
                "variable": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "combined_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(sequence_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, padding_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "pad_in_time(x, maxlen - tf.shape(x)[1])",
                            "Call"
                        ],
                        [
                            "x * mask + identity_mask * identity_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sequence_mask_194": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max([tf.shape(x)[1] for x in inputs])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(combined_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "elem.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maxlen, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(length, maxlen=maxlen, dtype=elem.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/layers/rnn.py": {
        "tensorflow": {
            "StackedRNNCells_85": {
                "cells": {
                    "value": "cells",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RNN_103": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_class(num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "RNNCellWrapper(cell, output_dropout=dropout, residual_connection=residual_connections)",
                            "Call"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bidirectional_106": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "merge_mode": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "custom_object_scope_105": {
                "*args": {
                    "value": "_CUSTOM_OBJECTS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'RNNCellWrapper': RNNCellWrapper}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/layers/transformer.py": {
        "tensorflow": {
            "tile_19": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_heads, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_43": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, maximum_length, maximum_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_76": {
                "variable": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_98": {
                "variable": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_101": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_output(combined)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_176": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_output(combined)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(queries, num_units, 1)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, num_heads)",
                            "Call"
                        ],
                        [
                            "queries * (self.num_units // self.num_heads) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "self.linear_queries(inputs)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split_heads(keys, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['self_keys'], keys], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(keys, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache[0], keys], axis=2)",
                            "Call"
                        ],
                        [
                            "self.linear_keys(x)",
                            "Call"
                        ],
                        [
                            "split_heads(keys, self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_209": {
                "x": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_210": {
                "variable": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.softmax(tf.cast(dot, tf.float32)), dot.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(tf.cast(dot, tf.float32)), dot.dtype)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(attn, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "common.dropout(attn, self.dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split_heads(values, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['self_values'], values], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(values, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache[1], values], axis=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(x)",
                            "Call"
                        ],
                        [
                            "split_heads(values, self.num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_301": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "combine_heads(heads)",
                            "Call"
                        ],
                        [
                            "combine_heads(heads)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_326": {
                "variable": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "inner_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_327": {
                "variable": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(x, inner_dim, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inner, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self.inner(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inner, self.dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "conv1d_331": {
                "variable": {
                    "value": "outer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(x, inner_dim, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inner, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "self.inner(inputs)",
                            "Call"
                        ],
                        [
                            "common.dropout(inner, self.dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_356": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_output(combined)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_53": {
                "variable": {
                    "value": "maximum_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(1, tf.cast(tf.shape(mask)[1] + 1, dtype), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_or_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_142": {
                "value": {
                    "value": "tf.layers.conv1d(inputs, num_units * num_outputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_205": {
                "x": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_269": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(queries, num_units, 1)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, num_heads)",
                            "Call"
                        ],
                        [
                            "queries * (self.num_units // self.num_heads) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "self.linear_queries(inputs)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_397": {
                "variable": {
                    "value": "self.inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "inner_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "inner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_398": {
                "variable": {
                    "value": "self.outer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "outer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_438": {
                "variable": {
                    "value": "self.linear_queries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_queries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_439": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_keys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_440": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_441": {
                "variable": {
                    "value": "self.linear_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_units or queries.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_498": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(queries, num_units, 1)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, num_heads)",
                            "Call"
                        ],
                        [
                            "queries * (self.num_units // self.num_heads) ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "self.linear_queries(inputs)",
                            "Call"
                        ],
                        [
                            "split_heads(queries, self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split_heads(keys, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['self_keys'], keys], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(keys, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache[0], keys], axis=2)",
                            "Call"
                        ],
                        [
                            "self.linear_keys(x)",
                            "Call"
                        ],
                        [
                            "split_heads(keys, self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_502": {
                "x": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_504": {
                "variable": {
                    "value": "heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "drop_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(attn, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "common.dropout(attn, self.dropout, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split_heads(values, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['self_values'], values], axis=2)",
                            "Call"
                        ],
                        [
                            "split_heads(values, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache[1], values], axis=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(x)",
                            "Call"
                        ],
                        [
                            "split_heads(values, self.num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(sequence_length, [num_heads])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [num_heads, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(sequence_length, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(sequence_length, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_101": {
                "x": {
                    "value": "tf.shape(mask)[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_127": {
                "a": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv1d_143": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_units * num_outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "logits": {
                    "value": "tf.cast(dot, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_keys'], keys]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['self_values'], values]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_276": {
                "variable": {
                    "value": "(keys, values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cache['memory_keys'])[2], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_project_and_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (cache['memory_keys'], cache['memory_values'])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_500": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_501": {
                "x": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.cast(dot, tf.float32) * mask + (1.0 - mask) * tf.float32.min, dot.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_477": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache[0], keys]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_478": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache[1], values]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_488": {
                "variable": {
                    "value": "(keys, values)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(cache[0])[2], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _compute_kv(memory)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cache",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "logits": {
                    "value": "tf.cast(dot, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_159": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_177": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [tf.shape(inputs)[0], tf.shape(inputs)[1], num_heads, depth // num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [tf.shape(outputs)[0], tf.shape(outputs)[1], depth * num_heads])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(combined, num_units, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_output(combined)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_277": {
                "x": {
                    "value": "tf.shape(cache['memory_keys'])[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_500": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, maximum_length, maximum_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "compat.tf_compat(v2='linalg.band_part', v1='matrix_band_part')(mask, -1, 0)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask / tf.expand_dims(weight, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(mask, axis=1)",
                            "Call"
                        ],
                        [
                            "_lower_triangle_mask(sequence_length, maximum_length=maximum_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_or_step",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_489": {
                "x": {
                    "value": "tf.shape(cache[0])[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_277": {
                "input": {
                    "value": "cache['memory_keys']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_484": {
                "name": {
                    "value": "self.linear_keys.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_486": {
                "name": {
                    "value": "self.linear_values.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_489": {
                "input": {
                    "value": "cache[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/catalog.py": {
        "tensorflow": {}
    },
    "opennmt/models/language_model.py": {
        "tensorflow": {
            "Assert_73": {
                "variable": {
                    "value": "assert_fixed_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_all(tf.equal(length, tf.reduce_max(length)))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Language model does not support variable length contexts during generation, consider setting batch_size or bucket_width to 1']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "full_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ids, sampled_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_80": {
                "variable": {
                    "value": "(context_ids, start_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[tf.shape(ids)[1] - 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_83": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.reduce_sum(context_length), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.decoder.get_initial_state(batch_size=batch_size, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._decode(context_ids, context_length)[1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_bytes_133": {
                "bytes_or_text": {
                    "value": "sentence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.examples_inputter.tokenizer.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "misc.format_translation_output(sentence)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_146": {
                "values": {
                    "value": "[features['tokens'][1:], [constants.END_OF_SENTENCE_TOKEN]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_147": {
                "values": {
                    "value": "[features['ids'][1:], [constants.END_OF_SENTENCE_ID]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_148": {
                "input": {
                    "value": "features['length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_all_74": {
                "input_tensor": {
                    "value": "tf.equal(length, tf.reduce_max(length))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_79": {
                "control_inputs": {
                    "value": "[assert_fixed_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_106": {
                "x": {
                    "value": "full_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([ids, sampled_ids], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_74": {
                "x": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "context_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "length - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_84": {
                "x": {
                    "value": "tf.reduce_sum(context_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "input": {
                    "value": "start_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_74": {
                "input_tensor": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "context_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "length - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/model.py": {
        "tensorflow": {
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_101": {
                "minval": {
                    "value": "-param_init",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "param_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.get('param_init')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/sequence_classifier.py": {
        "tensorflow": {
            "reduce_mean_59": {
                "variable": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "last_encoding_from_state(encoder_state)",
                            "Call"
                        ],
                        [
                            "'average'",
                            "MethodArgument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.labels_inputter.vocabulary_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "classes_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoding, self.labels_inputter.vocabulary_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_71": {
                "variable": {
                    "value": "classes_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classes_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_91": {
                "labels": {
                    "value": "labels['classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/sequence_tagger.py": {
        "tensorflow": {
            "get_variable_73": {
                "variable": {
                    "value": "self.transition_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "transitions",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_tags, num_tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_122": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "labels['length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(labels['tags'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_126": {
                "variable": {
                    "value": "eval_metric_ops[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels['tags']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['tags']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(labels['length'], maxlen=tf.shape(labels['tags'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_68": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.labels_inputter.vocabulary_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_89": {
                "variable": {
                    "value": "output_sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_sequence_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "loss_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(log_likelihood)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loss.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_134": {
                "variable": {
                    "value": "(gold_flags, predicted_flags)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "flag_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "flag_bioes_tags",
                            "Name"
                        ]
                    ]
                },
                "inp": {
                    "value": "[labels['tags'], predictions['tags'], labels['length']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.bool, tf.bool]",
                    "type": "List",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "precision_140": {
                "variable": {
                    "value": "precision_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predicted_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "recall_141": {
                "variable": {
                    "value": "recall_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predicted_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "tags_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tags_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tags_id, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tags_prob, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "tags_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_outputs, self.labels_inputter.vocabulary_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "tags_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_106": {
                "x": {
                    "value": "labels['tags_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_110": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "labels['tags']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/sequence_to_sequence.py": {
        "tensorflow": {
            "constant_37": {
                "variable": {
                    "value": "bos",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[constants.START_OF_SENTENCE_ID]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "eos",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[constants.END_OF_SENTENCE_ID]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "data[ids_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[ids, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "data[ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[bos, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_436": {
                "variable": {
                    "value": "sparse_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "align_pairs_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compat.tf_compat(v2='strings.to_number', v1='string_to_number')(align_pairs_flat_str, out_type=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_437": {
                "variable": {
                    "value": "sparse_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(sparse_indices)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_438": {
                "variable": {
                    "value": "source_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "source_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(source_length, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_439": {
                "variable": {
                    "value": "target_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(target_length, tf.int64)",
                            "Call"
                        ],
                        [
                            "prediction['length'][i] - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_472": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(attention_probs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attention_probs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_495": {
                "variable": {
                    "value": "alignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(alignment, [align_shape[0] * align_shape[1], align_shape[2], align_shape[3]])",
                            "Call"
                        ],
                        [
                            "reducer.align_in_time(attention, tf.shape(target_tokens)[1])",
                            "Call"
                        ],
                        [
                            "outputs.get('attention')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "prediction['alignment'][i][:target_length]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_498": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_499": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_time, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_501": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_ids, [max_time])",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_ids, [max_time, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(batch_ids, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_502": {
                "variable": {
                    "value": "aligned_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_ids, alignment]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_503": {
                "variable": {
                    "value": "aligned_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prediction['tokens'][i][:target_length]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "aligned_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_ids, alignment], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_441": {
                "variable": {
                    "value": "alignment_matrix_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sparse_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(align_pairs_flat, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "sparse_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([tf.shape(sparse_indices)[0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[source_length, target_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_dense_443": {
                "variable": {
                    "value": "alignment_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "alignment_matrix_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse.SparseTensor(sparse_indices, sparse_values, [source_length, target_length])",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_to_dense_445": {
                "variable": {
                    "value": "alignment_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "sparse_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(align_pairs_flat, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[source_length, target_length]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "sparse_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([tf.shape(sparse_indices)[0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_450": {
                "a": {
                    "value": "alignment_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(alignment_matrix_sparse, validate_indices=False)",
                            "Call"
                        ],
                        [
                            "tf.sparse_to_dense(sparse_indices, [source_length, target_length], sparse_values, validate_indices=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_476": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_525": {
                "condition": {
                    "value": "tf.equal(target_tokens, unknown_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "aligned_source_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "align_tokens_from_attention(source_tokens, attention)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_478": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold_alignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "tf.expand_dims(weights, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_496": {
                "input": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prediction['tokens'][i][:target_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_497": {
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(alignment, [align_shape[0] * align_shape[1], align_shape[2], align_shape[3]])",
                            "Call"
                        ],
                        [
                            "reducer.align_in_time(attention, tf.shape(target_tokens)[1])",
                            "Call"
                        ],
                        [
                            "outputs.get('attention')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "prediction['alignment'][i][:target_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_526": {
                "x": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unknown_token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constants.UNKNOWN_TOKEN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_222": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "constants.START_OF_SENTENCE_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_278": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, original_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_281": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(attention, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[align_shape[0] * align_shape[1], align_shape[2], align_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "replaced_target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "replace_unknown_target(target_tokens, source_tokens, attention)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(target_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_429": {
                "value": {
                    "value": "[alignment_line]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_430": {
                "value": {
                    "value": "align_pairs_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.split([alignment_line]).values",
                            "Attribute"
                        ],
                        [
                            "tf.string_split([alignment_line], delimiter=' ').values",
                            "Attribute"
                        ]
                    ]
                },
                "sep": {
                    "value": "-",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_split_432": {
                "source": {
                    "value": "[alignment_line]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_split_433": {
                "source": {
                    "value": "align_pairs_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.split([alignment_line]).values",
                            "Attribute"
                        ],
                        [
                            "tf.string_split([alignment_line], delimiter=' ').values",
                            "Attribute"
                        ]
                    ]
                },
                "delimiter": {
                    "value": "-",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_475": {
                "input_tensor": {
                    "value": "tf.log(attention_probs + 1e-06) * gold_alignment",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "tf.get_variable_scope().name + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "labels is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cast_265": {
                "x": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_bytes_359": {
                "bytes_or_text": {
                    "value": "sentence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.labels_inputter.tokenizer.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "format_translation_output(sentence, score=score, attention=attention, alignment_type=alignment_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "TextLineDataset_388": {
                "filenames": {
                    "value": "self.alignment_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_437": {
                "input": {
                    "value": "sparse_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(align_pairs_flat, [-1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_473": {
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_216": {
                "input": {
                    "value": "tf.contrib.framework.nest.flatten(encoder_outputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "warning_323": {
                "msg": {
                    "value": "This model did not return attention vectors; guided alignment will not be applied",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_475": {
                "x": {
                    "value": "attention_probs + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_479": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(attention_probs)[1], dtype=attention_probs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_285": {
                "input": {
                    "value": "target_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vocab_rev.lookup(tf.cast(sampled_ids, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_tokens, [-1, original_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(replaced_target_tokens, original_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_216": {
                "structure": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/models/transformer.py": {
        "tensorflow": {}
    },
    "opennmt/optimizers/adafactor.py": {
        "tensorflow": {
            "cast_213": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grad, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "grad_squared_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(grad) + self._epsilon1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_262": {
                "variable": {
                    "value": "var_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "handle",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "new_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(old_val, tf.float32) - subtrahend",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_270": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rsqrt(_step_num() + 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_306": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "x": {
                    "value": "_reduce_rms(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._epsilon2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "variable": {
                    "value": "grad_squared_row_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(grad) + self._epsilon1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "variable": {
                    "value": "grad_squared_col_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(grad) + self._epsilon1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "assign_238": {
                "variable": {
                    "value": "vr_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vr')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * vr + mixing_rate * grad_squared_row_mean",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_239": {
                "variable": {
                    "value": "vc_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vc')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_vc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * vc + mixing_rate * grad_squared_col_mean",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "long_term_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_vr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * vr + mixing_rate * grad_squared_row_mean",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_242": {
                "variable": {
                    "value": "r_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_vr / long_term_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_243": {
                "variable": {
                    "value": "c_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_vc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * vc + mixing_rate * grad_squared_col_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_248": {
                "variable": {
                    "value": "v_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * v + mixing_rate * grad_squared",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_252": {
                "variable": {
                    "value": "clipping_denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "_reduce_rms(x) / self._clipping_threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_259": {
                "variable": {
                    "value": "new_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._beta1 * tf.cast(m, tf.float32) + (1.0 - self._beta1) * subtrahend",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_m, var.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_264": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pow_298": {
                "x": {
                    "value": "_step_num() + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-exponent",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_306": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "r_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "c_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[:-2] + shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "v_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "var.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_188": {
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grad, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_192": {
                "value": {
                    "value": "tf.IndexedSlices(grad, indices, tf.shape(handle))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_214": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grad, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_220": {
                "x": {
                    "value": "self._parameter_scale(old_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_261": {
                "x": {
                    "value": "old_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_270": {
                "x": {
                    "value": "_step_num() + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_285": {
                "x": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_306": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad * tf.expand_dims(r_factor, -1) * tf.expand_dims(c_factor, -2)",
                            "BinOp"
                        ],
                        [
                            "grad * tf.rsqrt(new_v)",
                            "BinOp"
                        ],
                        [
                            "x / clipping_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IndexedSlices_192": {
                "values": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grad, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.shape(handle)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_244": {
                "input": {
                    "value": "r_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(new_vr / long_term_mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rsqrt_250": {
                "x": {
                    "value": "new_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_rate * v + mixing_rate * grad_squared",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_260": {
                "ref": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._beta1 * tf.cast(m, tf.float32) + (1.0 - self._beta1) * subtrahend",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_m, var.dtype)",
                            "Call"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_192": {
                "input": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_257": {
                "x": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/optimizers/distributed_optimizer.py": {
        "tensorflow": {
            "name_scope_23": {
                "name": {
                    "value": "self._name + '_Allreduce'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/optimizers/mixed_precision_wrapper.py": {
        "tensorflow": {
            "get_collection_64": {
                "variable": {
                    "value": "reg_var_funcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "REGULARIZATION_FUNCTIONS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_any_177": {
                "variable": {
                    "value": "has_nan",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "has_nan_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_max_178": {
                "variable": {
                    "value": "amax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "amax_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "self.iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_194": {
                "variable": {
                    "value": "self.last_overflow_iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.scale_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_221": {
                "variable": {
                    "value": "iter_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_222": {
                "variable": {
                    "value": "overflow",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "has_nan",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(has_nan_ops)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.is_inf(amax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_224": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "overflow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(has_nan, tf.is_inf(amax))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "overflow_case",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "scale_case",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_246": {
                "variable": {
                    "value": "self.iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_249": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_254": {
                "variable": {
                    "value": "self.slow_x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_257": {
                "variable": {
                    "value": "self.xsquared_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_260": {
                "variable": {
                    "value": "self.b1_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_263": {
                "variable": {
                    "value": "self.b2_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_269": {
                "variable": {
                    "value": "is_nonfinite",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "has_nan",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(has_nan_ops)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.is_inf(amax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_270": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_nonfinite",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(has_nan, tf.is_inf(amax))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.pow(2.0, self.log_max)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.log(amax) / tf.log(tf.constant(2.0))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "assign_274": {
                "variable": {
                    "value": "x_hat_assn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.beta1 * self.x_hat + (1 - self.beta1) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_276": {
                "variable": {
                    "value": "b1_corr_assn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.b1_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.b1_correction * self.beta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_281": {
                "variable": {
                    "value": "slow_x_hat_assn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slow_x_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.beta2 * self.slow_x_hat + (1 - self.beta2) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_283": {
                "variable": {
                    "value": "xsquared_hat_assn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.xsquared_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.beta2 * self.xsquared_hat + (1 - self.beta2) * (x * x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_287": {
                "variable": {
                    "value": "b2_corr_assn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.b2_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.b2_correction * self.beta2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_297": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(sigma2, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_301": {
                "variable": {
                    "value": "proposed_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "log_difference",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16 - log_cutoff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_302": {
                "variable": {
                    "value": "scale_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_value(proposed_scale, self.scale_min, self.scale_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_306": {
                "variable": {
                    "value": "iter_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_121": {
                "variable": {
                    "value": "should_skip_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.is_inf(grad_amax)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_has_nans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_202": {
                "variable": {
                    "value": "new_scale_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.scale / self.step_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.scale_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.scale_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_204": {
                "variable": {
                    "value": "scale_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_scale_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(self.scale / self.step_factor, self.scale_min, self.scale_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(self.scale * self.step_factor, self.scale_min, self.scale_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_205": {
                "variable": {
                    "value": "overflow_iter_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.last_overflow_iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.iteration",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_212": {
                "variable": {
                    "value": "should_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "since_overflow % self.step_window",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "FP32-master-copy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "IndexedSlices_136": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad.values * scale",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_214": {
                "variable": {
                    "value": "new_scale_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.scale * self.step_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.scale_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.scale_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_217": {
                "pred": {
                    "value": "should_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(since_overflow % self.step_window, 0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "scale_update_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.scale",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_inf_222": {
                "x": {
                    "value": "amax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(amax_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_227": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_228": {
                "input": {
                    "value": "iter_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.iteration, 1)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(self.iteration, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_269": {
                "x": {
                    "value": "amax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(amax_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_278": {
                "control_inputs": {
                    "value": "[x_hat_assn, b1_corr_assn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_289": {
                "control_inputs": {
                    "value": "[slow_x_hat_assn, xsquared_hat_assn, b2_corr_assn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_297": {
                "x": {
                    "value": "sigma2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "e_xsquared - slow_mu * slow_mu",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_304": {
                "t": {
                    "value": "proposed_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, log_difference)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.scale_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.scale_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_308": {
                "control_inputs": {
                    "value": "[scale_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_309": {
                "input": {
                    "value": "iter_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.iteration, 1)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(self.iteration, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "fp32_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.cast(var.initialized_value(), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "var.name.split(':')[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "expected_shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "bool(var.get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.GLOBAL_VARIABLES, 'FP32_MASTER_COPIES']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "fp32_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.IndexedSlices(grad_values, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "grad * scale",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_108": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_116": {
                "*inputs": {
                    "value": "apply_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_inf_121": {
                "x": {
                    "value": "grad_amax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_124": {
                "control_inputs": {
                    "value": "[loss_scale_update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_125": {
                "pred": {
                    "value": "should_skip_update",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.is_inf(grad_amax), grad_has_nans)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "apply_ops_wrapper",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_207": {
                "control_inputs": {
                    "value": "[scale_assign, overflow_iter_assign]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_208": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_216": {
                "ref": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_scale_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(self.scale / self.step_factor, self.scale_min, self.scale_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(self.scale * self.step_factor, self.scale_min, self.scale_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_271": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.log_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_297": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_any_174": {
                "input_tensor": {
                    "value": "tf.is_nan(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_175": {
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_272": {
                "x": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_174": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "tf.cond(is_nonfinite, lambda : tf.pow(2.0, self.log_max), lambda : tf.log(amax) / tf.log(tf.constant(2.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_175": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "tf.cond(is_nonfinite, lambda : tf.pow(2.0, self.log_max), lambda : tf.log(amax) / tf.log(tf.constant(2.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_272": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "var.initialized_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_113": {
                "ref": {
                    "value": "dst_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fp32_to_fp16[var.name]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.saturate_cast(var, tf.float16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_87": {
                "ys": {
                    "value": "tf.contrib.layers.apply_regularization(reg_funcs[var.name], [fp32_var])",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "fp32_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.cast(var.initialized_value(), tf.float32), name=var.name.split(':')[0], expected_shape=var.shape, dtype=tf.float32, trainable=False, validate_shape=bool(var.get_shape()), collections=[tf.GraphKeys.GLOBAL_VARIABLES, 'FP32_MASTER_COPIES'])",
                            "Call"
                        ]
                    ]
                }
            },
            "saturate_cast_113": {
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/optimizers/multistep_adam.py": {
        "tensorflow": {
            "convert_to_tensor_72": {
                "variable": {
                    "value": "self._n_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_114": {
                "variable": {
                    "value": "dense_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_graph_67": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_add_92": {
                "variable": {
                    "value": "assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "grad_acc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'grad_acc')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_95": {
                "pred": {
                    "value": "tf.equal(self._get_iter_variable(), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _apply_adam(grad_acc, apply_fn, grad, var, *args, **kwargs)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _accumulate_gradient(grad_acc, grad)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_141": {
                "*inputs": {
                    "value": "*update_ops + [update_iter, maybe_update_beta]",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name_scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "group_89": {
                "*inputs": {
                    "value": "adam_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_fn(total_grad, var, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "grad_acc_to_zero_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_acc.assign(tf.zeros_like(grad_acc), use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_93": {
                "*inputs": {
                    "value": "assign_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_add(grad_acc, grad, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_95": {
                "x": {
                    "value": "self._get_iter_variable()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_126": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_137": {
                "variable": {
                    "value": "maybe_update_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(iter_, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_update_beta_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "self._n_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_86": {
                "control_inputs": {
                    "value": "[adam_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "colocate_with_127": {
                "op": {
                    "value": "iter_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_iter_variable()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "input": {
                    "value": "grad_acc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'grad_acc')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_136": {
                "*inputs": {
                    "value": "update_beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "beta1_power.assign(beta1_power * self._beta1_t, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "beta2_power.assign(beta2_power * self._beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_137": {
                "x": {
                    "value": "iter_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_iter_variable()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[maybe_update_beta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mod_139": {
                "x1": {
                    "value": "iter_ + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._n_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/runner.py": {
        "tensorflow": {
            "ConfigProto_100": {
                "variable": {
                    "value": "session_config_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=gpu_allow_growth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_136": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "self._config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "summary_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_config['save_summary_steps']",
                            "Subscript"
                        ]
                    ]
                },
                "session_config": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "params.get('gradients_accum', 1) * summary_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TrainSpec_233": {
                "variable": {
                    "value": "train_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "estimator_util.make_input_fn(self._model, tf.estimator.ModeKeys.TRAIN, self._config['train']['batch_size'], features_file=self._config['data']['train_features_file'], labels_file=self._config['data'].get('train_labels_file'), batch_type=self._config['train']['batch_type'], batch_multiplier=self._num_devices, bucket_width=self._config['train']['bucket_width'], maximum_features_length=self._config['train'].get('maximum_features_length'), maximum_labels_length=self._config['train'].get('maximum_labels_length'), shuffle_buffer_size=self._config['train']['sample_buffer_size'], single_pass=self._config['train'].get('single_pass', False), num_shards=self._hvd.size() if self._hvd is not None else 1, shard_index=self._hvd.rank() if self._hvd is not None else 0, num_threads=self._config['train'].get('num_threads'), prefetch_buffer_size=self._config['train'].get('prefetch_buffer_size'), return_dataset=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "train_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config['train'].get('train_steps')",
                            "Call"
                        ],
                        [
                            "train_steps // self._hvd.size()",
                            "BinOp"
                        ]
                    ]
                },
                "hooks": {
                    "value": "train_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hooks.LogParametersCountHook()]",
                            "List"
                        ]
                    ]
                }
            },
            "EvalSpec_257": {
                "variable": {
                    "value": "eval_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "estimator_util.make_input_fn(self._model, tf.estimator.ModeKeys.EVAL, self._config['eval']['batch_size'], features_file=self._config['data']['eval_features_file'], labels_file=self._config['data'].get('eval_labels_file'), num_threads=self._config['eval'].get('num_threads'), prefetch_buffer_size=self._config['eval'].get('prefetch_buffer_size'), return_dataset=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "exporters": {
                    "value": "_make_exporters(self._config['eval']['exporters'], estimator_util.make_serving_input_fn(self._model, metadata=self._config['data']), assets_extra=self._get_model_assets())",
                    "type": "Call",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "self._config['eval']['eval_delay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "train_and_evaluate_297": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._make_estimator()",
                            "Call"
                        ],
                        [
                            "self._make_estimator()",
                            "Call"
                        ],
                        [
                            "self._make_estimator()",
                            "Call"
                        ],
                        [
                            "self._make_estimator()",
                            "Call"
                        ],
                        [
                            "self._make_estimator()",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=estimator_util.make_input_fn(self._model, tf.estimator.ModeKeys.TRAIN, self._config['train']['batch_size'], features_file=self._config['data']['train_features_file'], labels_file=self._config['data'].get('train_labels_file'), batch_type=self._config['train']['batch_type'], batch_multiplier=self._num_devices, bucket_width=self._config['train']['bucket_width'], maximum_features_length=self._config['train'].get('maximum_features_length'), maximum_labels_length=self._config['train'].get('maximum_labels_length'), shuffle_buffer_size=self._config['train']['sample_buffer_size'], single_pass=self._config['train'].get('single_pass', False), num_shards=self._hvd.size() if self._hvd is not None else 1, shard_index=self._hvd.rank() if self._hvd is not None else 0, num_threads=self._config['train'].get('num_threads'), prefetch_buffer_size=self._config['train'].get('prefetch_buffer_size'), return_dataset=False), max_steps=train_steps, hooks=train_hooks)",
                            "Call"
                        ],
                        [
                            "self._build_train_spec(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "self._build_train_spec(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=estimator_util.make_input_fn(self._model, tf.estimator.ModeKeys.EVAL, self._config['eval']['batch_size'], features_file=self._config['data']['eval_features_file'], labels_file=self._config['data'].get('eval_labels_file'), num_threads=self._config['eval'].get('num_threads'), prefetch_buffer_size=self._config['eval'].get('prefetch_buffer_size'), return_dataset=False), steps=None, exporters=_make_exporters(self._config['eval']['exporters'], estimator_util.make_serving_input_fn(self._model, metadata=self._config['data']), assets_extra=self._get_model_assets()), throttle_secs=self._config['eval']['eval_delay'])",
                            "Call"
                        ],
                        [
                            "self._build_eval_spec()",
                            "Call"
                        ],
                        [
                            "self._build_eval_spec()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_629": {
                "variable": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_641": {
                "msg": {
                    "value": "Searching the largest batch size between %d and %d with a precision of %d...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "min_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "max_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size - 1",
                            "BinOp"
                        ],
                        [
                            "16384",
                            "Constant"
                        ],
                        [
                            "min(max_batch_size, train_config['effective_batch_size'])",
                            "Call"
                        ],
                        [
                            "16384",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_669": {
                "msg": {
                    "value": "Batch size auto tuned to %d.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "min_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_97": {
                "msg": {
                    "value": "Using parameters:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump(self._config, indent=2, default_flow_style=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Estimator_155": {
                "model_fn": {
                    "value": "estimator_util.make_model_fn(self._model, eval_prediction_hooks_fn=self._make_eval_prediction_hooks_fn(), devices=devices, hvd=self._hvd)",
                    "type": "Call",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(model_dir=self._config['model_dir'], tf_random_seed=self._seed, save_summary_steps=summary_steps, session_config=self._session_config, log_step_count_steps=params.get('gradients_accum', 1) * summary_steps)",
                            "Call"
                        ],
                        [
                            "run_config.replace(save_checkpoints_secs=train_config.get('save_checkpoints_secs'), save_checkpoints_steps=train_config.get('save_checkpoints_steps'))",
                            "Call"
                        ],
                        [
                            "run_config.replace(save_checkpoints_secs=None, save_checkpoints_steps=None)",
                            "Call"
                        ],
                        [
                            "run_config.replace(keep_checkpoint_max=train_config['keep_checkpoint_max'])",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "latest_checkpoint_292": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_311": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_332": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_390": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_446": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_486": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_509": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels['ids_out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_511": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "labels['length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cross_entropy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_513": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_entropy * weights",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_656": {
                "msg": {
                    "value": "Trying training with batch size %d...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(max_batch_size + min_batch_size) // 2",
                            "BinOp"
                        ],
                        [
                            "train_config.get('batch_size')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_181": {
                "filename": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._config['model_dir'], 'eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_182": {
                "dirname": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._config['model_dir'], 'eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_217": {
                "msg": {
                    "value": "Accumulate gradients of %d iterations to reach effective batch size of %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._config['params']['gradients_accum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "train_config['effective_batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Exists_277": {
                "filename": {
                    "value": "generated_assets_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._config['model_dir'], 'assets')",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_278": {
                "dirname": {
                    "value": "generated_assets_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._config['model_dir'], 'assets')",
                            "Call"
                        ]
                    ]
                }
            },
            "IsDirectory_291": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsDirectory_310": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsDirectory_331": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsDirectory_389": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsDirectory_445": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsDirectory_487": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_488": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_662": {
                "msg": {
                    "value": "... failed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_665": {
                "msg": {
                    "value": "... succeeded, continue until the search range is smaller than %d.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "min_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GPUOptions_103": {
                "allow_growth": {
                    "value": "gpu_allow_growth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConfigProto_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_531": {
                "session_creator": {
                    "value": "tf.train.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, config=self._session_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LatestExporter_567": {
                "name": {
                    "value": "latest",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "serving_input_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "assets_extra": {
                    "value": "assets_extra",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GPUOptions_630": {
                "per_process_gpu_memory_fraction": {
                    "value": "gpu_memory_fraction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FinalExporter_570": {
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "serving_input_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "assets_extra": {
                    "value": "assets_extra",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ChiefSessionCreator_532": {
                "checkpoint_filename_with_path": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(self._config['model_dir'])",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "config": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BestExporter_575": {
                "name": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "serving_input_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "assets_extra": {
                    "value": "assets_extra",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_bytes_553": {
                "bytes_or_text": {
                    "value": "sentence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_tokenizer.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "format_translation_output(sentence, score=batch['score'], token_level_scores=token_level_scores, attention=attention, alignment_type=alignment_type)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/tests/bridge_test.py": {
        "tensorflow": {
            "main_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_8": {
                "shape": {
                    "value": "[batch_size, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/checkpoint_test.py": {
        "tensorflow": {
            "main_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(step, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_71": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "value.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.as_dtype(value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_56": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_59": {
                "variable": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_60": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.as_dtype(value.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/common_layers_test.py": {
        "tensorflow": {
            "zeros_17": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "weight_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_31": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer_norm(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/tests/compat_test.py": {
        "tensorflow": {
            "main_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/config_test.py": {
        "tensorflow": {
            "main_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_21": {
                "bytes_or_text": {
                    "value": "yaml.dump(config1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_23": {
                "bytes_or_text": {
                    "value": "yaml.dump(config2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/data_test.py": {
        "tensorflow": {
            "range_25": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_39": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(features, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random_normal([num_examples], mean=12, stddev=6, seed=42)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.cast(1, tf.int32), tf.cast(features, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features + labels_diff",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(tf.cast(1, tf.int32), tf.cast(labels, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_51": {
                "value": {
                    "value": "features_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "labels_length",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/decoder_test.py": {
        "tensorflow": {
            "constant_40": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "large_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_76": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, time_dim, depth).astype(dtype.as_numpy_dtype())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_102": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_with_default_126": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_127": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(vocab_size, depth).astype(dtype.as_numpy_dtype())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(vocab_size, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiRNNCell_250": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.LSTMCell(5), tf.nn.rnn_cell.LSTMCell(5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_294": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_295": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 5, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_296": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 7, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_297": {
                "variable": {
                    "value": "memory_sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_308": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_324": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_325": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 5, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_338": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_23": {
                "input": {
                    "value": "np.random.randn(batch_size, time, depth).astype(dtype.as_numpy_dtype())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decode_fn(embedding, start_tokens, end_token, vocab_size=vocab_size, initial_state=initial_state, maximum_iterations=10, memory=memory, memory_sequence_length=memory_sequence_length, **additional_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_311": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_326": {
                "shape": {
                    "value": "[3, 2, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_328": {
                "value": {
                    "value": "[1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_341": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "memory[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_250": {
                "units": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_251": {
                "units": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_108": {
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.placeholder_with_default(np.random.randn(batch_size, time, depth).astype(dtype.as_numpy_dtype()), shape=(None, None, depth)) for time in memory_time]",
                            "ListComp"
                        ],
                        [
                            "memory[0]",
                            "Subscript"
                        ],
                        [
                            "tf.random.uniform([3, 7, 6])",
                            "Call"
                        ],
                        [
                            "[tf.random.uniform([3, 7, 6]), tf.random.uniform([3, 2, 6])]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_181": {
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.placeholder_with_default(np.random.randn(batch_size, time, depth).astype(dtype.as_numpy_dtype()), shape=(None, None, depth)) for time in memory_time]",
                            "ListComp"
                        ],
                        [
                            "memory[0]",
                            "Subscript"
                        ],
                        [
                            "tf.random.uniform([3, 7, 6])",
                            "Call"
                        ],
                        [
                            "[tf.random.uniform([3, 7, 6]), tf.random.uniform([3, 2, 6])]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/tests/encoder_test.py": {
        "tensorflow": {
            "placeholder_with_default_15": {
                "input": {
                    "value": "np.random.randn(batch_size, max(sequence_length), depth).astype(dtype.as_numpy_dtype())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([1, 5, 1]), 2 * tf.ones([1, 5, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_58": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([2, 4], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_206": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 5, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_212": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 5, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 5, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_262": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_263": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 3, 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_272": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_273": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 3, 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_282": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_283": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 3, 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_291": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 3, 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(length, maxlen=tf.shape(inputs)[1], dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_227": {
                "variable": {
                    "value": "outputs_layer_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "outputs_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "shape": {
                    "value": "[3, 6, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_246": {
                "value": {
                    "value": "[6, 6, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "shape": {
                    "value": "[3, 6, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[3, 4, 2]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_56": {
                "shape": {
                    "value": "[1, 5, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_80": {
                "value": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[3, 4, 2]",
                            "List"
                        ],
                        [
                            "[17, 21, 20]",
                            "List"
                        ],
                        [
                            "[4, 6, 5]",
                            "List"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([2, 5, 4], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_217": {
                "units": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_224": {
                "units": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "state",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer(inputs)",
                            "Call"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length, depth=10, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones([1, 5, 1]), 2 * tf.ones([1, 5, 1])], 0)",
                            "Call"
                        ],
                        [
                            "inputs * tf.expand_dims(mask, -1)",
                            "BinOp"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length)",
                            "Call"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length)",
                            "Call"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.zeros([3, 5, 10])",
                            "Call"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length)",
                            "Call"
                        ],
                        [
                            "_build_dummy_sequences(sequence_length)",
                            "Call"
                        ],
                        [
                            "[tf.zeros([3, 5, 10]), tf.zeros([3, 6, 10])]",
                            "List"
                        ],
                        [
                            "tf.zeros([3, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.zeros([3, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.zeros([3, 5, 10])",
                            "Call"
                        ],
                        [
                            "[tf.zeros([3, 5, 10]), tf.zeros([3, 6, 10])]",
                            "List"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/evaluator_test.py": {
        "tensorflow": {
            "main_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/hooks_test.py": {
        "tensorflow": {
            "placeholder_11": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/inputter_test.py": {
        "tensorflow": {
            "main_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size + num_oov_buckets, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_80": {
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tables_initializer_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_38": {
                "bytes_or_text": {
                    "value": "'%d\\n' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/misc_test.py": {
        "tensorflow": {
            "main_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/model_test.py": {
        "tensorflow": {
            "main_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "model.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/noise_test.py": {
        "tensorflow": {
            "constant_19": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "tf.constant([['a\uffed', 'b', 'c\uffed', 'd', '\uffede'], ['a', 'b', 'c', '', '']])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_20": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_30": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "tf.constant([['a\uffed', 'b', 'c\uffed', 'd', '\uffede'], ['a', 'b', 'c', '', '']])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_31": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.tokens_to_words(tokens)",
                            "Call"
                        ],
                        [
                            "noise.tokens_to_words(tokens, subword_token='\u2581', is_spacer=True)",
                            "Call"
                        ],
                        [
                            "tf.constant(words)",
                            "Call"
                        ],
                        [
                            "noise.WordReplacement(1, filler='d')(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.tokens_to_words(tokens)",
                            "Call"
                        ],
                        [
                            "noise.tokens_to_words(tokens, subword_token='\u2581', is_spacer=True)",
                            "Call"
                        ],
                        [
                            "tf.constant(words)",
                            "Call"
                        ],
                        [
                            "noise.WordReplacement(1, filler='d')(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ],
                        [
                            "tf.constant(expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_62": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.tokens_to_words(tokens)",
                            "Call"
                        ],
                        [
                            "noise.tokens_to_words(tokens, subword_token='\u2581', is_spacer=True)",
                            "Call"
                        ],
                        [
                            "tf.constant(words)",
                            "Call"
                        ],
                        [
                            "noise.WordReplacement(1, filler='d')(words)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13'.split()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[['a\uffed', 'b', 'c\uffed', 'd', '\uffede'], ['a', 'b', 'c', '', '']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/optim_test.py": {
        "tensorflow": {
            "Dense_20": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[[1.0, 2.0], [3.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable([[1.0, 2.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_73": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "[[1.1, 2.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "main_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_51": {
                "var_list": {
                    "value": "extra_variables",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/position_test.py": {
        "tensorflow": {
            "expand_dims_14": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(positions, [1, 1, depth])",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length, maximum_length=7)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions([4, 6])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_15": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(positions, [1, 1, depth])",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length, maximum_length=7)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions([4, 6])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_28": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 5, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "main_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_16": {
                "x": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(positions, [1, 1, depth])",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions(sequence_length, maximum_length=7)",
                            "Call"
                        ],
                        [
                            "self.evaluate(positions)",
                            "Call"
                        ],
                        [
                            "position.make_positions([4, 6])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/reducer_test.py": {
        "tensorflow": {
            "main_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_15": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_27": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_39": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_56": {
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1], [-1], [-1]], [[1], [2], [3]], [[1], [2], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [-1], [-1], [-1]], [[1], [2], [3], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[1, 2, 3, 0, 0, 6, 0], [1, 2, 3, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0, 7]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_57": {
                "value": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 3, 2]",
                            "List"
                        ],
                        [
                            "[1, 3, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_58": {
                "value": {
                    "value": "max_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 5, 2]",
                            "List"
                        ],
                        [
                            "[4, 5, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_78": {
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1], [-1], [-1]], [[1], [2], [3]], [[1], [2], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [-1], [-1], [-1]], [[1], [2], [3], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[1, 2, 3, 0, 0, 6, 0], [1, 2, 3, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0, 7]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 3, 2]",
                            "List"
                        ],
                        [
                            "[1, 3, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_80": {
                "value": {
                    "value": "max_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 5, 2]",
                            "List"
                        ],
                        [
                            "[4, 5, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_108": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_138": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_139": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_178": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_179": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_202": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_226": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_227": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_251": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_252": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_276": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reducer.align_in_time(tf.constant(a, dtype=tf.float32), tf.constant(length))",
                            "Call"
                        ],
                        [
                            "[[[1], [0], [0], [0]], [[1], [2], [3], [0]]]",
                            "List"
                        ],
                        [
                            "[[[1], [0]], [[1], [2]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1]], [[1], [2], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4]], [[1], [2], [-1], [-1]], [[1], [2], [-1], [-1]]]",
                            "List"
                        ],
                        [
                            "[[[1], [2], [3], [4], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]], [[1], [2], [-1], [-1], [-1], [-1]]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_277": {
                "value": {
                    "value": "length_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ],
                        [
                            "[4, 2, 2]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/tests/rnn_test.py": {
        "tensorflow": {
            "uniform_13": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_22": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_31": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/runner_test.py": {
        "tensorflow": {
            "main_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "meta_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "export_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "runner.export(export_dir_base=export_dir_base)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/tests/sequence_classifier_test.py": {
        "tensorflow": {
            "placeholder_with_default_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, max(sequence_length), input_depth).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, input_depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "variable": {
                    "value": "abs_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(encoding)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_23": {
                "x": {
                    "value": "encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sequence_classifier.last_encoding_from_state(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/sequence_tagger_test.py": {
        "tensorflow": {
            "true_positives_21": {
                "variable": {
                    "value": "(_, true_positives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "false_positives_22": {
                "variable": {
                    "value": "(_, false_positives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "false_negatives_23": {
                "variable": {
                    "value": "(_, false_negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "gold_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_flags",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "main_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_18": {
                "bytes_or_text": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_bytes_19": {
                "bytes_or_text": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/sequence_to_sequence_test.py": {
        "tensorflow": {
            "main_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_27": {
                "value": {
                    "value": "hello world !",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "line",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tables_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/tokenizer_test.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens, sequence_length=sequence_length)",
                            "Call"
                        ],
                        [
                            "tokenizer.detokenize(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_29": {
                "variable": {
                    "value": "ref_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "ref_text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(ref_text)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_bytes(t) for t in ref_text]",
                            "ListComp"
                        ],
                        [
                            "tf.compat.as_text(ref_text)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_30": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tok + [''] * (max_length - len(tok)) for tok in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_39": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tokenizer.tokenize(text)",
                            "Call"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tok + [''] * (max_length - len(tok)) for tok in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(tokens)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_40": {
                "variable": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[len(x) for x in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_46": {
                "variable": {
                    "value": "ref_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "ref_text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(ref_text)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_bytes(t) for t in ref_text]",
                            "ListComp"
                        ],
                        [
                            "tf.compat.as_text(ref_text)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_14": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_text_20": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_bytes_35": {
                "bytes_or_text": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_text_45": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/transformer_test.py": {
        "tensorflow": {
            "convert_to_tensor_132": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(batch_size, max(length), depth * num_heads).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_148": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(batch_size, num_heads, max(length), depth).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_163": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(batch_size, max(length), depth * num_heads).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_with_default_178": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(queries_length), depth).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_181": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(values_length), depth).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_214": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.random.randn(batch_size, num_heads, max(queries_length), depth).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_heads, None, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_248": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_258": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_259": {
                "variable": {
                    "value": "aa_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "while_loop_268": {
                "variable": {
                    "value": "(_, aa_ta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(step, aa_ta, cache)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "(tf.TensorShape([]), tf.TensorShape(None), {'prev_g': tf.TensorShape([None, None, depth])})",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "variable": {
                    "value": "aa",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "aa_ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_284": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_291": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_292": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask([4, 3, 5, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_311": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_312": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_313": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask([1, 3, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_321": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_322": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask([1, 3, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_323": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_333": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_334": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_335": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask([1, 3, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20, return_attention=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [4, -1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_338": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.build_sequence_mask(tf.constant(length), num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_sequence_mask(tf.constant(length), num_heads=num_heads, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(tf.constant(length), num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(tf.constant(length), num_heads=num_heads, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(sequence_length))",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(sequence_length), maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_sequence_mask(values_length, num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(queries_length, num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(lengths))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([4, 3, 5, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(mask, attention.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "attention.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_339": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20)",
                            "Call"
                        ],
                        [
                            "transformer.MultiHeadAttention(4, 20, return_attention=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [4, -1, 3])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_40": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_62": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_89": {
                "value": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 6]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[2, 4, 3]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "[5, 3, 7]",
                            "List"
                        ],
                        [
                            "values_length[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_104": {
                "value": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_122": {
                "value": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_242": {
                "value": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_255": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_260": {
                "shape": {
                    "value": "[batch_size, 1, depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_292": {
                "lengths": {
                    "value": "[4, 3, 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "shape": {
                    "value": "[4, 4, 0, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_313": {
                "lengths": {
                    "value": "[1, 3, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "shape": {
                    "value": "[4, 4, 0, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_322": {
                "lengths": {
                    "value": "[1, 3, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_335": {
                "lengths": {
                    "value": "[1, 3, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_339": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.build_sequence_mask(tf.constant(length), num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_sequence_mask(tf.constant(length), num_heads=num_heads, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(tf.constant(length), num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(tf.constant(length), num_heads=num_heads, maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(sequence_length))",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(sequence_length), maximum_length=maximum_length)",
                            "Call"
                        ],
                        [
                            "self.evaluate(mask)",
                            "Call"
                        ],
                        [
                            "transformer.build_sequence_mask(values_length, num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "transformer.build_future_mask(queries_length, num_heads=num_heads)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average_mask(tf.constant(lengths))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([4, 3, 5, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask([1, 3, 2, 2]), 1)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(mask, attention.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_340": {
                "input_tensor": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(attention, tf.logical_not(mask))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_259": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_263": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]]",
                            "List"
                        ],
                        [
                            "tf.constant([[[1.0], [2.0], [3.0], [0.0]], [[2.0], [4.0], [6.0], [8.0]]])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 5, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([4, 1, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_266": {
                "input": {
                    "value": "aa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer.cumulative_average(x, mask)",
                            "Call"
                        ],
                        [
                            "self.evaluate(aa)",
                            "Call"
                        ],
                        [
                            "tf.transpose(aa_ta.stack(), perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.evaluate(aa)",
                            "Call"
                        ],
                        [
                            "transformer.cumulative_average(x[:, i:i + 1], i, cache)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_273": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_274": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TensorShape_275": {
                "dims": {
                    "value": "[None, None, depth]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tests/vocab_test.py": {
        "tensorflow": {
            "main_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tokenizers/opennmt_tokenizer.py": {
        "tensorflow": {
            "as_bytes_53": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_bytes(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_59": {
                "bytes_or_text": {
                    "value": "self._tokenizer.detokenize(tokens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_text_55": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_bytes_58": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/tokenizers/tokenizer.py": {
        "tensorflow": {
            "py_func_198": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_text_140": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [tokens], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(text, ' ', '\u2581')",
                            "Call"
                        ],
                        [
                            "tf.strings.reduce_join(tokens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_function_194": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_python_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_220": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_python_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_223": {
                "func": {
                    "value": "self.detokenize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_237": {
                "fn": {
                    "value": "lambda x: self._detokenize_tensor(x[0][:x[1]])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(tokens, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "regex_replace_295": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [tokens], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(text, ' ', '\u2581')",
                            "Call"
                        ],
                        [
                            "tf.strings.reduce_join(tokens, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\u2581",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_302": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenize(line)",
                            "Call"
                        ],
                        [
                            "line.strip().split(delimiter)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.string_split([text], delimiter='\\x00').values",
                            "Attribute"
                        ],
                        [
                            "self._tokenize_string(string)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(s) for s in tokens_t.numpy()]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_text_191": {
                "variable": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "string_t.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_split_200": {
                "source": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "\\x00",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unicode_split_296": {
                "input": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [tokens], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(text, ' ', '\u2581')",
                            "Call"
                        ],
                        [
                            "tf.strings.reduce_join(tokens, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "input_encoding": {
                    "value": "UTF-8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_303": {
                "input": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_text(text)",
                            "Call"
                        ],
                        [
                            "tf.py_func(lambda x: tf.compat.as_bytes('\\x00'.join(self.tokenize(x))), [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [tokens], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(text, ' ', '\u2581')",
                            "Call"
                        ],
                        [
                            "tf.strings.reduce_join(tokens, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\u2581",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_bytes_105": {
                "bytes_or_text": {
                    "value": "merged_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delimiter.join(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_118": {
                "bytes_or_text": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(string_t.numpy())",
                            "Call"
                        ],
                        [
                            "self._detokenize_string(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_text_174": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_193": {
                "value": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenize(line)",
                            "Call"
                        ],
                        [
                            "line.strip().split(delimiter)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(token) for token in tokens]",
                            "ListComp"
                        ],
                        [
                            "tf.py_function(_python_wrapper, [text], tf.string)",
                            "Call"
                        ],
                        [
                            "tf.string_split([text], delimiter='\\x00').values",
                            "Attribute"
                        ],
                        [
                            "self._tokenize_string(string)",
                            "Call"
                        ],
                        [
                            "[tf.compat.as_text(s) for s in tokens_t.numpy()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "as_bytes_199": {
                "bytes_or_text": {
                    "value": "'\\x00'.join(self.tokenize(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_219": {
                "value": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.detokenize(tokens)",
                            "Call"
                        ],
                        [
                            "tf.compat.as_text(string_t.numpy())",
                            "Call"
                        ],
                        [
                            "self._detokenize_string(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_275": {
                "value": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_split_277": {
                "source": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_text_217": {
                "bytes_or_text": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/beam_search.py": {
        "tensorflow": {
            "expand_dims_85": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_131": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[token_id]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "tf.cast(penalty, log_probs.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * beam_size) // beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, beam_size])",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size)",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_190": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_indexes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_285": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_287": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_291": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_576": {
                "variable": {
                    "value": "(_, alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_602": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape_list(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_604": {
                "variable": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size] + [beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_89": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_nd_95": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_106": {
                "dims": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_212": {
                "variable": {
                    "value": "topk_gathered_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _gather_state(state, top_coordinates, name=prefix + '_topk_states')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states_to_gather",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_293": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _expand_to_beam_size(state, beam_size) if tile_states else _unmerge_beam_dim(state, batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size) if tile_states else _unmerge_beam_dim(state, batch_size, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: _gather_state(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_333": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_341": {
                "variable": {
                    "value": "curr_finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, curr_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "curr_finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, curr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_343": {
                "variable": {
                    "value": "curr_finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, curr_finished]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "flat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "symbols_to_logits_fn(flat_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_427": {
                "variable": {
                    "value": "length_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.cast(i + 1, tf.float32)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "flat_curr_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_scores + tf.cast(curr_finished, tf.float32) * -INF",
                            "BinOp"
                        ],
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_433": {
                "variable": {
                    "value": "(topk_scores, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_curr_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_451": {
                "variable": {
                    "value": "topk_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_beam_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_455": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_461": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, tf.expand_dims(topk_ids, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_463": {
                "variable": {
                    "value": "topk_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "EOS_ID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_545": {
                "variable": {
                    "value": "max_length_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.cast(decode_length, tf.float32)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_all_568": {
                "variable": {
                    "value": "bound_is_met",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_score_of_finished_in_finished, lower_bound_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_115": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_logits, [batch_size, beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_207": {
                "params": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_306": {
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_404": {
                "variable": {
                    "value": "flat_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_merge_beam_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size) if tile_states else _unmerge_beam_dim(state, batch_size, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: _gather_state(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_structure_406": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unmerge_beam_dim(t, batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_merge_beam_dim, states)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_420": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i < min_decode_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _unmerge_beam_dim(penalize_token(_merge_beam_dim(log_probs), eos_id), batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : log_probs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "map_structure_457": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _gather_state(state, topk_coordinates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size) if tile_states else _unmerge_beam_dim(state, batch_size, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: _gather_state(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_min_556": {
                "variable": {
                    "value": "lowest_score_of_finished_in_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_566": {
                "variable": {
                    "value": "lowest_score_of_finished_in_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_572": {
                "x": {
                    "value": "tf.less(i, decode_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(bound_is_met)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_any_603": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_605": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot([token_id], depth, on_value=tf.cast(penalty, log_probs.dtype))",
                            "Call"
                        ],
                        [
                            "-INF",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_probs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_368": {
                "x": {
                    "value": "curr_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_414": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_logits, [batch_size, beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_418": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_569": {
                "x": {
                    "value": "lowest_score_of_finished_in_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(finished_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound_alive_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_573": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(1, len(shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_not_573": {
                "x": {
                    "value": "bound_is_met",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_score_of_finished_in_finished, lower_bound_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_579": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_339": {
                "x": {
                    "value": "curr_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_461": {
                "input": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_583": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_584": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_586": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_589": {
                "func": {
                    "value": "get_state_shape_invariants",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size) if tile_states else _unmerge_beam_dim(state, batch_size, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: _gather_state(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_427": {
                "x": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_545": {
                "x": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/cell.py": {
        "tensorflow": {
            "DropoutWrapper_56": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_class(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanisms[attention_layers.index(l)], attention_layer_size=num_units)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ResidualWrapper_58": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_class(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(cell, attention_mechanisms[attention_layers.index(l)], attention_layer_size=num_units)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_64": {
                "cells": {
                    "value": "cells",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "opennmt/utils/checkpoint.py": {
        "tensorflow": {
            "load_checkpoint_118": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_196": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(latest_step, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_199": {
                "msg": {
                    "value": "'Updating vocabulary related variables in checkpoint %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_238": {
                "msg": {
                    "value": "'Averaging %d checkpoints...' % num_checkpoints",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_239": {
                "msg": {
                    "value": "Listing variables...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_201": {
                "filename": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_202": {
                "dirname": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_233": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_243": {
                "msg": {
                    "value": "'Loading checkpoint %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "debug_65": {
                "msg": {
                    "value": "'Updating variable %s' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(value.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "_variable_is_trainable(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_100": {
                "config": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_104": {
                "msg": {
                    "value": "'Saving new checkpoint to %s' % output_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "latest_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variables['global_step']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_148": {
                "type_value": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_87": {
                "type_value": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/compat.py": {
        "tensorflow": {}
    },
    "opennmt/utils/data.py": {
        "tensorflow": {
            "constant_195": {
                "variable": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_352": {
                "variable": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_39": {
                "x": {
                    "value": "tf.mod(batch_size, multiple)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_105": {
                "input_tensor": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "maximum_197": {
                "variable": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, tf.cast(length, bucket_id.dtype) // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "features_length // bucket_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "variable": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, tf.cast(length, bucket_id.dtype) // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_length // bucket_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, tf.cast(length, bucket_id.dtype) // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "tf.maximum(size, required_multiple)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_354": {
                "variable": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bucket_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, features_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, labels_length // bucket_width)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bucket_id, tf.cast(length, bucket_id.dtype) // bucket_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(length, bucket_id.dtype) // bucket_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "flat[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mod_39": {
                "x1": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(flat[0])[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size * batch_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "multiple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_212": {
                "x": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size // (key * bucket_width)",
                            "BinOp"
                        ],
                        [
                            "size + required_multiple - size % required_multiple",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "required_multiple",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_multiplier * batch_size_multiple",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_92": {
                "x": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_equal_94": {
                "x": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_354": {
                "x": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[length]",
                            "List"
                        ],
                        [
                            "length_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bucket_id.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/decay.py": {
        "tensorflow": {
            "cast_46": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(model_dim, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(step + 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_92": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(step + 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "max_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(max_step, tf.float32)",
                            "Call"
                        ],
                        [
                            "1000000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_138": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(step + 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_139": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_replicas",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_140": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "600000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_142": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "end_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1200000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_117": {
                "pred": {
                    "value": "tf.less(step, warmup_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : scale * step / tf.cast(warmup_steps, tf.float32)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "annealing",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : eta_min + 0.5 * (eta_max - eta_min) * (1 + tf.cos(np.pi * step / max_step))",
                            "Lambda"
                        ]
                    ]
                }
            },
            "minimum_51": {
                "x": {
                    "value": "tf.pow(step, -0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "step * tf.pow(warmup_steps, -1.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_93": {
                "x": {
                    "value": "tf.maximum(step, warmup_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_117": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(step + 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_143": {
                "x": {
                    "value": "tf.minimum(1 + t * (n - 1) / (n * p), n)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "n * tf.pow(2 * n, (s - n * t) / (e - s))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_50": {
                "x": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(model_dim, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_51": {
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "-1.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_93": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(step + 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_114": {
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(warmup_steps, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_144": {
                "x": {
                    "value": "1 + t * (n - 1) / (n * p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(num_replicas, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_145": {
                "x": {
                    "value": "2 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(s - n * t) / (e - s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_113": {
                "x": {
                    "value": "np.pi * step / max_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/evaluator.py": {
        "tensorflow": {
            "Summary_73": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_26": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_91": {
                "msg": {
                    "value": "%s evaluation score: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scorer(self._labels_file, predictions_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_106": {
                "msg": {
                    "value": "Evaluation score: ROUGE-1 = %f; ROUGE-2 = %f; ROUGE-L = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "score['rouge-1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "score['rouge-2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "warning_144": {
                "msg": {
                    "value": "%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "warning_158": {
                "msg": {
                    "value": "'{} script returned non-zero exit code: {}'.format(self._bleu_script, msg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/hooks.py": {
        "tensorflow": {
            "cast_42": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "total_count_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_init'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "count.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_48": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "total_count_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=0, name=name + '_init', trainable=False, dtype=count.dtype)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tensor, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "names",
                            "Name"
                        ]
                    ]
                }
            },
            "add_to_collection_52": {
                "name": {
                    "value": "_DEFAULT_COUNTERS_COLLECTION",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'counters'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign_add(total_count_init, count, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "SecondOrStepTimer_72": {
                "variable": {
                    "value": "self._timer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "every_n_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "every_secs": {
                    "value": "every_n_secs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_global_step_90": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SecondOrStepTimer_132": {
                "variable": {
                    "value": "self._timer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "every_n_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "every_secs": {
                    "value": "every_n_secs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variables_initializer_154": {
                "variable": {
                    "value": "self._init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "counters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._create_variable(name) for name in six.iterkeys(self._num_words)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_global_step_159": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_248": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_variables_276": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_checkpoint_286": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_291": {
                "variable": {
                    "value": "current_scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_322": {
                "variable": {
                    "value": "self._init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self._variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_22": {
                "msg": {
                    "value": "Number of trainable parameters: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "misc.count_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_82": {
                "variable": {
                    "value": "self._counters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "_DEFAULT_COUNTERS_COLLECTION",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'counters'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_87": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_97": {
                "fetches": {
                    "value": "[self._counters, self._global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_words_counter' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.int64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_152": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_171": {
                "fetches": {
                    "value": "[self._update_op, self._global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SessionRunArgs_203": {
                "fetches": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "run_context.original_args.fetches",
                            "Attribute"
                        ],
                        [
                            "run_values.results",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_218": {
                "msg": {
                    "value": "Total prediction time (s): %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_time",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_219": {
                "msg": {
                    "value": "Average prediction time (s): %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_time / self._total_examples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SessionRunArgs_253": {
                "fetches": {
                    "value": "[self._predictions, self._global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "Evaluation predictions saved to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_156": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(count, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_221": {
                "msg": {
                    "value": "Tokens per second: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._total_tokens / self._total_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "current_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE if hasattr(tf, 'AUTO_REUSE') else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "placeholder_297": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_298": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tensor, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_295": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "names",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.as_dtype(value.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_112": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=name, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_114": {
                "msg": {
                    "value": "%s: %g",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "names",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(counters[i] - self._last_count[i]) / elapsed_time",
                            "BinOp"
                        ],
                        [
                            "(current_value - self._last_count[i]) / elapsed_time",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_184": {
                "msg": {
                    "value": "%s_words/sec: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._counters[i].name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "names",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(counters[i] - self._last_count[i]) / elapsed_time",
                            "BinOp"
                        ],
                        [
                            "(current_value - self._last_count[i]) / elapsed_time",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Summary_187": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag_name, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_dtype_295": {
                "type_value": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/losses.py": {
        "tensorflow": {
            "constant_7": {
                "variable": {
                    "value": "label_smoothing",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "label_smoothing",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(label_smoothing, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_61": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cross_entropy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "variable": {
                    "value": "loss_token_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=max_time, dtype=cross_entropy.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, training)",
                            "Call"
                        ],
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "loss_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(cross_entropy)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loss.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_9": {
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "off_value": {
                    "value": "label_smoothing / tf.cast(num_classes - 1, label_smoothing.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "loss_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_8": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_10": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_23": {
                "variable": {
                    "value": "smoothed_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smoothed_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_smooth_one_hot_labels(logits, labels, label_smoothing)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(smoothed_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_30": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_95": {
                "input": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, training)",
                            "Call"
                        ],
                        [
                            "_softmax_cross_entropy(logits, labels, label_smoothing, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_13": {
                "x": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label_smoothing.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/misc.py": {
        "tensorflow": {
            "convert_to_tensor_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_113": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_251": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "key_collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_252": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "value_collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_110": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_237": {
                "name": {
                    "value": "key_collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_238": {
                "name": {
                    "value": "value_collection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "six.itervalues(tensors)",
                            "Call"
                        ],
                        [
                            "self._elements.pop(index)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/optim.py": {
        "tensorflow": {
            "get_or_create_global_step_144": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_226": {
                "variable": {
                    "value": "model_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_253": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal((model_step + 1) % accum_count, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _accum_grads(apply_gradients=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.equal(model_step % accum_count, 0), true_fn=lambda : _accum_grads(accum_fn=tf.assign), false_fn=_accum_grads)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "add_n_297": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[regularizer(w) for w in weights_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_306": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.compute_gradients(loss, var_list=var_list, colocate_gradients_with_ops=True)",
                            "Call"
                        ],
                        [
                            "_clip_gradients_by_norm(gradients, float(params['clip_gradients']))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_gradients",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_86": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step - start_decay_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_230": {
                "variable": {
                    "value": "accum_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape, dtype=grad.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_281": {
                "variable": {
                    "value": "weights_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_311": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm(list(zip(*gradients))[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_90": {
                "x": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_op_name(learning_rate, step, **decay_params)",
                            "Call"
                        ],
                        [
                            "tf.constant(params['learning_rate'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "decay_fn(learning_rate, global_step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minimum_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "optim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_op_name(learning_rate, step, **decay_params)",
                            "Call"
                        ],
                        [
                            "tf.constant(params['learning_rate'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "decay_fn(learning_rate, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_254": {
                "x": {
                    "value": "(model_step + 1) % accum_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_norm_311": {
                "t_list": {
                    "value": "list(zip(*gradients))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_223": {
                "x": {
                    "value": "accum_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_231": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_242": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[model_step.assign_add(1)]",
                            "List"
                        ]
                    ]
                }
            },
            "l1_l2_292": {
                "variable": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "float(scale[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "l2": {
                    "value": "float(scale[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_240": {
                "control_inputs": {
                    "value": "[grad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_256": {
                "pred": {
                    "value": "tf.equal(model_step % accum_count, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _accum_grads(accum_fn=tf.assign)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_accum_grads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "'%s/' % tf.get_variable_scope().name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_257": {
                "x": {
                    "value": "model_step % accum_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/parallel.py": {
        "tensorflow": {
            "Session_206": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "split_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_181": {
                "variable": {
                    "value": "data_shards",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_shards",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_125": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_device_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_128": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var._ref()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_daisy_chain_getter",
                            "Name"
                        ]
                    ]
                }
            },
            "identity_132": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(last_device_v)",
                            "Call"
                        ],
                        [
                            "tf.identity(var._ref())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_split_168": {
                "sp_input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_split": {
                    "value": "num_shards",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_171": {
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_shards",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_150": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "opennmt/utils/vocab.py": {
        "tensorflow": {
            "as_text_118": {
                "variable": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Name"
                        ],
                        [
                            "self._id_to_token",
                            "Attribute"
                        ],
                        [
                            "tf.compat.as_text(token)",
                            "Call"
                        ],
                        [
                            "self._id_to_token[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_text_69": {
                "variable": {
                    "value": "line",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "line.strip()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_text_141": {
                "variable": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.as_text(identifier)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_85": {
                "bytes_or_text": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Name"
                        ],
                        [
                            "self._id_to_token",
                            "Attribute"
                        ],
                        [
                            "tf.compat.as_text(token)",
                            "Call"
                        ],
                        [
                            "self._id_to_token[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pairwise_losses.py": {
        "tensorflow": {
            "convert_to_tensor_67": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_68": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_73": {
                "variable": {
                    "value": "(_, topn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.shape(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_76": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "math_ops.greater_equal(labels, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1e-06 * array_ops.ones_like(logits) + math_ops.reduce_min(logits, axis=1, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "pairwise_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.greater(pairwise_label_diff, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_130": {
                "variable": {
                    "value": "valid_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.expand_dims(is_label_valid, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.expand_dims(is_label_valid, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_141": {
                "variable": {
                    "value": "pairwise_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_labels * math_ops.to_float(valid_pair)",
                            "BinOp"
                        ],
                        [
                            "pairwise_weights * math_ops.to_float(array_ops.shape(sorted_labels)[1])",
                            "BinOp"
                        ],
                        [
                            "array_ops.stop_gradient(pairwise_weights, name='weights_stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights_stop_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_185": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_200": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.where(math_ops.greater_equal(labels, 0.0), logits, -1e-06 * array_ops.ones_like(logits) + math_ops.reduce_min(logits, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_202": {
                "variable": {
                    "value": "(batch_size, list_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.shape(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_205": {
                "variable": {
                    "value": "topn",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_size",
                            "Name"
                        ],
                        [
                            "math_ops.minimum(topn, list_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "list_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "top_k_206": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.where(math_ops.greater_equal(labels, 0.0), logits, -1e-06 * array_ops.ones_like(logits) + math_ops.reduce_min(logits, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_size",
                            "Name"
                        ],
                        [
                            "math_ops.minimum(topn, list_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_207": {
                "variable": {
                    "value": "list_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "math_ops.range(batch_size) * list_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices + list_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, topn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "input": {
                    "value": "sorted_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_179": {
                "losses": {
                    "value": "loss_fn(pairwise_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "pairwise_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_labels * math_ops.to_float(valid_pair)",
                            "BinOp"
                        ],
                        [
                            "pairwise_weights * math_ops.to_float(array_ops.shape(sorted_labels)[1])",
                            "BinOp"
                        ],
                        [
                            "array_ops.stop_gradient(pairwise_weights, name='weights_stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "core_losses.Reduction.SUM_BY_NONZERO_WEIGHTS",
                            "MethodArgument"
                        ],
                        [
                            "core_losses.Reduction.SUM_BY_NONZERO_WEIGHTS",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_equal_186": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_47": {
                "features": {
                    "value": "1.0 - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_49": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_71": {
                "value": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 if weights is None else ops.convert_to_tensor(weights)",
                            "IfExp"
                        ],
                        [
                            "array_ops.ones_like(labels) * weights",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_72": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_73": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "sorted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "sorted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_128": {
                "x": {
                    "value": "pairwise_label_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(sorted_labels, 2) - array_ops.expand_dims(sorted_labels, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "is_label_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_label_valid_func(sorted_labels)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "is_label_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_label_valid_func(sorted_labels)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_134": {
                "x": {
                    "value": "valid_pair",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.expand_dims(is_label_valid, 2), array_ops.expand_dims(is_label_valid, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_140": {
                "x": {
                    "value": "pairwise_label_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(sorted_labels, 2) - array_ops.expand_dims(sorted_labels, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_178": {
                "x": {
                    "value": "array_ops.shape(sorted_labels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_202": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.where(math_ops.greater_equal(labels, 0.0), logits, -1e-06 * array_ops.ones_like(logits) + math_ops.reduce_min(logits, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "tensor": {
                    "value": "array_ops.gather(array_ops.reshape(feature, [-1]), gather_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.stack([batch_size, topn])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_78": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_217": {
                "params": {
                    "value": "array_ops.reshape(feature, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(indices + list_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_178": {
                "input": {
                    "value": "sorted_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "tensor": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_100": {
                "name": {
                    "value": "train_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "validation_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "train_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "validation_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_112": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "labels_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_136": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_152": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_210": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_317": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_445": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_624": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_658": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_163": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_170": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_175": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_234": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_238": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_239": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_243": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_244": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_248": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordWriter_378": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_513": {
                "variable": {
                    "value": "matching_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Int64List_163": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_170": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_175": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_210": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_501": {
                "name": {
                    "value": "labels_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/cifar10.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/dataset_utils.py": {
        "tensorflow": {
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_53": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_67": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_71": {
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_127": {
                "filename": {
                    "value": "os.path.join(dataset_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_53": {
                "value": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_67": {
                "value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "Features_71": {
                "feature": {
                    "value": "{'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/download_and_convert_cifar10.py": {
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_89": {
                "variable": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_placeholder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Remove_153": {
                "filename": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_156": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'cifar-10-batches-py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_165": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_166": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_171": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_178": {
                "path": {
                    "value": "training_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_187": {
                "path": {
                    "value": "testing_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/download_and_convert_flowers.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Remove_161": {
                "filename": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_164": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'flower_photos')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_183": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_184": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_124": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "output_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_130": {
                "path": {
                    "value": "output_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_139": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filenames[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/download_and_convert_mnist.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(_IMAGE_SIZE, _IMAGE_SIZE, _NUM_CHANNELS)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "encode_png_118": {
                "variable": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Remove_183": {
                "filename": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_192": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_193": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_198": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "training_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_211": {
                "path": {
                    "value": "testing_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_120": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/datasets/flowers.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/imagenet.py": {
        "tensorflow": {
            "FixedLenFeature_151": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_153": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_155": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_157": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VarLenFeature_159": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_161": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_163": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_165": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_167": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/datasets/mnist.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "raw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/deployment/model_deploy.py": {
        "tensorflow": {
            "add_n_306": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_357": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_218": {
                "variable": {
                    "value": "clone_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_294": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_216": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_220": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_226": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "variable": {
                    "value": "sum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "'/'.join(filter(None, ['Losses', clone.scope, 'clone_loss']))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_237": {
                "name": {
                    "value": "Losses/regularization_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(regularization_losses, name='regularization_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_349": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_361": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_385": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_409": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_222": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_262": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_380": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_396": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_400": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_442": {
                "variable": {
                    "value": "sum_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_472": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_364": {
                "device_name": {
                    "value": "config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_382": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_405": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_467": {
                "name": {
                    "value": "var.op.name + ':gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_469": {
                "name": {
                    "value": "var.op.name + ':gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_190": {
                "device_name": {
                    "value": "clone_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.clone_device(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_381": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_388": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_470": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_scope_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/deployment/model_deploy_test.py": {
        "tensorflow": {
            "Graph_184": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_210": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_289": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_331": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_383": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_410": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_438": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_485": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_136": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LogisticClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNormClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_187": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_206": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_214": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_344": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_360": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_488": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_489": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_496": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_502": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_238": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_291": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_333": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_359": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_385": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_412": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_440": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_487": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_539": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_558": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_545": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/download_and_convert_data.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert, one of \"cifar10\", \"flowers\", \"mnist\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the output TFRecords and temporary files are saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/eval_image_classifier.py": {
        "tensorflow": {
            "DEFINE_integer_30": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "max_num_batches",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "eval_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_82": {
                "name": {
                    "value": "quantize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use quantized graph or not.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_92": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_133": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_156": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_148": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_170": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_180": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_181": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_171": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/export_inference_graph.py": {
        "tensorflow": {
            "DEFINE_string_68": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to save.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The image size to use, otherwise use the model default_image_size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size for the exported model. Defaulted to \"None\" so batch size can be specified at model runtime.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use with the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_93": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Where to save the resulting file to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save intermediate dataset files to",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_99": {
                "name": {
                    "value": "quantize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use quantized graph or not.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_108": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_126": {
                "name": {
                    "value": "FLAGS.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/export_inference_graph_test.py": {
        "tensorflow": {
            "main_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_41": {
                "filename": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'inception_v3.pb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/alexnet_test.py": {
        "tensorflow": {
            "main_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_109": {
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_113": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/cyclegan.py": {
        "tensorflow": {
            "shape_126": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_value_127": {
                "variable": {
                    "value": "static_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_91": {
                "variable": {
                    "value": "net_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_101": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_207": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_267": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "_dynamic_or_static_shape(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_106": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_109": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_219": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_222": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "residual_blocks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_61": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "weights_init_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_277": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_238": {
                "variable": {
                    "value": "res_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_240": {
                "variable": {
                    "value": "res_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res_net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "tf.pad(res_net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "decoder1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "decoder2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "'block_{}'.format(block_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/cyclegan_test.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_39": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/dcgan.py": {
        "tensorflow": {
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "Constant"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "Constant"
                        ],
                        [
                            "'Discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'Generator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "Constant"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "Constant"
                        ],
                        [
                            "'Discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'Generator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, 1, kernel_size=1, stride=1, padding='VALID', normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, normalizer_fn=None, activation_fn=None, kernel_size=1, stride=1, padding='VALID', scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/dcgan_test.py": {
        "tensorflow": {
            "zeros_62": {
                "variable": {
                    "value": "wrong_dim_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "correct_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "wrong_dim_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "spatially_undefined_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "not_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "not_power_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 30, 30, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_38": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_45": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_51": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_77": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_103": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_275": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_351": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net + scaled_up",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, 32, 3, stride=2, padding=padding, scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, 3, padding=padding, scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_3a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 80, 1, padding=padding, scope='Conv2d_3b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, 3, padding=padding, scope='Conv2d_4a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_5a_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 10, block35, scale=0.17, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 20, block17, scale=0.1, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 9, block8, scale=0.2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "block8(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, 1, scope='Conv2d_7b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_8x8')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='Dropout')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_resnet_v2_test.py": {
        "tensorflow": {
            "placeholder_312": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_321": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_267": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_304": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_329": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_210": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_212": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_316": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_206": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_208": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_327": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "preprocess/slim/nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [7, 7], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], stride=1, scope='AvgPool_0a_7x7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_0b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v1_test.py": {
        "tensorflow": {
            "placeholder_184": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_260": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_247": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_258": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_177": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_516": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(inputs, depth(64), [7, 7], depth_multiplier=depthwise_multiplier, stride=2, padding='SAME', weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, depth(64), [7, 7], stride=2, weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [1, 1], scope=end_point, weights_initializer=trunc_normal(0.1))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_534": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v2_test.py": {
        "tensorflow": {
            "placeholder_298": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_318": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_335": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "transposed_original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_374": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_361": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_372": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0b_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_399": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_523": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth(32), [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(32), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [3, 3], padding='SAME', scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(80), [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='GlobalPool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_540": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_516": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v3_test.py": {
        "tensorflow": {
            "placeholder_264": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_284": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_302": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_324": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_341": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_328": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_339": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_118": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 32, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [3, 3], padding='VALID', scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [3, 3], scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "block_inception_a(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_a(net, 'Mixed_6a')",
                            "Call"
                        ],
                        [
                            "block_inception_b(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_b(net, 'Mixed_7a')",
                            "Call"
                        ],
                        [
                            "block_inception_c(net, block_scope)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='PreLogitsFlatten')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/inception_v4_test.py": {
        "tensorflow": {
            "placeholder_261": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_161": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_163": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_253": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_278": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_265": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_276": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_95": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet/conv_blocks.py": {
        "tensorflow": {
            "pad_45": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(input_tensor, input_splits, axis=3, name='split_' + scope)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_351": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "input_splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_split_divisible(b, num_ways, divisible_by=divisible_by)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'split_' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_252": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_282": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "depthwise_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_356": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_tensor, out_size, [1, 1], scope=scope, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(n, scope + '_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope + '_output'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_358": {
                "values": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scope + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scope + '_'",
                            "BinOp"
                        ],
                        [
                            "base + '_part_%d' % (i,)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "expanded_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_273": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "expansion_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_314": {
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "separable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet/mobilenet.py": {
        "tensorflow": {
            "pad_57": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_357": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_362": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, params['kernel_size'], layer_rate)",
                            "Call"
                        ],
                        [
                            "opdef.op(net, **params)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='embedding')",
                            "Call"
                        ],
                        [
                            "global_pool(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, scope='Dropout', is_training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_403": {
                "variable": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, tf.shape(input_tensor)[1], tf.shape(input_tensor)[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_453": {
                "variable": {
                    "value": "weight_intitializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Mobilenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "default_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_300": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_356": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Mobilenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Mobilenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_380": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_382": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_404": {
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_405": {
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet/mobilenet_v2.py": {
        "tensorflow": {}
    },
    "preprocess/slim/nets/mobilenet/mobilenet_v2_test.py": {
        "tensorflow": {
            "get_default_graph_38": {
                "variable": {
                    "value": "gd",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet_v1.py": {
        "tensorflow": {
            "pad_163": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_463": {
                "variable": {
                    "value": "weights_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'MobilenetV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'MobilenetV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel, layer_rate)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, None, conv_def.kernel, depth_multiplier=1, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_383": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet_v1_eval.py": {
        "tensorflow": {
            "batch_75": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_113": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_152": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_95": {
                "labels": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_at_k_96": {
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet_v1_test.py": {
        "tensorflow": {
            "placeholder_463": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_483": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_501": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_428": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_446": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/mobilenet_v1_train.py": {
        "tensorflow": {
            "batch_105": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_122": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_total_loss_141": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_147": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "get_learning_rate()",
                    "type": "Call",
                    "possible_values": []
                },
                "global_step": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(imagenet_size / FLAGS.batch_size * num_epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "_LEARNING_RATE_DECAY_FACTOR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.94",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_153": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(get_learning_rate(), tf.train.get_or_create_global_step(), decay_steps, _LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_168": {
                "variable": {
                    "value": "global_step_reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_212": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_123": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(FLAGS.ps_tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_133": {
                "onehot_labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "replica_device_setter_124": {
                "ps_tasks": {
                    "value": "FLAGS.ps_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/nasnet.py": {
        "tensorflow": {
            "identity_231": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num, current_step=current_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_357": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_412": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_544": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_247": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "activation_fn(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "activation_fn(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_301": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_353": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_408": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_533": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/nasnet_test.py": {
        "tensorflow": {
            "create_global_step_379": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_297": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_299": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_327": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_global_step_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_155": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_206": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_263": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_291": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_294": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/nasnet_utils.py": {
        "tensorflow": {
            "avg_pool_103": {
                "variable": {
                    "value": "path1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_119": {
                "variable": {
                    "value": "path2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(net, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(net, pad_arr)[:, :, 1:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(path2, final_filter_size, 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_127": {
                "variable": {
                    "value": "final_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_140": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "keep_prob_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu6_236": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_422": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states_to_combine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[h for (h, is_used) in zip(net, used_hiddenstates) if not is_used]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_112": {
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_116": {
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_136": {
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_140": {
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu6_302": {
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_302": {
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_369": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_460": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.cast(current_step, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_463": {
                "variable": {
                    "value": "current_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "current_ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu6_372": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_459": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "'comb_iter_{}'.format(iteration)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_376": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_380": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_387": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "'reduction_{}'.format(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_469": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_470": {
                "name": {
                    "value": "drop_path_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "drop_path_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._drop_path_keep_prob",
                            "Attribute"
                        ],
                        [
                            "1 - layer_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ],
                        [
                            "1 - current_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "combine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu6_347": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h1 + h2",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu6(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_453": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_454": {
                "name": {
                    "value": "layer_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "layer_ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self._cell_num + 1) / float(num_cells)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_465": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_466": {
                "name": {
                    "value": "current_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "current_ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/nasnet_utils_test.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 10, 20, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/pnasnet.py": {
        "tensorflow": {
            "softmax_158": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_224": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nasnet/pnasnet_test.py": {
        "tensorflow": {
            "main_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_140": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_175": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "preprocess/slim/nets/nets_factory_test.py": {
        "tensorflow": {
            "main_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/overfeat_test.py": {
        "tensorflow": {
            "main_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_141": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/pix2pix.py": {
        "tensorflow": {
            "shape_81": {
                "variable": {
                    "value": "net_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_86": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[kernel_size[0] * height, kernel_size[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_220": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_294": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_206": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_252": {
                "variable": {
                    "value": "spatial_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_59": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[net, encoder_activations[-block_id - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_255": {
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [padding, padding], [padding, padding], [0, 0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/nets/pix2pix_test.py": {
        "tensorflow": {
            "ones_37": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_132": {
                "variable": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(residual, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu6_133": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride, store_non_strided_activations)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_251": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride, store_non_strided_activations)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/resnet_v1_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_479": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/resnet_v2_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_396": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/nets/vgg_test.py": {
        "tensorflow": {
            "main_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_157": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_179": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_344": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_367": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_546": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_568": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_569": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_54": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_58": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_62": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_69": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_71": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_93": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_56": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_74": {
                "image": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "per_image_standardization_103": {
                "image": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_51": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_65": {
                "name": {
                    "value": "distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_91": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_100": {
                "name": {
                    "value": "resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(resized_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_195": {
                "variable": {
                    "value": "image_with_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_204": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_227": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_239": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_240": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_280": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_281": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_188": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_192": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_266": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_268": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_272": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.875",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_276": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_277": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_198": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_205": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_207": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distorted_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_223": {
                "name": {
                    "value": "cropped_resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_237": {
                "name": {
                    "value": "final_distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "input": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "preprocess/slim/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_67": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_69": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_75": {
                "variable": {
                    "value": "size_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_81": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_129": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_247": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_249": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_250": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_251": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_253": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_256": {
                "variable": {
                    "value": "new_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rint(height * scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_257": {
                "variable": {
                    "value": "new_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rint(width * scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_274": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_279": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_314": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_315": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_334": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_73": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_118": {
                "variable": {
                    "value": "image_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_119": {
                "variable": {
                    "value": "rank_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_126": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_145": {
                "variable": {
                    "value": "height_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_149": {
                "variable": {
                    "value": "width_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_228": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_70": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_72": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_76": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_81": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_85": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_125": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_130": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_141": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_253": {
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rint_256": {
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rint_257": {
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rank_70": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_78": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_120": {
                "x": {
                    "value": "image_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_131": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_132": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_146": {
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_150": {
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_187": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_188": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/resnet152_img.py": {
        "tensorflow": {
            "ConfigProto_132": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_134": {
                "variable": {
                    "value": "placeholder_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "side_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[200, 32, 64, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "side_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "info_136": {
                "msg": {
                    "value": "occupy GPU memory %f GB",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "limit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "placeholder_session.run(tf.contrib.memory_stats.BytesLimit()) / 1073741824",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Coordinator_72": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_73": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/slim/train_image_classifier.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "num_clones",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy. Note For historical reasons loss from all clones averaged out and learning rate decay happen per clone epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "worker_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "num_readers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_80": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_88": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_92": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_96": {
                "name": {
                    "value": "adam_beta1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_100": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_104": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_106": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_109": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_116": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_119": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_123": {
                "name": {
                    "value": "rmsprop_momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_125": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_127": {
                "name": {
                    "value": "quantize_delay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps to start quantized training. Set to -1 would disable quantized training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_136": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_142": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_144": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_148": {
                "name": {
                    "value": "label_smoothing",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_151": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_154": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays. Note: this flag counts epochs per clone but aggregates per sync replicas. So 1.0 means that each clone will go over full epoch individually, but replicas will go once across all replicas.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_161": {
                "name": {
                    "value": "sync_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_165": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_169": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_178": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_181": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_184": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_187": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_193": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_196": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_200": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_203": {
                "name": {
                    "value": "train_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_206": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_213": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_217": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_222": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_291": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_344": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_364": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_365": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_369": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_390": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ]
                    ]
                }
            },
            "set_verbosity_399": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_491": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_560": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_570": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_257": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch * FLAGS.num_epochs_per_decay / FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_296": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_345": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_454": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_502": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_514": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_534": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.rmsprop_momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, total_num_replicas=FLAGS.worker_replicas, variable_averages=variable_averages, variables_to_average=moving_average_variables)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_562": {
                "variable": {
                    "value": "train_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_264": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_300": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_412": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_441": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_485": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_526": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_553": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_561": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_566": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_266": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch * FLAGS.num_epochs_per_decay / FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_306": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_497": {
                "name": {
                    "value": "'activations/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_498": {
                "name": {
                    "value": "'sparsity/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_503": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_507": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_529": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_313": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_499": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_318": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/slim/vgg16_img.py": {
        "tensorflow": {
            "string_input_producer_42": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "imgList",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "WholeFileReader_43": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jsonFile['unique_img_train']",
                            "Subscript"
                        ],
                        [
                            "jsonFile['unique_img_val']",
                            "Subscript"
                        ],
                        [
                            "vgg_preprocessing.preprocess_image(tf.image.decode_jpeg(contents=img_data, channels=3), args.imgSize, args.imgSize)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(img, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_63": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_64": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_46": {
                "contents": {
                    "value": "img_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_summarization.py": {
        "tensorflow": {
            "DEFINE_string_44": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example datafiles. Can include wildcards to access multiple datafiles.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "vocab_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/share/lmz/video_sum_data/vocab",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to text vocabulary file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "pretrain_pic_ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home1/lmz/video_data/resnet_v1_152.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "sticker_path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "must be one of train/eval/decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "log_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory for all logging.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "exp_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Name for experiment. Logs will be saved in a directory with this name, under log_root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "hidden_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of RNN hidden states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "emb_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of word embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "minibatch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "max_enc_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of encoder (max source text tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "max_dec_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of decoder (max summary tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "max_side_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of decoder (max summary tokens)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_67": {
                "name": {
                    "value": "inception_endpoint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "mixed_17x17x768e",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['mixed_8x8x2048b', 'mixed_17x17x768e']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "\u624b\u5de5\u8fd0\u884cauto deocde\u4e0d\u4f1a\u6709\u8f93\u51fa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "beam_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "beam size for beam search decoding.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "min_dec_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum sequence length of generated summary. Applies only for beam search decoding mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "vocab_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of vocabulary. These will be read from the vocabulary file in order. If the vocabulary file contains fewer words than this number, or if this number is set to 0, will take all words in the vocabulary file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_76": {
                "name": {
                    "value": "adagrad_init_acc",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "initial accumulator value for Adagrad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "rand_unif_init_mag",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "magnitude for lstm cells random uniform inititalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_78": {
                "name": {
                    "value": "trunc_norm_init_std",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "std of trunc norm init, used for initializing everything else",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_79": {
                "name": {
                    "value": "max_grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "for gradient clipping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_81": {
                "name": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "epoch_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "current_source_code_zip",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "current_source_code_zip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_91": {
                "name": {
                    "value": "cov_loss_wt",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight of coverage loss (lambda in the paper). If zero, then no incentive to minimize coverage loss.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Summary_119": {
                "variable": {
                    "value": "loss_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_131": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_136": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'Adagrad' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "new_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_156": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_161": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "new_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_187": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "epoch_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_202": {
                "variable": {
                    "value": "pretrain_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Supervisor_205": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Saver([v for v in tf.all_variables() if 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver([v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(max_to_keep=3)",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(max_to_keep=10)",
                            "Call"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "model.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_363": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_364": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "test_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "path of test.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "running_avg_loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "running_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss",
                            "Name"
                        ],
                        [
                            "running_avg_loss * decay + (1 - decay) * loss",
                            "BinOp"
                        ],
                        [
                            "min(running_avg_loss, 12)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "calc_running_avg_loss(np.asscalar(loss), running_avg_loss, train_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_128": {
                "msg": {
                    "value": "Restoring bestmodel for training...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_153": {
                "msg": {
                    "value": "converting non-coverage model to coverage model..",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_212": {
                "msg": {
                    "value": "Preparing or waiting for session...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_214": {
                "msg": {
                    "value": "Created session.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_215": {
                "msg": {
                    "value": "Loading pretrained parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_307": {
                "msg": {
                    "value": "unzip source code finish!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "debug_310": {
                "msg": {
                    "value": "' '.join([gpu_str, sys.executable, run_file_path, flag_str])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_318": {
                "msg": {
                    "value": "starting run_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_405": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_407": {
                "variable": {
                    "value": "placeholder_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_413": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_414": {
                "msg": {
                    "value": "Starting seq2seq_attention in %s mode...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_446": {
                "msg": {
                    "value": "saving source code: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.current_source_code_zip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_456": {
                "seed": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_378": {
                "msg": {
                    "value": "seconds for batch: %.2f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_382": {
                "msg": {
                    "value": "loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "results['all_loss']",
                            "Subscript"
                        ],
                        [
                            "results['loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_404": {
                "msg": {
                    "value": "try to occupy GPU memory!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_409": {
                "msg": {
                    "value": "occupy GPU memory %f GB",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "limit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "placeholder_session.run(tf.contrib.memory_stats.BytesLimit()) / 1073741824",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_221": {
                "msg": {
                    "value": "Caught keyboard interrupt on worker. Stopping supervisor...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_385": {
                "msg": {
                    "value": "coverage_loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "coverage_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ],
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_396": {
                "msg": {
                    "value": "Found new best model with %.3f running_avg_loss. Saving to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "running_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss",
                            "Name"
                        ],
                        [
                            "running_avg_loss * decay + (1 - decay) * loss",
                            "BinOp"
                        ],
                        [
                            "min(running_avg_loss, 12)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "calc_running_avg_loss(np.asscalar(loss), running_avg_loss, train_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "bestmodel_save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(eval_dir, 'bestmodel')",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_337": {
                "msg": {
                    "value": "train_step: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "results['global_step']",
                            "Subscript"
                        ],
                        [
                            "results['global_step']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_338": {
                "msg": {
                    "value": "loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "sum(losses) / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_339": {
                "msg": {
                    "value": "s2s_loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "results['s2s_loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_340": {
                "msg": {
                    "value": "pic_loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "results['pic_loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_341": {
                "msg": {
                    "value": "===================",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_349": {
                "msg": {
                    "value": "coverage_loss: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "coverage_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ],
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_36": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "latest_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint_best' if ckpt_dir == 'eval' else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_37": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_41": {
                "msg": {
                    "value": "Failed to load checkpoint from %s. Sleeping for %i secs...",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}