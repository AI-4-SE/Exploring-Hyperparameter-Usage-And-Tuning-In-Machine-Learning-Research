{
    "experiments/load_data.py": {
        "sklearn": {
            "SimpleImputer_38": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SimpleImputer_87": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loadmat(file_path)['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_46": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loadmat(file_path)['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_39": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/run_rff.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5348",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/run_sggp.py": {
        "torch": {
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_139": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[int(total_iters * 0.5), int(total_iters * 0.75)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "self.train_nn_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.gpu_index.search(x, self.k)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_146": {
                "variable": {
                    "value": "batch_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(train_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "train_x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_233": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(posterior.mean - y, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, f'sggp_model_{time_stamp}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_233": {
                "input": {
                    "value": "torch.pow(posterior.mean - y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_211": {
                "input": {
                    "value": "valid_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "valid_nll + batch_nll.sum()",
                            "BinOp"
                        ],
                        [
                            "valid_nll / len(valid_y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_224": {
                "input": {
                    "value": "test_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "test_nll + batch_nll.sum()",
                            "BinOp"
                        ],
                        [
                            "test_nll / len(test_y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_233": {
                "input": {
                    "value": "posterior.mean - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/run_svgp.py": {
        "torch": {
            "TensorDataset_134": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(train_x, train_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_140": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[int(total_iters * 0.5), int(total_iters * 0.75)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inducing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "train_x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kmeans2(train_x.cpu().numpy(), inducing_points.numpy(), minit='matrix')[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_221": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(observed_pred.mean - y, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, f'svgp_model_{time_stamp}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_221": {
                "input": {
                    "value": "torch.pow(observed_pred.mean - y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_200": {
                "input": {
                    "value": "valid_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "valid_nll + batch_nll.sum()",
                            "BinOp"
                        ],
                        [
                            "valid_nll / len(valid_y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_213": {
                "input": {
                    "value": "test_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "test_nll + batch_nll.sum()",
                            "BinOp"
                        ],
                        [
                            "test_nll / len(test_y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_221": {
                "input": {
                    "value": "observed_pred.mean - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/create_loss_landscape.py": {
        "torch": {
            "linspace_27": {
                "variable": {
                    "value": "lengthscales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lengthscale_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "lengthscale_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_28": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "noise_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "noise_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/experiment_fns.py": {
        "torch": {
            "sqrt_56": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(delta, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_435": {
                "variable": {
                    "value": "ls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.normal(mean=0.0, std=std, size=(total_rounds,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_504": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_522": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "settings['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiStepLR_230": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "mil",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings['mil']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings['lr_wd']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_296": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings['lr']",
                            "Subscript"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_437": {
                "variable": {
                    "value": "noise_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.normal(mean=0.0, std=std, size=(total_rounds,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_438": {
                "variable": {
                    "value": "output_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.normal(mean=0.0, std=std, size=(total_rounds,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_441": {
                "variable": {
                    "value": "output_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ls.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.normal(mean=0.0, std=std, size=(total_rounds,)))",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_446": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "torch.pow(delta, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_298": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings['lr']",
                            "Subscript"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_435": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(div, axis=0)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(total_rounds,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_all_448": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_test_metrics(model, test_ds)",
                            "Call"
                        ],
                        [
                            "compute_nll(model, test_ds[1], y_hat)",
                            "Call"
                        ],
                        [
                            "indep_dist.log_prob(test_y)",
                            "Call"
                        ],
                        [
                            "float(-torch.mean(nll))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_56": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_437": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(div, axis=0)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(total_rounds,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_438": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(div, axis=0)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(total_rounds,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_440": {
                "input": {
                    "value": "ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ls.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.normal(mean=0.0, std=std, size=(total_rounds,)))",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "model.covar_module.base_kernel.lengthscale.item()",
                            "Call"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ],
                        [
                            "ls",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/lengthscale_recovery.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "true_lengthscales",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linspace(lower, upper, lengthscale_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "output_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "noise_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_32": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "train_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_34": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "test_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "sin_33": {
                "input": {
                    "value": "train_x * (5 * math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_33": {
                "input": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-3, 3, train_n)",
                            "Call"
                        ],
                        [
                            "train_x.cuda() if use_cuda else train_x",
                            "IfExp"
                        ]
                    ]
                }
            },
            "rand_44": {
                "*size": {
                    "value": "lengthscale_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "rand_45": {
                "*size": {
                    "value": "lengthscale_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "data": {
                    "value": "true_lengthscales[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/plot_fns.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(os)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/rr_rff.py": {
        "torch": {
            "equal_44": {
                "variable": {
                    "value": "x1_eq_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x1.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x2.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_62": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(x), torch.sin(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_173": {
                "variable": {
                    "value": "x1_eq_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x1.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x2.transpose(-1, -2).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_191": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "D - self.min_val",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_196": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "D - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "variable"
                        ],
                        [
                            "float(self.num_samples)",
                            "Call"
                        ],
                        [
                            "self.num_samples",
                            "Attribute"
                        ],
                        [
                            "num_samples",
                            "variable"
                        ],
                        [
                            "float(self.num_samples)",
                            "Call"
                        ],
                        [
                            "int(z_pre.shape[-1] / 2)",
                            "Call"
                        ],
                        [
                            "self.num_samples",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, aux, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(x), torch.sin(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "randn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "randn_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([*self._batch_shape, d, D])",
                            "Call"
                        ],
                        [
                            "torch.Size([*self._batch_shape, 3, d, D])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.raw_lengthscale.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.raw_lengthscale.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_159": {
                "variable": {
                    "value": "randn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "randn_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([*self._batch_shape, d, D])",
                            "Call"
                        ],
                        [
                            "torch.Size([*self._batch_shape, 3, d, D])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.raw_lengthscale.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.raw_lengthscale.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_194": {
                "input": {
                    "value": "self.min_val.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "input": {
                    "value": "torch.tensor(D - 1, dtype=z_pre.dtype, device=z_pre.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "input": {
                    "value": "torch.tensor(D, dtype=z_pre.dtype, device=z_pre.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "D - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "variable"
                        ],
                        [
                            "float(self.num_samples)",
                            "Call"
                        ],
                        [
                            "self.num_samples",
                            "Attribute"
                        ],
                        [
                            "num_samples",
                            "variable"
                        ],
                        [
                            "float(self.num_samples)",
                            "Call"
                        ],
                        [
                            "int(z_pre.shape[-1] / 2)",
                            "Call"
                        ],
                        [
                            "self.num_samples",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_pre.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z_pre.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_215": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_215": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "x.matmul(self.randn_weights / self.lengthscale.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/run_rff.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5348",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/test_models.py": {
        "torch": {
            "is_available_24": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/unbiasdness.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_23": {
                "variable": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rff/rff_fns.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_val",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "self.max_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_val",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_12": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_probs - torch.logsumexp(log_probs, dim=0))",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.index_sampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "self.value_sampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_30": {
                "variable": {
                    "value": "truncation_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff2max // step + 1",
                            "BinOp"
                        ],
                        [
                            "(max_val - min_val) // step + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_32": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs - torch.logsumexp(log_probs, dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "truncation_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(1, total, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_32": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-coeff * torch.log(truncation_range)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rrcg/_inv_quad_log_det.py": {
        "torch": {
            "cat_162": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rhs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "logdet_term",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lazy_tsr.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "inv_quad_term",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lazy_tsr.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "left_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "left_factors_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "right_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "right_factors_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_94": {
                "variable": {
                    "value": "probe_vector_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probe_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lazy_tsr._probe_vectors_and_norms()",
                            "Call"
                        ],
                        [
                            "torch.empty(matrix_shape[-1], num_random_probes, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.empty(matrix_shape[-1], num_random_probes, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "settings.deterministic_probes.probe_vectors",
                            "Attribute"
                        ],
                        [
                            "probe_vectors.expand(*batch_shape, matrix_shape[-1], num_random_probes)",
                            "Call"
                        ],
                        [
                            "probe_vectors.div(probe_vector_norms)",
                            "Call"
                        ],
                        [
                            "precond_lt.zero_mean_mvn_samples(num_random_probes)",
                            "Call"
                        ],
                        [
                            "covar_root.matmul(base_samples).permute(-1, *range(precond_lt.dim() - 1))",
                            "Call"
                        ],
                        [
                            "probe_vectors.unsqueeze(-2).transpose(0, -2).squeeze(0).transpose(-2, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "ctx.probe_vectors.mul(ctx.probe_vector_norms)",
                            "Call"
                        ],
                        [
                            "ctx.preconditioner(probe_vectors)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_132": {
                "variable": {
                    "value": "probe_vector_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probe_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lazy_tsr._probe_vectors_and_norms()",
                            "Call"
                        ],
                        [
                            "torch.empty(matrix_shape[-1], num_random_probes, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.empty(matrix_shape[-1], num_random_probes, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "settings.deterministic_probes.probe_vectors",
                            "Attribute"
                        ],
                        [
                            "probe_vectors.expand(*batch_shape, matrix_shape[-1], num_random_probes)",
                            "Call"
                        ],
                        [
                            "probe_vectors.div(probe_vector_norms)",
                            "Call"
                        ],
                        [
                            "precond_lt.zero_mean_mvn_samples(num_random_probes)",
                            "Call"
                        ],
                        [
                            "covar_root.matmul(base_samples).permute(-1, *range(precond_lt.dim() - 1))",
                            "Call"
                        ],
                        [
                            "probe_vectors.unsqueeze(-2).transpose(0, -2).squeeze(0).transpose(-2, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "ctx.probe_vectors.mul(ctx.probe_vector_norms)",
                            "Call"
                        ],
                        [
                            "ctx.preconditioner(probe_vectors)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "max_rrcg_iter_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max_rrcg_iter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "rr_settings.max_rr_cg_iter_list.value()",
                            "Call"
                        ],
                        [
                            "torch.tensor(max_rrcg_iter_list, dtype=torch.int)",
                            "Call"
                        ],
                        [
                            "dist_of_iter.sample((rr_nsamples,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_204": {
                "input": {
                    "value": "torch.isnan(t_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "logdet_term",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_370": {
                "variable": {
                    "value": "inv_quad_rhs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_quad_solves_sample1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_cg_rr(matmul_closure=lazy_tsr._matmul, rhs=rhs, use_rr=use_rr_for_cg, max_iter=None, max_rrcg_iter_list=max_rrcg_iter_list, max_tridiag_iter=max_tridiag_iter, dist_of_iter=dist_of_iter, n_tridiag=num_random_probes, preconditioner=preconditioner)",
                            "Call"
                        ],
                        [
                            "linear_cg_rr(matmul_closure=lazy_tsr._matmul, rhs=rhs, use_rr=use_rr_for_cg, max_iter=max_iter, max_rrcg_iter_list=max_rrcg_iter_list, dist_of_iter=dist_of_iter, n_tridiag=0, preconditioner=preconditioner)",
                            "Call"
                        ],
                        [
                            "ctx.saved_tensors[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_91": {
                "variable": {
                    "value": "probe_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "matrix_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_random_probes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.num_trace_samples.value()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ctx.probe_vectors.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_123": {
                "variable": {
                    "value": "base_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*precond_lt.batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "covar_root.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "precond_lt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "precond_lt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_216": {
                "variable": {
                    "value": "(sorted_max_rrcg_iter_list, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_rrcg_iter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "rr_settings.max_rr_cg_iter_list.value()",
                            "Call"
                        ],
                        [
                            "torch.tensor(max_rrcg_iter_list, dtype=torch.int)",
                            "Call"
                        ],
                        [
                            "dist_of_iter.sample((rr_nsamples,))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "logdet_term",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(rr_nsamples,) + lazy_tsr.batch_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t_mat.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t_mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_85": {
                "variable": {
                    "value": "probe_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "matrix_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_random_probes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.num_trace_samples.value()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ctx.probe_vectors.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_112": {
                "variable": {
                    "value": "base_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*precond_lt.batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "covar_root.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "precond_lt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "precond_lt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_232": {
                "input": {
                    "value": "logdet_term[curr_Jidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "logdet_term_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slq.evaluate(ctx.matrix_shape, eigenvalues, eigenvectors, [lambda x: x.log()])",
                            "Call"
                        ],
                        [
                            "slq.evaluate(ctx.matrix_shape, eigenvalues, eigenvectors, [lambda x: x.log()])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "logdet_term[curr_Jidx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "func(lazy_tsr.representation_tree(), lazy_tsr.dtype, lazy_tsr.device, lazy_tsr.matrix_shape, lazy_tsr.batch_shape, inv_quad_rhs is not None, logdet, probe_vectors, probe_vector_norms, dist_of_iter, *args)",
                            "Call"
                        ],
                        [
                            "torch.zeros(lazy_tsr.batch_shape, dtype=ctx.dtype, device=ctx.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(float('nan'), dtype=ctx.dtype, device=ctx.device)",
                            "Call"
                        ],
                        [
                            "slq.evaluate(ctx.matrix_shape, eigenvalues, eigenvectors, [lambda x: x.log()])",
                            "Call"
                        ],
                        [
                            "torch.zeros((rr_nsamples,) + lazy_tsr.batch_shape, dtype=t_mat.dtype, device=t_mat.device)",
                            "Call"
                        ],
                        [
                            "logdet_term + logdet_correction",
                            "BinOp"
                        ],
                        [
                            "logdet_term.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_204": {
                "input": {
                    "value": "t_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "linear_cg_rr(matmul_closure=lazy_tsr._matmul, rhs=rhs, use_rr=use_rr_for_cg, max_iter=None, max_rrcg_iter_list=max_rrcg_iter_list, max_tridiag_iter=max_tridiag_iter, dist_of_iter=dist_of_iter, n_tridiag=num_random_probes, preconditioner=preconditioner)",
                            "Call"
                        ],
                        [
                            "t_mat.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_252": {
                "input": {
                    "value": "logdet_term_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdet_term_k - logdet_term_km1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "prob_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - dist_of_iter.cdf(k)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "logdet_term_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdet_term_k - logdet_term_km1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_253": {
                "input": {
                    "value": "logdet_term[curr_Jidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "logdet_term_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdet_term_k - logdet_term_km1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "logdet_term[curr_Jidx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "func(lazy_tsr.representation_tree(), lazy_tsr.dtype, lazy_tsr.device, lazy_tsr.matrix_shape, lazy_tsr.batch_shape, inv_quad_rhs is not None, logdet, probe_vectors, probe_vector_norms, dist_of_iter, *args)",
                            "Call"
                        ],
                        [
                            "torch.zeros(lazy_tsr.batch_shape, dtype=ctx.dtype, device=ctx.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(float('nan'), dtype=ctx.dtype, device=ctx.device)",
                            "Call"
                        ],
                        [
                            "slq.evaluate(ctx.matrix_shape, eigenvalues, eigenvectors, [lambda x: x.log()])",
                            "Call"
                        ],
                        [
                            "torch.zeros((rr_nsamples,) + lazy_tsr.batch_shape, dtype=t_mat.dtype, device=t_mat.device)",
                            "Call"
                        ],
                        [
                            "logdet_term + logdet_correction",
                            "BinOp"
                        ],
                        [
                            "logdet_term.mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rrcg/dist_of_iterations_for_rrcg.py": {
        "torch": {
            "empty_179": {
                "variable": {
                    "value": "rr_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_estimates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Categorical_18": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logprobs - torch.logsumexp(logprobs, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.cat([zero_probs, probs])",
                            "Call"
                        ],
                        [
                            "1.0 / N * torch.ones(N, dtype=dtype, device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(logprobs - torch.logsumexp(logprobs, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.cat([zero_probs, probs])",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs - torch.logsumexp(logprobs, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.cat([zero_probs, probs])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_44": {
                "variable": {
                    "value": "mean_Xsq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.categorical.probs * Xsq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "zero_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_65": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - torch.logsumexp(logprobs, dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_probs, probs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "J_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max - min + 1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "zero_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_96": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - torch.logsumexp(logprobs, dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_probs, probs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "J_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max - min + 1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "zero_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_116": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - torch.logsumexp(logprobs, dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_probs, probs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_8": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "self.categorical.probs[:J]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_54": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_105": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "self.categorical.probs * torch.arange(self.N, dtype=self.dtype, device=self.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_63": {
                "start": {
                    "value": "max - min + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_74": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_93": {
                "input": {
                    "value": "torch.ones(max - min + 1, dtype=dtype, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "J_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(1, max - min + 1 + 1, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "J_range.sqrt()",
                            "Call"
                        ],
                        [
                            "torch.arange(1, max - min + 1 + 1, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_173": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_65": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-temp * torch.arange(max - min + 1, dtype=dtype, device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.log(torch.ones(max - min + 1, dtype=dtype, device=device)) - torch.log(J_range)",
                            "BinOp"
                        ],
                        [
                            "J_range * np.log(p)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "max - min + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ],
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_96": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-temp * torch.arange(max - min + 1, dtype=dtype, device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.log(torch.ones(max - min + 1, dtype=dtype, device=device)) - torch.log(J_range)",
                            "BinOp"
                        ],
                        [
                            "J_range * np.log(p)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_116": {
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-temp * torch.arange(max - min + 1, dtype=dtype, device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.log(torch.ones(max - min + 1, dtype=dtype, device=device)) - torch.log(J_range)",
                            "BinOp"
                        ],
                        [
                            "J_range * np.log(p)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_38": {
                "start": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rrcg/gp_utils.py": {
        "torch": {
            "Normal_478": {
                "variable": {
                    "value": "indep_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "marginal.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "marginal.variance.clamp_min(1e-08).sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_494": {
                "variable": {
                    "value": "indep_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "marginal.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "marginal.variance.clamp_min(1e-08).sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_214": {
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_563": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_340": {
                "obj": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(train_inputs,)",
                            "Tuple"
                        ],
                        [
                            "list(self.train_inputs) if self.train_inputs is not None else []",
                            "IfExp"
                        ],
                        [
                            "train_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_342": {
                "obj": {
                    "value": "train_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_inputs, inputs)",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_420": {
                "tensors": {
                    "value": "[train_input, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_373": {
                "input": {
                    "value": "train_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_inputs, inputs)",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_inputs, inputs)",
                            "Call"
                        ],
                        [
                            "input.expand(*batch_shape, *input.shape[-2:])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_390": {
                "input": {
                    "value": "train_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_inputs, inputs)",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ],
                        [
                            "train_input.expand(*batch_shape, *train_input.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(train_inputs, inputs)",
                            "Call"
                        ],
                        [
                            "input.expand(*batch_shape, *input.shape[-2:])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rrcg/kernel_functions.py": {
        "torch": {
            "sum_14": {
                "variable": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((x.unsqueeze(-2) - y.unsqueeze(-3)) / ell) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x.unsqueeze(-2) - y.unsqueeze(-3)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_26": {
                "variable": {
                    "value": "kmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sqrt(sqdist) / ell",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "-sqdist / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_29": {
                "input": {
                    "value": "-dp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "input": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(((x.unsqueeze(-2) - y.unsqueeze(-3)) / ell) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum((x.unsqueeze(-2) - y.unsqueeze(-3)) ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(((x.unsqueeze(-2) - y.unsqueeze(-3)) / ell) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum((x.unsqueeze(-2) - y.unsqueeze(-3)) ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_32": {
                "input": {
                    "value": "-dp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "input": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(((x.unsqueeze(-2) - y.unsqueeze(-3)) / ell) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum((x.unsqueeze(-2) - y.unsqueeze(-3)) ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rrcg_experiments/experiment_fns_for_rrcg.py": {
        "torch": {
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[model.covar_module.base_kernel.raw_lengthscale, model.likelihood.noise_covar.raw_noise]",
                            "List"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_35": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[int(0.5 * total_iters), int(0.7 * total_iters), int(0.9 * total_iters)]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_203": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.save_path + f'.iter{itr + 1}'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rrcg_experiments/loss_landscape_for_rrcg.py": {
        "torch": {
            "linspace_83": {
                "variable": {
                    "value": "lengthscales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lengthscale_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "lengthscale_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_84": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "noise_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "noise_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rrcg_experiments/run_multiple_rr_iters.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(exp_hyper_params['seed'])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rrcg_experiments/run_rrcg_evaluation.py": {
        "torch": {
            "load_152": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "int(line.split('Hyper: seed: ')[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(observed_pred.mean - y, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_166": {
                "input": {
                    "value": "valid_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_prediction_stats(model, valid_x, valid_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_172": {
                "input": {
                    "value": "test_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_prediction_stats(model, test_x, test_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.pow(observed_pred.mean - y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_181": {
                "input": {
                    "value": "observed_pred.mean - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rrcg_experiments/run_rrcg_optimization.py": {
        "torch": {
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_137": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_200": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(model_path, f'{method}_model_{time_stamp}')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_230": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(observed_pred.mean - y, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_215": {
                "input": {
                    "value": "valid_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_prediction_stats(model, valid_x, valid_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_221": {
                "input": {
                    "value": "test_nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_prediction_stats(model, test_x, test_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_230": {
                "input": {
                    "value": "torch.pow(observed_pred.mean - y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_230": {
                "input": {
                    "value": "observed_pred.mean - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_159": {
                "input": {
                    "value": "dist_of_iter.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_cg.py": {
        "torch": {
            "linspace_11": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "solve_120": {
                "variable": {
                    "value": "(solve_exact, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(train_x * (5 * math.pi)) * train_x + torch.randn_like(train_x) * 0.1",
                            "BinOp"
                        ],
                        [
                            "train_y.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "Kxx + jitter * torch.eye(bsz)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_133": {
                "variable": {
                    "value": "solve_rr_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "*train_y.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "initial_guess",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhs.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "rhs.div(rhs_norm)",
                            "Call"
                        ],
                        [
                            "rhs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_43": {
                "variable": {
                    "value": "mul_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxx, solve_exact) - train_y",
                            "BinOp"
                        ],
                        [
                            "rhs - kxx @ initial_guess",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_44": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "residual.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "residual.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_45": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "input": {
                    "value": "Kxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matern(train_x, train_x, sig2, lengthscale, nu=1.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "solve_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.solve(train_y, Kxx + jitter * torch.eye(bsz))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "input": {
                    "value": "Kxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matern(train_x, train_x, sig2, lengthscale, nu=1.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "solve_rr_list.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_12": {
                "input": {
                    "value": "train_x * (5 * math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_12": {
                "input": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-3, 3, bsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_59": {
                "input": {
                    "value": "search_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kxx @ search_direction",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "mul_storage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_60": {
                "input": {
                    "value": "mul_storage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(residual)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_62": {
                "input": {
                    "value": "residual_inner_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precond_residual.mul(residual).sum(-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_65": {
                "input": {
                    "value": "solution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_guess.expand_as(residual).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "search_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.clone()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "solution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_guess.expand_as(residual).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_68": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxx, solve_exact) - train_y",
                            "BinOp"
                        ],
                        [
                            "rhs - kxx @ initial_guess",
                            "BinOp"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "mvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kxx @ search_direction",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxx, solve_exact) - train_y",
                            "BinOp"
                        ],
                        [
                            "rhs - kxx @ initial_guess",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_93": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxx, solve_exact) - train_y",
                            "BinOp"
                        ],
                        [
                            "rhs - kxx @ initial_guess",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "precond_residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preconditioner(residual)",
                            "Call"
                        ],
                        [
                            "preconditioner(residual)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "mul_storage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_94": {
                "input": {
                    "value": "mul_storage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(residual)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "residual_inner_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precond_residual.mul(residual).sum(-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_97": {
                "input": {
                    "value": "residual_inner_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precond_residual.mul(residual).sum(-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(alpha)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty_like(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_76": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prob_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - dist_of_iter.cdf(k)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_77": {
                "input": {
                    "value": "rr_solution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solution.clone()",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*batch_shape, 1, rhs.size(-1), dtype=residual.dtype, device=residual.device)",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "search_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.clone()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "rr_solution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solution.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_81": {
                "input": {
                    "value": "rr_residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.clone()",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "mvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kxx @ search_direction",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "rr_residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_116": {
                "n": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "eye_120": {
                "n": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "eye_135": {
                "n": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}