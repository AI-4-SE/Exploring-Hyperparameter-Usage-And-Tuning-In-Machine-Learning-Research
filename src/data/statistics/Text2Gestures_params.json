{
    "utils/common.py": {
        "sklearn": {
            "PCA_37": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "from_numpy_323": {
                "variable": {
                    "value": "joint_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_loader['test'][index]['joints_dict']['joints_offsets_all'][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main_new.py": {
        "torch": {
            "from_numpy_141": {
                "variable": {
                    "value": "joint_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_loader['test'][index]['joints_dict']['joints_offsets_all'][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "net/T2GNet.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_23": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_24": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_25": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_26": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.text_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_50": {
                "variable": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "num_hidden_units_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_51": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(text_dim, num_heads_enc, num_hidden_units_enc, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.text_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_dim + intended_emotion_dim + intended_polarity_dim + acting_task_dim + gender_dim + age_dim + handedness_dim + native_tongue_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((text_dim + quat_dim) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.text_offsets_to_gestures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_dim + offsets_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "quat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerDecoderLayer_60": {
                "variable": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "quat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "num_hidden_units_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerDecoder_61": {
                "variable": {
                    "value": "self.transformer_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerDecoderLayer(quat_dim, num_heads_dec, num_hidden_units_dec, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.temporal_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(max_time_steps, max_time_steps, 3, padding=1), nn.Conv1d(max_time_steps, max_time_steps, 3, padding=1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_215": {
                "variable": {
                    "value": "quat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat_pred_pre_norm.contiguous().view(-1, self.quat_channels)",
                            "Call"
                        ],
                        [
                            "F.normalize(quat_pred, dim=1).view(quat_pred_pre_norm.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "(text_latent, offset_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_65": {
                "in_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_66": {
                "in_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "(text_latent, intended_emotion.unsqueeze(0).repeat(time_steps, 1, 1), intended_polarity.unsqueeze(0).repeat(time_steps, 1, 1), acting_task.unsqueeze(0).repeat(time_steps, 1, 1), gender.unsqueeze(0).repeat(time_steps, 1, 1), age.unsqueeze(0).repeat(time_steps, 1, 1), handedness.unsqueeze(0).repeat(time_steps, 1, 1), native_tongue.unsqueeze(0).repeat(time_steps, 1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_120": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "net/T2GNet_glove.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_24": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_25": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_48": {
                "variable": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "num_hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_49": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(text_dim, num_heads, num_hidden_units, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.text_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_dim + intended_emotion_dim + intended_polarity_dim + acting_task_dim + gender_dim + age_dim + handedness_dim + native_tongue_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((text_dim + quat_dim) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.text_offsets_to_gestures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_dim + offsets_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "quat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerDecoderLayer_56": {
                "variable": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "quat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "num_hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerDecoder_57": {
                "variable": {
                    "value": "self.transformer_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerDecoderLayer(quat_dim, num_heads, num_hidden_units, dropout)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.temporal_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(max_time_steps, max_time_steps, 3, padding=1), nn.Conv1d(max_time_steps, max_time_steps, 3, padding=1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_207": {
                "variable": {
                    "value": "quat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat_pred_pre_norm.contiguous().view(-1, self.quat_channels)",
                            "Call"
                        ],
                        [
                            "F.normalize(quat_pred, dim=1).view(quat_pred_pre_norm.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "(text_latent, offset_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_23": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_59": {
                "in_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_60": {
                "in_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max_time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "(text_latent, intended_emotion.unsqueeze(0).repeat(time_steps, 1, 1), intended_polarity.unsqueeze(0).repeat(time_steps, 1, 1), acting_task.unsqueeze(0).repeat(time_steps, 1, 1), gender.unsqueeze(0).repeat(time_steps, 1, 1), age.unsqueeze(0).repeat(time_steps, 1, 1), handedness.unsqueeze(0).repeat(time_steps, 1, 1), native_tongue.unsqueeze(0).repeat(time_steps, 1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_114": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "net/utils/tgcn.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_112": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/build/lib/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/build/lib/torchlight/io.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchlight/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/torchlight/io.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/Quaternions_torch.py": {
        "torch": {
            "bmm_26": {
                "variable": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r.view(-1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_51": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(v).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_52": {
                "variable": {
                    "value": "uuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_117": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(r).contiguous()",
                            "Call"
                        ],
                        [
                            "rx",
                            "variable"
                        ],
                        [
                            "ry",
                            "variable"
                        ],
                        [
                            "rz",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(v).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q3 + q0 * q2), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_76": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(w, xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_80": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q2 + q0 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_116": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "e.reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "e.reshape(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_118": {
                "input": {
                    "value": "0.5 * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_157": {
                "obj": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_159": {
                "variable": {
                    "value": "dot_products",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q[1:] * q[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_173": {
                "obj": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_175": {
                "variable": {
                    "value": "dot_products",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q[:, 1:] * q[:, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 + q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_83": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_84": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_80": {
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_87": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 + q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_88": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q3 - q1 * q2), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_82": {
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 - q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_91": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_92": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q2 - q1 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_96": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 + q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_161": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(torch.cumsum(mask, dim=0) % 2).type(torch.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(np.cumsum(mask, axis=0) % 2).astype(np.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(torch.cumsum(mask, dim=1) % 2).type(torch.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(np.cumsum(mask, axis=1) % 2).astype(np.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_177": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(torch.cumsum(mask, dim=0) % 2).type(torch.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(np.cumsum(mask, axis=0) % 2).astype(np.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(torch.cumsum(mask, dim=1) % 2).type(torch.bool)",
                            "Call"
                        ],
                        [
                            "dot_products < 0",
                            "Compare"
                        ],
                        [
                            "(np.cumsum(mask, axis=1) % 2).astype(np.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fix_bvh.py": {
        "torch": {
            "from_numpy_7": {
                "ndarray": {
                    "value": "anim[2][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_7": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_9": {
                "ndarray": {
                    "value": "anim[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_9": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_10": {
                "ndarray": {
                    "value": "anim[4][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/losses.py": {
        "torch": {}
    },
    "utils/processor.py": {
        "torch": {
            "L1Loss_165": {
                "variable": {
                    "value": "self.recons_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_166": {
                "variable": {
                    "value": "self.affs_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_205": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_217": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_224": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/processor_glove.py": {
        "torch": {
            "L1Loss_160": {
                "variable": {
                    "value": "self.recons_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_161": {
                "variable": {
                    "value": "self.affs_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_195": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/processor_new.py": {
        "torch": {
            "L1Loss_152": {
                "variable": {
                    "value": "self.recons_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_153": {
                "variable": {
                    "value": "self.affs_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_192": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_199": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/spline.py": {
        "torch": {
            "norm_27": {
                "variable": {
                    "value": "self.segment_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "points_wrapped[:, 1:] - points_wrapped[:, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "self.distances",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((self.segment_lengths.shape[0], 1)).cuda().float(), torch.cumsum(self.segment_lengths, dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "der1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points[:, 1:] - points[:, :-1], (points[:, 0] - points[:, -1]).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "spline_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spline.get_track('curvature').unsqueeze(-1), spline.get_track('amplitude'), spline.get_track('frequency'), Spline_AS.versor_angle_difference(spline.get_track('direction'), spline.get_track('tangent')))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "points_wrapped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points, points[:, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_188": {
                "input": {
                    "value": "y[:, :, 1] * x[:, :, 0] - y[:, :, 0] * x[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y[:, :, 0] * x[:, :, 0] + y[:, :, 1] * x[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_199": {
                "tensors": {
                    "value": "(cosine, sine)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_209": {
                "tensors": {
                    "value": "(cosine, sine)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "(self.segment_lengths.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cumsum_29": {
                "input": {
                    "value": "self.segment_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_41": {
                "input": {
                    "value": "der1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((points[:, 1:] - points[:, :-1], (points[:, 0] - points[:, -1]).unsqueeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "next_points - points",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}