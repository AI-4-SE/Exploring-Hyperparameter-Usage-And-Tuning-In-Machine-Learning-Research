{
    "pipelines.py": {
        "sklearn": {
            "roc_auc_score_30": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_32": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_36": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_38": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "binary_cross_entropy_15": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_28": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ],
                        [
                            "pred.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sg2dgm/dgformat.py": {
        "sklearn": {
            "normalize_82": {
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/TLCGNN.py": {
        "torch": {
            "cat_84": {
                "variable": {
                    "value": "data.total_edges_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(len(train_edges)), torch.zeros(len(train_edges_false)), torch.ones(len(val_edges)), torch.zeros(len(val_edges_false)), torch.ones(len(test_edges)), torch.zeros(len(test_edges_false)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_99": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension * dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension * dimension + 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension * dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_18": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_51": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(sqdist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(emb_in - emb_out).pow(2)",
                            "Call"
                        ],
                        [
                            "self.leakyrelu(self.linear_1(torch.cat((sqdist, new_x), dim=1)))",
                            "Call"
                        ],
                        [
                            "torch.abs(self.linear(sqdist)).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(sqdist, min=0, max=40)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "edges_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.total_edges_y[:data.train_pos], data.total_edges_y[data.train_pos:data.train_pos + data.train_neg][index])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(sqdist, new_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "(sqdist - 2.0) / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "len(test_edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "len(test_edges_false)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "loaddatas.py": {
        "torch": {
            "Tensor_84": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}