{
    "benchmark/btb_benchmark/challenges/mlchallenge.py": {
        "sklearn": {
            "make_scorer_155": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "score_func": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "OneHotEncoder_117": {
                "variable": {
                    "value": "ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StratifiedKFold_158": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cv_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "n_splits": {
                    "value": "cv_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "cv_random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KFold_164": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cv_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "n_splits": {
                    "value": "cv_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "cv_random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_val_score_188": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(**hyperparams)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv(self.dataset)",
                            "Call"
                        ],
                        [
                            "pd.read_csv(url)",
                            "Call"
                        ],
                        [
                            "X.sample(min(len(X), self.max_rows))",
                            "Call"
                        ],
                        [
                            "ohe.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.pop(self.target_column)",
                            "Call"
                        ],
                        [
                            "y.iloc[0] == y",
                            "Compare"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/btb_benchmark/challenges/randomforest.py": {
        "sklearn": {}
    },
    "benchmark/btb_benchmark/challenges/sgd.py": {
        "sklearn": {}
    },
    "benchmark/btb_benchmark/challenges/xgboost.py": {
        "sklearn": {}
    },
    "btb/tuning/hyperparams/categorical.py": {
        "sklearn": {
            "OneHotEncoder_52": {
                "variable": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "categories": {
                    "value": "[choices]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "btb/tuning/metamodels/gaussian_process.py": {
        "sklearn": {
            "RBF_37": {
                "variable": {
                    "value": "self._model_kwargs[kernel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "length_scale": {
                    "value": "length_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/tuning/metamodels/test_gaussian_process.py": {
        "sklearn": {}
    },
    "tests/tuning/tuners/test_gaussian_process.py": {
        "sklearn": {}
    }
}