{
    "word_recognition.py": {
        "sklearn": {
            "KDTree_57": {
                "variable": {
                    "value": "kdt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "corrs_topk_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_embeds[topk_count:topk_count + i + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "word_retrieval.py": {
        "sklearn": {
            "KDTree_108": {
                "variable": {
                    "value": "kdt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "image_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_features(path_image_features)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_precision_score_271": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_occurance_list(original_query, label_array)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(dist[i]) - dist[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "average_precision_score_266": {
                "y_true": {
                    "value": "y_true_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_label_rank_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x / max_edit for x in y_label_rank]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "merge_embeds.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "new_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(ocr_text_embedding.shape)",
                            "Call"
                        ],
                        [
                            "np.sum((word_image_embedding, ocr_text_embedding), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(new_embedding).float().to(device)",
                            "Call"
                        ],
                        [
                            "l2Normalize(new_embedding)",
                            "Call"
                        ],
                        [
                            "new_embedding.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_31": {
                "variable": {
                    "value": "normVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputTensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputTensor",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "variable": {
                    "value": "normVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "normVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputTensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputTensor",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "normVal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_32": {
                "input": {
                    "value": "normVal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(inputTensor, p=2, dim=1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.norm(inputTensor, p=2, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_34": {
                "input": {
                    "value": "inputTensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputTensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}