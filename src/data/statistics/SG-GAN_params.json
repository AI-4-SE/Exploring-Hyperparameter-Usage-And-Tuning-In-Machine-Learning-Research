{
    "main.py": {
        "tensorflow": {
            "set_random_seed_4": {
                "seed": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Saver_42": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.input_c_dim + self.output_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_A_and_B_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.seg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.input_c_dim + self.output_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_A_and_B_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.mask_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height / 8, self.image_width / 8, self.segment_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.mask_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height / 8, self.image_width / 8, self.segment_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.stack(self.kernels, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DerivKernel_seg",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "self.seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_73": {
                "variable": {
                    "value": "self.seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_74": {
                "variable": {
                    "value": "self.conved_seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.depthwise_conv2d(self.seg_A, self.kernel, [1, 1, 1, 1], padding='VALID', name='conved_seg_A')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_75": {
                "variable": {
                    "value": "self.conved_seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.depthwise_conv2d(self.seg_B, self.kernel, [1, 1, 1, 1], padding='VALID', name='conved_seg_B')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_77": {
                "variable": {
                    "value": "self.weighted_seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.reduce_sum(self.conved_seg_A, axis=-1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_78": {
                "variable": {
                    "value": "self.weighted_seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.reduce_sum(self.conved_seg_B, axis=-1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.fake_A_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.input_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_A_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "self.fake_B_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.output_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_B_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self.mask_A_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height / 8, self.image_width / 8, self.segment_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_A_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self.mask_B_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height / 8, self.image_width / 8, self.segment_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_B_sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_137": {
                "variable": {
                    "value": "self.g_loss_a2b_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g_loss_a2b",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_a2b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_138": {
                "variable": {
                    "value": "self.g_loss_b2a_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g_loss_b2a",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_b2a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_139": {
                "variable": {
                    "value": "self.g_loss_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_140": {
                "variable": {
                    "value": "self.g_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.g_loss_a2b_sum, self.g_loss_b2a_sum, self.g_loss_sum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_141": {
                "variable": {
                    "value": "self.db_loss_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "db_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.db_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "variable": {
                    "value": "self.da_loss_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "da_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.da_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_143": {
                "variable": {
                    "value": "self.d_loss_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "variable": {
                    "value": "self.db_loss_real_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "db_loss_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.db_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "variable": {
                    "value": "self.db_loss_fake_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "db_loss_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.db_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "variable": {
                    "value": "self.da_loss_real_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "da_loss_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.da_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "variable": {
                    "value": "self.da_loss_fake_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "da_loss_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.da_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_148": {
                "variable": {
                    "value": "self.d_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.da_loss_sum, self.da_loss_real_sum, self.da_loss_fake_sum, self.db_loss_sum, self.db_loss_real_sum, self.db_loss_fake_sum, self.d_loss_sum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.test_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.input_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "test_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.test_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.image_height, self.image_width, self.output_c_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "test_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_163": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "self.d_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_173": {
                "variable": {
                    "value": "self.g_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_176": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_178": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./logs",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_262": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_297": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "depthwise_conv2d_74": {
                "input": {
                    "value": "self.seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filter": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conved_seg_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_75": {
                "input": {
                    "value": "self.seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filter": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conved_seg_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sign_77": {
                "x": {
                    "value": "tf.reduce_sum(self.conved_seg_A, axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_78": {
                "x": {
                    "value": "tf.reduce_sum(self.conved_seg_B, axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "self.DB_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "input": {
                    "value": "self.DB_fake_sample",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_132": {
                "input": {
                    "value": "self.DA_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "input": {
                    "value": "self.DA_fake_sample",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "self.conved_seg_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "self.conved_seg_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_95": {
                "input": {
                    "value": "self.DB_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "self.DA_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_105": {
                "input": {
                    "value": "self.DA_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "self.DB_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module.py": {
        "tensorflow": {
            "constant_17": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.stack([gx, gy], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DerivKernel_image",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_146": {
                "x": {
                    "value": "tf_deriv(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "abs_deriv",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs_deriv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.abs(tf_deriv(in_)) - tf.abs(tf_deriv(target)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(abs_deriv, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_18": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.stack([gx, gy], axis=-1), name='DerivKernel_image', dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "GradXY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "h4_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(h4, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, 2, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d1, 'g_bn_d1'), e7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, 2, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ],
                        [
                            "tf.pad(d2, [[0, 0], [3, 3], [3, 3], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_67": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d2, 'g_bn_d2'), e6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if options.is_training else 1.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_71": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d3, 'g_bn_d3'), e5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d4, 'g_bn_d4'), e4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d5, 'g_bn_d5'), e3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d6, 'g_bn_d6'), e2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[instance_norm(d7, 'g_bn_d7'), e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_109": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(c0, options.gf_dim, 7, 1, padding='VALID', name='g_e1_c'), 'g_e1_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(c1, options.gf_dim * 2, 3, 2, name='g_e2_c'), 'g_e2_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(conv2d(c2, options.gf_dim * 4, 3, 2, name='g_e3_c'), 'g_e3_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(d1, 'g_d1_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "instance_norm(d2, 'g_d2_bn')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, 2, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ],
                        [
                            "tf.pad(d2, [[0, 0], [3, 3], [3, 3], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(d2, options.output_c_dim, 7, 1, padding='VALID', name='g_pred_c')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "tf.abs(in_ - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "(in_ - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "tf.multiply(weight, abs_deriv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_87": {
                "x": {
                    "value": "d8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d7), options.output_c_dim, name='g_d8')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ],
                        [
                            "'res'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_100": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_102": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.relu(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_135": {
                "x": {
                    "value": "in_ - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_143": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_148": {
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "abs_deriv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.abs(tf_deriv(in_)) - tf.abs(tf_deriv(target)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(abs_deriv, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_38": {
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(h3, options.segment_class, s=1, name='d_h4_conv')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_61": {
                "features": {
                    "value": "e8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance_norm(conv2d(lrelu(e7), options.gf_dim * 8, name='g_e8_conv'), 'g_bn_e8')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_65": {
                "features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(e8), options.gf_dim * 8, name='g_d1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d1, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d1, 'g_bn_d1'), e7], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(r9, options.gf_dim * 2, 3, 2, name='g_d1_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d1, 'g_d1_bn'))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_69": {
                "features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d1), options.gf_dim * 8, name='g_d2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d2, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d2, 'g_bn_d2'), e6], 3)",
                            "Call"
                        ],
                        [
                            "deconv2d(d1, options.gf_dim, 3, 2, name='g_d2_dc')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(instance_norm(d2, 'g_d2_bn'))",
                            "Call"
                        ],
                        [
                            "tf.pad(d2, [[0, 0], [3, 3], [3, 3], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_73": {
                "features": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d2), options.gf_dim * 8, name='g_d3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(d3, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d3, 'g_bn_d3'), e5], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "features": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d3), options.gf_dim * 8, name='g_d4')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d4, 'g_bn_d4'), e4], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_79": {
                "features": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d4), options.gf_dim * 4, name='g_d5')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d5, 'g_bn_d5'), e3], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_82": {
                "features": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d5), options.gf_dim * 2, name='g_d6')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d6, 'g_bn_d6'), e2], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_85": {
                "features": {
                    "value": "d7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(tf.nn.relu(d6), options.gf_dim, name='g_d7')",
                            "Call"
                        ],
                        [
                            "tf.concat([instance_norm(d7, 'g_bn_d7'), e1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_102": {
                "features": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='VALID', name=name + '_c1'), name + '_bn1')",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.nn.relu(y), [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(y, dim, ks, s, padding='VALID', name=name + '_c2'), name + '_bn2')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "get_variable_15": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_17": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_19": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_36": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape()[-1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_31": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_42": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_15": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_26": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_32": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_44": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "prepare_data.py": {
        "tensorflow": {}
    },
    "segment_class.py": {
        "tensorflow": {}
    }
}