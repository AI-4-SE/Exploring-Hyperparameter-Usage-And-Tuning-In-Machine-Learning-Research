{
    "Two_Circle/utlis/data_synthetic.py": {
        "sklearn": {}
    },
    "Two_Spiral/utlis/data_synthetic.py": {
        "sklearn": {}
    },
    "utlis/data_synthetic.py": {
        "sklearn": {}
    },
    "CIFAR/metrics/IS.py": {
        "tensorflow": {
            "transpose_14": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_16": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_17": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_18": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RunClassifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_25": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional_ops.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=1, back_prop=False, swap_memory=True, name='RunClassifier')",
                            "Call"
                        ],
                        [
                            "array_ops.concat(array_ops.unstack(logits), 0)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_20": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=num_splits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CIFAR/model.py": {
        "tensorflow": {
            "reduce_mean_6": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_7": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W1, dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W2, dim_W1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W3, dim_W2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_channel, dim_W3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "self.dis2gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_channel, dim_W3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2gen_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "self.dis2gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W3, dim_W2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2gen_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "self.dis2gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W2, dim_W1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2gen_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "self.dis2gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2gen_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "self.est_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_channel, dim_W3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "est_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "self.est_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W3, dim_W2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "est_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.est_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W2, dim_W1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "est_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self.est_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W1, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "est_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "self.dis2est_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_channel, dim_W3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2est_W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "self.dis2est_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W3, dim_W2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2est_W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "self.dis2est_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W2, dim_W1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2est_W3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "self.dis2est_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4, dim_W1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dis2est_W4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "image_real",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "gen2est_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ksd_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ksd_emp(image_gen)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_118": {
                "variable": {
                    "value": "gen2est_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(gen2est_cost)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "est2real_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ksd_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ksd_emp(image_real)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_124": {
                "variable": {
                    "value": "est2real_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(est2real_cost)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "p_real",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.estimate(image_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.estimate(image_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_154": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_168": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.reduce_mean(h4, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Z, [-1, 1, 1, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_177": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Z, [-1, 1, 1, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 4, 4, self.dim_W1]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 4, 4, self.dim_W1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_181": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 8, 8, self.dim_W2]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 8, 8, self.dim_W2]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 8, 8, self.dim_W2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_186": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 16, 16, self.dim_W3]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 16, 16, self.dim_W3]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_190": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 32, 32, self.dim_channel]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 32, 32, self.dim_channel]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "Z_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self.batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Z, [-1, 1, 1, self.dim_z])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, self.dim_z])",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_199": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Z, [-1, 1, 1, self.dim_z])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 4, 4, self.dim_W1]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 4, 4, self.dim_W1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_203": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 8, 8, self.dim_W2]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 8, 8, self.dim_W2]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_204": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 8, 8, self.dim_W2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_208": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 16, 16, self.dim_W3]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 16, 16, self.dim_W3]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnormalize(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_212": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.gen_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape_l4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, 32, 32, self.dim_channel]",
                            "List"
                        ],
                        [
                            "[self.batch_size, 32, 32, self.dim_channel]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + self.image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_226": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_227": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_229": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.reduce_mean(h4, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_230": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(b, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_17": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([tf.shape(x_gen)[0]], minval=0, maxval=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, [-1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, tf.shape(x_gen)[1], tf.shape(x_gen)[2], tf.shape(x_gen)[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_85": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([tf.shape(x_gen)[0]], minval=0, maxval=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, [-1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, tf.shape(x_gen)[1], tf.shape(x_gen)[2], tf.shape(x_gen)[3]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x_gen)[1], tf.shape(x_gen)[2], tf.shape(x_gen)[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "variable": {
                    "value": "gradient_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(tf.gradients(self.dis2gen(x_), x_)[0]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(gradient_norm - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "loss_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.dis2gen(x_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "loss_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.dis2gen(x_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(p, image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sq, [-1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "f_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(f_x, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f_x, image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(df_x, [-1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(tf.reduce_sum(tf.square(df_x), 1) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_7": {
                "x": {
                    "value": "X - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_8": {
                "x": {
                    "value": "std + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(b, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, -1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_33": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "self.dis2gen(image_gen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "x": {
                    "value": "gen2est_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(ksd_gen, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.abs(gen2est_cost))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_124": {
                "x": {
                    "value": "est2real_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(ksd_real, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.abs(est2real_cost))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2gen_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_149": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2est_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "input": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2gen_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.dis2est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h2, self.gen_W3, output_shape=output_shape_l3, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h3))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h2, self.est_W3, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2est_W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_159": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "(X - mean) / tf.sqrt(std + eps)",
                            "BinOp"
                        ],
                        [
                            "X * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "input_tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h3, self.dis2gen_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.nn.conv2d(h3, self.dis2est_W4, strides=[1, 1, 1, 1], padding='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h3, self.gen_W4, output_shape=output_shape_l4, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(h3, self.est_W4, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [-1, 128])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_17": {
                "x": {
                    "value": "X - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "x": {
                    "value": "std + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_86": {
                "x": {
                    "value": "tf.ones_like(u) - u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "tf.square(tf.gradients(self.dis2gen(x_), x_)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "features": {
                    "value": "gradient_norm - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_97": {
                "ys": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.estimate(image)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "f_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis2est(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(f_x, [-1, 1]), [1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_102": {
                "ys": {
                    "value": "f_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis2est(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(f_x, [-1, 1]), [1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_104": {
                "features": {
                    "value": "tf.reduce_sum(tf.square(df_x), 1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_105": {
                "x": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(p, image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sq, [-1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "f_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis2est(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(f_x, [-1, 1]), [1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_139": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2gen_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_141": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2gen_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_150": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2est_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dis2est_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_161": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_163": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_222": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2gen_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.dis2est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(image, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(Z_, self.gen_W1, output_shape=output_shape_l1, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h1))",
                            "Call"
                        ],
                        [
                            "lrelu(tf.nn.conv2d(X, self.est_W1, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_224": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2gen_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.dis2est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(h1, self.gen_W2, output_shape=output_shape_l2, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batchnormalize(h2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h2, [self.batch_size, 8, 8, self.dim_W2])",
                            "Call"
                        ],
                        [
                            "lrelu(batchnormalize(tf.nn.conv2d(h1, self.est_W2, strides=[1, 2, 2, 1], padding='SAME')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.est_W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "tf.gradients(self.dis2gen(x_), x_)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([tf.shape(x_gen)[0]], minval=0, maxval=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, [-1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, tf.shape(x_gen)[1], tf.shape(x_gen)[2], tf.shape(x_gen)[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.square(df_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_88": {
                "ys": {
                    "value": "self.dis2gen(x_)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(u, x_gen) + tf.multiply(tf.ones_like(u) - u, x_true)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_104": {
                "x": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f_x, image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(df_x, [-1, 32 * 32 * 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Circle/Joint_JS.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_174": {
                "variable": {
                    "value": "para_D",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "variable": {
                    "value": "para_G",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_176": {
                "variable": {
                    "value": "para_P",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_192": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.exp(-E)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_118": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_119": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_121": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_134": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_135": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_142": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_84": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_93": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_104": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "input_tensor": {
                    "value": "tf.log(1 - discriminator(G_sample)) + tf.log(discriminator(X_true))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "tf.log(discriminator(G_sample))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_98": {
                "x": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_111": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_119": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_124": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_126": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_132": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_135": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_140": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_157": {
                "x": {
                    "value": "tf.matmul(sq, tf.transpose(sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_158": {
                "*args": {
                    "value": "tf.matmul(sq, tf.transpose(dxkxy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_168": {
                "x": {
                    "value": "discriminator(G_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_260": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_117": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_119": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_124": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_133": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_135": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(dxkxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_159": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_161": {
                "input_tensor": {
                    "value": "t13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.matmul(sq, tf.transpose(sq)), kxy) + dxykxy_tr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_167": {
                "x": {
                    "value": "discriminator(X_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_157": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_158": {
                "a": {
                    "value": "dxkxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(-tf.matmul(kxy, x), tf.multiply(x, sum_kxy)) / h ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(coeff, x) - tf.multiply(x, tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1))",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Circle/Joint_JS_test.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_152": {
                "variable": {
                    "value": "Density",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_theta(Mesh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_157": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_158": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_102": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_118": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_119": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_126": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_143": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_69": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_88": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_94": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_99": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_102": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_107": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_109": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_119": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_124": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_141": {
                "x": {
                    "value": "tf.matmul(sq, tf.transpose(sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_142": {
                "*args": {
                    "value": "tf.matmul(sq, tf.transpose(dxkxy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_102": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_107": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_117": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_119": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(dxkxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "t13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.matmul(sq, tf.transpose(sq)), kxy) + dxykxy_tr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "a": {
                    "value": "dxkxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(-tf.matmul(kxy, x), tf.multiply(x, sum_kxy)) / h ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(coeff, x) - tf.multiply(x, tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1))",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Circle/Joint_W.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_184": {
                "variable": {
                    "value": "para_D",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_185": {
                "variable": {
                    "value": "para_G",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_186": {
                "variable": {
                    "value": "para_P",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_201": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.exp(-E)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_119": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_120": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_122": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_135": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_136": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_168": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([tf.shape(x_gen)[0]], minval=0, maxval=1)",
                            "Call"
                        ],
                        [
                            "tf.diag(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_170": {
                "variable": {
                    "value": "gradient_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(tf.gradients(discriminator(x_), x_)[0]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "gradient_norm - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discriminator(x_gen) - discriminator(x_true) + lambda_p * penalty",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_106": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "input_tensor": {
                    "value": "discriminator(G_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_99": {
                "x": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_112": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_120": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_133": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_136": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_141": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_158": {
                "x": {
                    "value": "tf.matmul(sq, tf.transpose(sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_159": {
                "*args": {
                    "value": "tf.matmul(sq, tf.transpose(dxkxy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "1 - u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "x_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "tf.square(tf.gradients(discriminator(x_), x_)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_269": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_125": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_134": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(dxkxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_160": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "t13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.matmul(sq, tf.transpose(sq)), kxy) + dxykxy_tr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_171": {
                "x": {
                    "value": "tf.gradients(discriminator(x_), x_)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_159": {
                "a": {
                    "value": "dxkxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(-tf.matmul(kxy, x), tf.multiply(x, sum_kxy)) / h ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(coeff, x) - tf.multiply(x, tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1))",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_171": {
                "ys": {
                    "value": "discriminator(x_)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, x_gen) + tf.matmul(1 - u, x_true)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Circle/Joint_W_test.py": {
        "tensorflow": {
            "placeholder_52": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "Density",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_theta(Mesh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_140": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_99": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_100": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_115": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_116": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_123": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_92": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_97": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_100": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_105": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_107": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_113": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_116": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_121": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_100": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_105": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_114": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_121": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_105": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_114": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Spiral/Joint_JS.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "variable": {
                    "value": "para_D",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_176": {
                "variable": {
                    "value": "para_G",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_177": {
                "variable": {
                    "value": "para_P",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_192": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.exp(-E)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_119": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_120": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_122": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_135": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_136": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_106": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "tf.log(1 - discriminator(G_sample)) + tf.log(discriminator(X_true))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "tf.log(discriminator(G_sample))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_99": {
                "x": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_112": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_120": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_133": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_136": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_141": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_158": {
                "x": {
                    "value": "tf.matmul(sq, tf.transpose(sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_159": {
                "*args": {
                    "value": "tf.matmul(sq, tf.transpose(dxkxy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_169": {
                "x": {
                    "value": "discriminator(G_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_260": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_125": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_134": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(dxkxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_160": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "t13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.matmul(sq, tf.transpose(sq)), kxy) + dxykxy_tr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_168": {
                "x": {
                    "value": "discriminator(X_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_159": {
                "a": {
                    "value": "dxkxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(-tf.matmul(kxy, x), tf.multiply(x, sum_kxy)) / h ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(coeff, x) - tf.multiply(x, tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1))",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Spiral/Joint_JS_test.py": {
        "tensorflow": {
            "placeholder_53": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_138": {
                "variable": {
                    "value": "Density",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_theta(Mesh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_143": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_102": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_117": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_118": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_125": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_69": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_88": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_94": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_99": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_102": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_107": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_109": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_115": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_118": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_123": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_102": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_107": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_116": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_116": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Spiral/Joint_W.py": {
        "tensorflow": {
            "placeholder_72": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_184": {
                "variable": {
                    "value": "para_D",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_185": {
                "variable": {
                    "value": "para_G",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_186": {
                "variable": {
                    "value": "para_P",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_201": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.exp(-E)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_119": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_120": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_122": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_135": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_136": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_168": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([tf.shape(x_gen)[0]], minval=0, maxval=1)",
                            "Call"
                        ],
                        [
                            "tf.diag(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_170": {
                "variable": {
                    "value": "gradient_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(tf.gradients(discriminator(x_), x_)[0]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "gradient_norm - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discriminator(x_gen) - discriminator(x_true) + lambda_p * penalty",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_106": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "input_tensor": {
                    "value": "discriminator(G_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_99": {
                "x": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_112": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_120": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_133": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_136": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_141": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_158": {
                "x": {
                    "value": "tf.matmul(sq, tf.transpose(sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_159": {
                "*args": {
                    "value": "tf.matmul(sq, tf.transpose(dxkxy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "1 - u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "x_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "tf.square(tf.gradients(discriminator(x_), x_)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_269": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_125": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_134": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(dxkxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_160": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "t13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.matmul(sq, tf.transpose(sq)), kxy) + dxykxy_tr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_171": {
                "x": {
                    "value": "tf.gradients(discriminator(x_), x_)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "a": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_q(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_159": {
                "a": {
                    "value": "dxkxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(-tf.matmul(kxy, x), tf.multiply(x, sum_kxy)) / h ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(coeff, x) - tf.multiply(x, tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1))",
                            "BinOp"
                        ],
                        [
                            "Kernel(x, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_171": {
                "ys": {
                    "value": "discriminator(x_)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, x_gen) + tf.matmul(1 - u, x_true)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Two_Spiral/Joint_W_test.py": {
        "tensorflow": {
            "placeholder_53": {
                "variable": {
                    "value": "X_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "Mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "Density",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_theta(Mesh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_144": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-E",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_102": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-pdist / h ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(kxy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_117": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(x), axis=1), shape=[tf.shape(x)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_118": {
                "variable": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(X2, tf.transpose(X2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * XY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_125": {
                "variable": {
                    "value": "dxykxy_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(c + pdist) ** (beta - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-2 * dim * c * beta + (-4 * beta ** 2 + (4 - 2 * dim) * beta) * pdist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, z_dim])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_69": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "exp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "o3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o2, X_dim, activation=None, name='l3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o2, exp_num, activation=tf.nn.sigmoid, name='l3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(o3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_88": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, h_dim_g, activation=tf.nn.leaky_relu, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_p, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, h_dim_d, activation=tf.nn.tanh, name='l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(o1, h_dim_g, activation=tf.nn.leaky_relu, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_p, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(o1, h_dim_d, activation=tf.nn.tanh, name='l2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_94": {
                "ys": {
                    "value": "p_theta(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_99": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_102": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_107": {
                "x": {
                    "value": "-tf.matmul(kxy, x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, sum_kxy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_109": {
                "x": {
                    "value": "dim * h ** 2 - pdist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_115": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_118": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(X2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_123": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(coeff, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_102": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_107": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(kxy, axis=1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_116": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ],
                        [
                            "tf.tile(X2_, [1, tf.shape(x)[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "tf.reduce_sum(coeff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "kxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-pdist / h ** 2 / 2.0)",
                            "Call"
                        ],
                        [
                            "(c + pdist) ** beta",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beta * (c + pdist) ** (beta - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_116": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}