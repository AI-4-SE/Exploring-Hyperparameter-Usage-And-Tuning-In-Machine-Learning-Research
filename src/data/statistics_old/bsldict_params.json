{
    "demo/demo.py": {
        "sklearn": {
            "pairwise_distances_121": {
                "variable": {
                    "value": "dst",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "continuous_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty((0, embd_dim), dtype=float)",
                            "Call"
                        ],
                        [
                            "np.append(continuous_features, out['embds'].cpu().detach().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "dict_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(bsldict_metadata['videos']['features']['mlp'])[dict_ix]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demo/utils.py": {
        "torch": {
            "stack_259": {
                "variable": {
                    "value": "rgb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rgb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rgb).permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "np.transpose(rgb_resized, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "rgb[:, :, uly:uly + inp_res, ulx:ulx + inp_res]",
                            "Subscript"
                        ],
                        [
                            "to_torch(rgb).float()",
                            "Call"
                        ],
                        [
                            "color_normalize(rgb, mean, std)",
                            "Call"
                        ],
                        [
                            "rgb_",
                            "Name"
                        ]
                    ]
                }
            },
            "permute_259": {
                "variable": {
                    "value": "rgb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "str(checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "rgb_slided",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_clips",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil((nFrames - num_in_frames) / stride) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_in_frames",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "rgb_",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "num_in_frames",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_tensor_359": {
                "obj": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_271": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_272": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_368": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_tensor_369": {
                "obj": {
                    "value": "ndarray",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "loss/loss.py": {
        "torch": {
            "device_191": {
                "variable": {
                    "value": "dev",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_54": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x['features'].squeeze(-1).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embd_bsl1k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features[ix_bsl1k]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "embd_dict.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_175": {
                "variable": {
                    "value": "numerator",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(num_unique_dicts)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "empty_176": {
                "variable": {
                    "value": "denominator",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(num_unique_dicts)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "outputs[is_mouthing]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs['targets'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_105": {
                "variable": {
                    "value": "bsl1k_batch_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "cnt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cnt + T",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "cnt + T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_bsl1k_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(targets_bsl1k)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_dict_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(targets_dict)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "logsumexp_178": {
                "variable": {
                    "value": "numerator[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distances[pos_mask_list[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_179": {
                "variable": {
                    "value": "denominator[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "distances[mask_list[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "denominator - numerator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "num_bsl1k_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(targets_bsl1k)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bsl1k_max_len",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_172": {
                "variable": {
                    "value": "where_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "pos_neg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_dict.unsqueeze(0) | curr_bsl1k.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "pos_neg_mask * ~diff_batch_match",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_158": {
                "condition": {
                    "value": "curr_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets_dict == t",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_159": {
                "condition": {
                    "value": "curr_bsl1k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "match_multi[:, curr_dict][:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/i3d.py": {
        "torch": {
            "pad_40": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.logits(embds)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv3d_72": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self._use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.logits(embds)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "AvgPool3d_398": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "[b0, b1, b2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_83": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/i3d_mlp.py": {
        "torch": {}
    },
    "models/mlp.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, input_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.adaptor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adaptation_dims[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1064",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_44": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + self.res(x)",
                            "BinOp"
                        ],
                        [
                            "self.adaptor(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_24": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "adaptation_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "adaptation_dims[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "adaptation_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}