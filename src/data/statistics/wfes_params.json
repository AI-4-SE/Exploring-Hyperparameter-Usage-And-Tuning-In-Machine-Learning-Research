{
    "code/bounds.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(Iother, Itest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.test)",
                            "Call"
                        ],
                        [
                            "int(args.test * n)",
                            "Call"
                        ]
                    ]
                },
                "stratify": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data['label'])",
                            "Call"
                        ],
                        [
                            "Y[keep_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_43": {
                "variable": {
                    "value": "(Itrain, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Iother",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.train)",
                            "Call"
                        ],
                        [
                            "int(args.train * n)",
                            "Call"
                        ]
                    ]
                },
                "stratify": {
                    "value": "Y[Iother]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(data['label'])",
                            "Call"
                        ],
                        [
                            "Y[keep_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resample_121": {
                "variable": {
                    "value": "(D, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "len(D)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/classify.py": {
        "sklearn": {}
    },
    "code/compute_distances.py": {
        "sklearn": {}
    },
    "code/evaluate/bounds.py": {
        "sklearn": {
            "KNeighborsClassifier_9": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_val_score_12": {
                "estimator": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KNeighborsClassifier(n_neighbors=1, metric='precomputed', algorithm='brute', n_jobs=-1)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/extract_features.py": {
        "sklearn": {}
    }
}