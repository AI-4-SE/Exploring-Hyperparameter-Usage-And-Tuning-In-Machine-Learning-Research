{
    "DCASE_research/challenge2019/task2(Audio_tagging)/run_experiment.py": {
        "sklearn": {
            "train_test_split_45": {
                "variable": {
                    "value": "(x_trn, x_val, y_trn, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "fnames",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.TrainDataset(x_trn, None, y_trn, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.batch_size",
                            "Attribute"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "batch_size_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "conf.n_jobs + 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "conf.workers_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.TrainDataset(x_val, None, y_val, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.test_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "conf.n_jobs + 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "conf.workers_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.lr",
                            "Attribute"
                        ],
                        [
                            "lr_list",
                            "variable"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_68": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(params=net.parameters(), lr=lr, amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.t_max",
                            "Attribute"
                        ],
                        [
                            "t_max_list",
                            "variable"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "eta_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.eta_min",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.TestDataset(test_fnames, x_test, test_transforms, tta=tta)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.batch_size",
                            "Attribute"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "batch_size_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(images.cuda()).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "weight_best.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_batch)",
                            "Call"
                        ],
                        [
                            "net(x_batch.cuda()).detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(net(images.cuda()).detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "save_125": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_best.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_219": {
                "variable": {
                    "value": "conf.tb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "comment": {
                    "value": "comment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'_batch_size={batch_size}_lr={lr}_t_max={t_max}_epoches={epoch}_scheduler=COSINE_preproc={conf.preprocessing_type}'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "DCASE_research/challenge2019/task2(Audio_tagging)/config.py": {
        "torch": {
            "manual_seed_82": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_84": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DCASE_research/challenge2019/task2(Audio_tagging)/dataset.py": {
        "torch": {
            "from_numpy_37": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.labels[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(label).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DCASE_research/challenge2019/task2(Audio_tagging)/model.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, (3, 3), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels, out_channels, (3, 3), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels=3, out_channels=64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_66": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}