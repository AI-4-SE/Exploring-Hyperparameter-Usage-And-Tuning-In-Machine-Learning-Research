{
    "main.py": {
        "tensorflow": {
            "placeholder_7": {
                "variable": {
                    "value": "input_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(25, 30, 30, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_11": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mscred.py": {
        "tensorflow": {
            "shape_6": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "x[:, :shape_list(h)[1], :shape_list(h)[2], :]",
                            "Subscript"
                        ],
                        [
                            "layer(concat([x, h]))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_12": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ],
                        [
                            "nums_filter",
                            "variable"
                        ],
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ],
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "selu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvLSTM2D_20": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ],
                        [
                            "nums_filter",
                            "variable"
                        ],
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ],
                        [
                            "nums_filter",
                            "variable"
                        ],
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ],
                        [
                            "zip(nums_filter, strides)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "selu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_52": {
                "variable": {
                    "value": "reshape_batch_to_timestep",
                    "type": "variable",
                    "possible_values": []
                },
                "function": {
                    "value": "_reshape_batch_to_timestep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_reshape_batch_to_timestep",
                            "Call"
                        ]
                    ]
                }
            },
            "Concatenate_74": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(similarities, (1, tf.shape(h_all)[1], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_all * h_last",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(similarities, (1, tf.shape(h_all)[1], -1)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(similarities, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(similarities, shape_list(similarities) + [1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_all * h_last",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(similarities, (1, tf.shape(h_all)[1], -1)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(similarities, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(similarities, shape_list(similarities) + [1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_list(similarities) + [1, 1, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_all * similarities",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoded",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1] + shape_list(encoded)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_95": {
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last - reconstructed",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_all * h_last",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(similarities, (1, tf.shape(h_all)[1], -1)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(similarities, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(similarities, shape_list(similarities) + [1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, tf.shape(h_all)[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "h_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_all",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}