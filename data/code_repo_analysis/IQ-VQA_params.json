{
    "train_model/Engineer.py": {
        "sklearn": {},
        "torch": {
            "softmax_26": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_28": {
                "variable": {
                    "value": "x1_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_354": {
                "variable": {
                    "value": "predicted_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "compute_score_with_logits(logit_res, input_answers_variable.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_349": {
                "variable": {
                    "value": "qc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qc_return_dict['qc_loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_450": {
                "variable": {
                    "value": "predicted_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "compute_score_with_logits(logit_res, answer_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_453": {
                "variable": {
                    "value": "upbound",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(answer_scores, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_229": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "compute_score_with_logits(logit_res, input_answers_variable.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_unk_softmax(logits, 1, 0)",
                            "Call"
                        ],
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_118": {
                "variable": {
                    "value": "qc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qc_return_dict['qc_loss']",
                            "Subscript"
                        ],
                        [
                            "torch.mean(qc_loss, 0)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.mean(qc_return_dict['qc_loss'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "generated_questions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[generated_questions.narrow(1, 1, generated_questions.shape[1] - 1), generated_questions.narrow(1, 0, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__142": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_l2_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.training_parameters.max_grad_l2_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cosine_similarity_196": {
                "variable": {
                    "value": "cosine_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "detached_g_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myModel.question_consistency.embed(detached_g_q).sum(1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "detached_o_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myModel.question_consistency.embed(detached_o_q).sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_208": {
                "variable": {
                    "value": "allowed_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(generated_questions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "{'epoch': iepoch, 'iter': i_iter, 'state_dict': myModel.state_dict(), 'optimizer': myOptimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_snapshot_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'model_%08d.pth' % i_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_453": {
                "input": {
                    "value": "answer_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['ans_scores']",
                            "Subscript"
                        ],
                        [
                            "batch['ans_scores']",
                            "Subscript"
                        ],
                        [
                            "batch['ans_scores']",
                            "Subscript"
                        ],
                        [
                            "answer_scores.cuda() if use_cuda else answer_scores",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "myModel.module.question_embedding_models.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_l2_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.training_parameters.max_grad_l2_norm",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "IQ/question_consistency.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(q_vocab) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embed_size', 300)",
                            "Call"
                        ]
                    ]
                },
                "scale_grad_by_freq": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.ans_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_ans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(a_vocab)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embed_size', 300)",
                            "Call"
                        ]
                    ]
                },
                "scale_grad_by_freq": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.a_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.imp_a_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embed_size', 300)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_size', 512)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(q_vocab) + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "question_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('question_embed_size', 2048)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embed_size', 300)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "captions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_vector, captions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_143": {
                "variable": {
                    "value": "(s_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_tuple[0]['imp_seq_length_batch'].clone().detach()",
                            "Call"
                        ],
                        [
                            "lengths + 2",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mixed_feat, embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_160": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(captions)",
                            "Call"
                        ],
                        [
                            "torch.cat([mixed_feat, embeddings], 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "s_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(lengths, descending=True)",
                            "Call"
                        ],
                        [
                            "s_lengths.cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[s if s < self.max_seg_length else self.max_seg_length for s in s_lengths]",
                            "ListComp"
                        ],
                        [
                            "[s_lengths[i] for i in range(0, len(s_lengths)) if flags[i]]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_161": {
                "variable": {
                    "value": "target_tuple",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "captions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_tuple[1]",
                            "Subscript"
                        ],
                        [
                            "captions.to(self.embed.weight.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([start_vector, captions], 1)",
                            "Call"
                        ],
                        [
                            "captions[indices]",
                            "Subscript"
                        ],
                        [
                            "captions[new_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "s_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(lengths, descending=True)",
                            "Call"
                        ],
                        [
                            "s_lengths.cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[s if s < self.max_seg_length else self.max_seg_length for s in s_lengths]",
                            "ListComp"
                        ],
                        [
                            "[s_lengths[i] for i in range(0, len(s_lengths)) if flags[i]]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample(q, a, imp_knob)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sampled_ids, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "embed_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embed_path)",
                            "Call"
                        ],
                        [
                            "np.concatenate([embed_init, se_init], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "n_ans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(a_vocab)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ans_embed_hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "ans_embed_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embed_size', 300)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "[len(captions), 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_utils/dataSet.py": {
        "torch": {}
    },
    "dataset_utils/vqa_collates.py": {
        "torch": {}
    },
    "dataset_utils/vqa_concate_dataset.py": {
        "torch": {}
    },
    "global_variables/global_variables.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_test.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "data_reader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_eval_data_set(**cfg['data'], **cfg['model'], verbose=True)",
                            "Call"
                        ],
                        [
                            "prepare_test_data_set(**cfg['data'], **cfg['model'], verbose=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['data']['batch_size'] if args.batch_size is None else args.batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/classifier.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.linear_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "txt_nonLinear_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['txt_hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ans_candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "image_nonLinear_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['img_hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ans_candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_59": {
                "module": {
                    "value": "nn.Linear(in_dim, kwargs['hidden_dim'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_62": {
                "module": {
                    "value": "nn.Linear(kwargs['hidden_dim'], out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "kwargs['pretrained_text']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "kwargs['pretrained_image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/image_attention.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "question_embedding_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "question_embedding",
                            "Method Argument"
                        ],
                        [
                            "question_embedding",
                            "Method Argument"
                        ],
                        [
                            "question_embedding",
                            "Method Argument"
                        ],
                        [
                            "question_embedding",
                            "Method Argument"
                        ],
                        [
                            "question_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "concat_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_feat, question_embedding_expand)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(self.Fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ],
                        [
                            "att1 + att2",
                            "BinOp"
                        ],
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "question_fa_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_fa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Fa_txt(question_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(self.Fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ],
                        [
                            "att1 + att2",
                            "BinOp"
                        ],
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(self.Fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ],
                        [
                            "att1 + att2",
                            "BinOp"
                        ],
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, num_loc).type(torch.LongTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_locs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_132": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.arange(0, num_loc).type(torch.LongTensor), dim=0).expand(batch_size, num_loc)",
                            "Call"
                        ],
                        [
                            "tmp1.cuda() if use_cuda else tmp1",
                            "IfExp"
                        ]
                    ]
                },
                "other": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(image_locs.data, 1).expand(batch_size, num_loc)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_133": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(tmp1, tmp2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 2).expand_as(attention)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(self.Fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ],
                        [
                            "att1 + att2",
                            "BinOp"
                        ],
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "masked_attention_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mask_attentions(attention, image_locs)",
                            "Call"
                        ],
                        [
                            "masked_attention / masked_attention_sum",
                            "BinOp"
                        ],
                        [
                            "attention",
                            "variable"
                        ],
                        [
                            "attention",
                            "variable"
                        ],
                        [
                            "self._mask_attentions(attention, image_locs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_156": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(self.Fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ],
                        [
                            "att1 + att2",
                            "BinOp"
                        ],
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_128": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_loc",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "top_down_bottom_up/image_embedding.py": {
        "torch": {
            "bmm_41": {
                "variable": {
                    "value": "tmp_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "image_feat_variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_feat_variable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_65": {
                "variable": {
                    "value": "i3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/image_feature_encoding.py": {
        "torch": {
            "Linear_49": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "i3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/intermediate_layer.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "top_down_bottom_up/multi_modal_combine.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.lc_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "kwargs['image_feat_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.lc_ques",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "kwargs['ques_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "iatt_iq_sumpool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_feature_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_feature.view(batch_size, num_loc, int(dim / self.pool_size), self.pool_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_75": {
                "variable": {
                    "value": "iatt_iq_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_iq_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(F.relu(iatt_iq_sumpool)) - torch.sqrt(F.relu(-iatt_iq_sumpool))",
                            "BinOp"
                        ],
                        [
                            "iatt_iq_sqrt.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.mfb_expand_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.mfb_sqz_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(feature_list[0].size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "ques1_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lc_ques(question_embed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "joint_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image1 * ques1_expand",
                            "BinOp"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(joint_feature, dim=1)",
                            "Call"
                        ],
                        [
                            "image_fa * question_fa_expand",
                            "BinOp"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "image_fa * question_fa_expand",
                            "BinOp"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "joint_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "iatt_iq_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_iq_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(iatt_iq_sqrt)",
                            "Call"
                        ],
                        [
                            "iatt_iq_l2.view(batch_size, num_loc, int(dim / self.pool_size))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(iatt_iq_l2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "question_fa_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_fa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Fa_txt(question_embedding)",
                            "Call"
                        ],
                        [
                            "self.Fa_txt2(self.Fa_txt1(question_embedding))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "question_fa_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_fa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Fa_txt(question_embedding)",
                            "Call"
                        ],
                        [
                            "self.Fa_txt2(self.Fa_txt1(question_embedding))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "input": {
                    "value": "F.relu(iatt_iq_sumpool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "F.relu(-iatt_iq_sumpool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "input": {
                    "value": "-iatt_iq_sumpool",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "top_down_bottom_up/nonlinear_layer.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "y_tilda",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "weight_norm_49": {
                "module": {
                    "value": "nn.Linear(dims[-2], dims[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_65": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_47": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/post_combine_transform.py": {
        "torch": {
            "weight_norm_28": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(in_features=in_dim, out_features=kwargs['out_dim'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kwargs['out_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "iatt_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "x_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "iatt_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(iatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_61": {
                "variable": {
                    "value": "iatt_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "kwargs['out_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "iatt_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(iatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "top_down_bottom_up/question_embeding.py": {
        "torch": {
            "Embedding_33": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "kwargs['num_vocab']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "kwargs['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_35": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "kwargs['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "kwargs['LSTM_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "kwargs['lstm_layer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dropout": {
                    "value": "kwargs['lstm_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_vocab",
                            "Method Argument"
                        ],
                        [
                            "num_vocab",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "kwargs['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "self.LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "kwargs['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "kwargs['LSTM_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "kwargs['LSTM_layer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kwargs['LSTM_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kwargs['conv1_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kwargs['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "kwargs['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kwargs['conv1_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kwargs['conv2_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kwargs['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "kwargs['padding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "qatt_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qatt_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(lstm_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "qtt_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qatt_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(qatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_100": {
                "variable": {
                    "value": "qtt_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qtt_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(qatt_conv2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "lstm_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "kwargs['embedding_init']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "embedding_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embedding_file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "top_down_bottom_up/top_down_bottom_up_model.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "question_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "question_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "question_embedding_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "question_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "image_embedding_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "attention_maps_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "image_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "image_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * image_feat_variable",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "img_feat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model_intermediates['raw_image_embeddings'].clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "ques_embedding_each",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_embedding[idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "image_feat_each",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_feat in enumerate(image_feat_variable)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "image_embedding_each",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_each * image_feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "data_reader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_data_fun(**cfg['data'], **cfg['model'], verbose=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.data.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.data.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "data_reader_trn",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_train_data_set(**cfg['data'], **cfg['model'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.data.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.data.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "data_reader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_eval_data_set(**cfg['data'], **cfg['model'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "val_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "cfg.data.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.data.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_65": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda_fun",
                            "Call"
                        ]
                    ]
                }
            },
            "load_172": {
                "variable": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(files, key=os.path.getctime)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_79": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_model/Loss.py": {
        "torch": {
            "eq_44": {
                "variable": {
                    "value": "y_is_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_46": {
                "variable": {
                    "value": "log_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(pred_score, target_score, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, 1)",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, size_average=True)",
                            "Call"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * (log_y - log_x)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_59": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_63": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_76": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_80": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_92": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_96": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * (log_y - log_x)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_109": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_113": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_117": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ],
                        [
                            "pred_score",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ],
                        [
                            "target_score",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(pred_score, target_score, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, 1)",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, size_average=True)",
                            "Call"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_82": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(pred_score, target_score, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, 1)",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, size_average=True)",
                            "Call"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_115": {
                "input": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss1) / loss1.size(0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_model/model_factory.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "question_embeding_models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "image_feature_encode_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "image_emdedding_models_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "image_emdedding_models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_117": {
                "variable": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class(image_emdedding_models_list, question_embeding_models, multi_modal_combine, classifier, image_feature_encode_list, inter_model, question_consistency_model, skip_thought, decode_question, attended)",
                            "Call"
                        ],
                        [
                            "vqa_multi_modal_model(image_emdedding_models_list, question_embeding_models, multi_modal_combine, classifier, image_feature_encode_list, inter_model)",
                            "Call"
                        ],
                        [
                            "my_model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(my_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}