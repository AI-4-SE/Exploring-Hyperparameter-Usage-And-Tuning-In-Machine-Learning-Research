{
    "Collaboration and Competition/functions/DDPGAgent.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_ACTOR",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_CRITIC",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "next_states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_states_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "states_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "actions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "next_actions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.actor_target(states) for states in states_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_83": {
                "variable": {
                    "value": "critic_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.critic_local(states_tensor, actions_tensor)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_94": {
                "variable": {
                    "value": "actions_pred_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.actor_local(states) for states in states_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Collaboration and Competition/functions/extras.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.rewards for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.dones for e in experiences if e is not None]).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "np.vstack([e.states[index] for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "np.vstack([e.actions[index] for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "np.vstack([e.next_states[index] for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Collaboration and Competition/functions/model_arch.py": {
        "torch": {
            "manual_seed_16": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fcs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(state_size + action_size) * num_agents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fcs1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcs1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fcs1(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Continous Control/models_agent_py/Agent.py": {
        "torch": {
            "Adam_41": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.LR_ACTOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.LR_CRITIC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().to(self.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_109": {
                "variable": {
                    "value": "critic_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rewards + self.GAMMA * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "next_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.actor_local.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_actor.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.critic_local.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_critic.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_actor.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_actor.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_critic.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "self.CHECKPOINT_FOLDER + 'checkpoint_critic.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Continous Control/models_agent_py/models.py": {
        "torch": {
            "manual_seed_26": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(state))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fcs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fcs1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fcs1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcs1_units + action_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fcs1(state))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, action)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Deep_Q_Networks/dqn_agent.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.qnetwork_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_97": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qnetwork_local(states).gather(1, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "next_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Deep_Q_Networks/model.py": {
        "torch": {
            "manual_seed_17": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Navigation Project/dqn_agent.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.qnetwork_local.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_97": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qnetwork_local(states).gather(1, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "next_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "dones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Navigation Project/model.py": {
        "torch": {
            "manual_seed_19": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Reinforce/DeepRl-PPO/pong_utils.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(states)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(actions, dtype=torch.int8, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(actions, dtype=torch.int8, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "old_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "old_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(old_probs, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(old_probs, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards_normalized",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(rewards_future - mean[:, np.newaxis]) / std[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "(rewards_future - mean[:, np.newaxis]) / std[:, np.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_182": {
                "variable": {
                    "value": "new_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "actions == RIGHT",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "new_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "states_to_prob(policy, states)",
                            "Call"
                        ],
                        [
                            "torch.where(actions == RIGHT, new_probs, 1.0 - new_probs)",
                            "Call"
                        ],
                        [
                            "states_to_prob(policy, states)",
                            "Call"
                        ],
                        [
                            "torch.where(actions == RIGHT, new_probs, 1.0 - new_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - new_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(actions, dtype=torch.int8, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(actions, dtype=torch.int8, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "old_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "old_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(old_probs, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(old_probs, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards_normalized",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(rewards_future - mean[:, np.newaxis]) / std[:, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "(rewards_future - mean[:, np.newaxis]) / std[:, np.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_219": {
                "variable": {
                    "value": "new_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "actions == RIGHT",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "new_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "states_to_prob(policy, states)",
                            "Call"
                        ],
                        [
                            "torch.where(actions == RIGHT, new_probs, 1.0 - new_probs)",
                            "Call"
                        ],
                        [
                            "states_to_prob(policy, states)",
                            "Call"
                        ],
                        [
                            "torch.where(actions == RIGHT, new_probs, 1.0 - new_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - new_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_225": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "new_probs / old_probs",
                            "BinOp"
                        ],
                        [
                            "new_probs / old_probs",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_226": {
                "variable": {
                    "value": "clipped_surrogate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * rewards",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "batch_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.swapaxes(list_of_images_prepro, 0, 1)",
                            "Call"
                        ],
                        [
                            "preprocess_batch([fr1, fr2])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_192": {
                "input": {
                    "value": "ratio * rewards + beta * entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_239": {
                "input": {
                    "value": "clipped_surrogate + beta * entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_261": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_264": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_267": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_189": {
                "input": {
                    "value": "old_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_190": {
                "input": {
                    "value": "1.0 - old_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_231": {
                "input": {
                    "value": "old_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_232": {
                "input": {
                    "value": "1.0 - old_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}