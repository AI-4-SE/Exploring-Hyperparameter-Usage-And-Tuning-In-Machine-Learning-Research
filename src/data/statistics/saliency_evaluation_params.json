{
    "eval_infid_sen.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval_models.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_17": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "explanations.py": {
        "torch": {
            "addcmul_11": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(input.size()).type_as(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "positive_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input > 0).type_as(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_21": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(input.size()).type_as(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "torch.addcmul(torch.zeros(input.size()).type_as(input), grad_output, positive_mask_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "positive_mask_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(grad_output > 0).type_as(grad_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot.cuda() * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_22": {
                "input": {
                    "value": "torch.zeros(input.size()).type_as(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "positive_mask_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input > 0).type_as(grad_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, output.size()[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(one_hot), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(one_hot.cuda() * output)",
                            "Call"
                        ],
                        [
                            "torch.sum(one_hot * output)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "infid_sen_utils.py": {
        "torch": {
            "sum_42": {
                "variable": {
                    "value": "pdt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "image_copy.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "Xs_img - Zs_real_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "Xs_img - Zs_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "data": {
                    "value": "Zs_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.tensor(Xs_img - Zs_real_img), requires_grad=False).float()",
                            "Call"
                        ],
                        [
                            "Zs.reshape(n_sample, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "Variable(torch.tensor(Xs_img - Zs_img), requires_grad=False).float().cuda()",
                            "Call"
                        ],
                        [
                            "Zs_img.reshape(n_sample, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "Variable(torch.tensor(Zs_img), requires_grad=False).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_69": {
                "variable": {
                    "value": "pdt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "loader.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_14": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_62": {
                "variable": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view(-1, 7 * 7 * 64)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_val, pad_val, pad_val, pad_val)",
                            "Tuple"
                        ],
                        [
                            "(pad_val_start, pad_val_end, pad_val_start, pad_val_end)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view(-1, 7 * 7 * 64)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "y.contiguous().view(-1, 7 * 7 * 64)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "input": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, padding, 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "tffile[count].transpose(3, 2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "tffile[count].transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "tffile[count]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}